{
    "contents" : "library(bereR)\nlibrary(pandaR)\nlibrary(bptools)\nlibrary(reshape2)\nlibrary(penalized)\nlibrary(Biobase)\n\nanalysisCode <- sample(100000,1)\n\n# copd.filename <- \"~/gd/Harvard/Research/data/Eclipse/null.networks_all.rds\"\n# dataset.filename <- \"~/gd/Harvard/Research/data/Eclipse/eclipse.networks.rds\"\n\nmotifFile <- \"~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt\"\n# exprFile <- \"~/gd/Harvard/Research/data/Ovarian/CombinedOV.txt\"\nexprFile <- \"~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt\"\n# exprFile <- \"~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt\"\n#exprFile <- \"~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt\"\n#exprFile <- \"~/gd/Harvard/Research/data/LGRC/LGRC_expression.txt\"\nppiFile <- \"~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt\"\n#clinicalFile <- \"~/gd/Harvard/Research/data/Ovarian/Clinical.txt\"\nclinicalFile <- \"~/gd/Harvard/Research/data/GTEx/GTEx_clinical.txt\"\n#clinicalFile <- \"~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt\"\n#clinicalFile <- \"~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt\"\n#clinicalFile <- \"~/gd/Harvard/Research/data/LGRC/lgrc.merged.clinical.data.clean.txt\"\n\nexprFile <- \"./gd/Harvard/Research/data/GTEx/gtex_cell.rdata\"\nmotifFile <- \"./gd/Harvard/Research/data/GTEx/KG_cisbp_652.txt\"\nphenotypeName <- \"our_subtypes\"\ncasesString <- \"cells_ebv-transformed_lymphocytes\"\ncontrolsString <- \"skin\"\nfilterType <- NA\n\n# casesString <- \"COPD Subjects\"\n# controlsString <- \"Smoker Controls\"\n# phenotypeName <- \"Subject.type\"\n\ncasesString <- \"Lung\"\ncontrolsString <- \"Colon\"\nphenotypeName <- \"SMTS\"\n\nanalysisName <- \"ECLIPSE_matchMF\"\nnullPerms <- 500\nnetworkInferenceName <- \"bere\"\nfilterType <- \"Gender\"\nfilterBy <- \"M\"\npermuteGeneLabels <- F\n\nargs<-commandArgs(TRUE)\nif(length(args)!=0){\n    motifFile <- args[1]\n    exprFile <- args[2]\n    ppiFile <- args[3]\n    clinicalFile <- args[4]\n    casesString <- args[5]\n    controlsString <- args[6]\n    phenotypeName <- args[7]\n    analysisName <- args[8]\n    nullPerms <- as.numeric(args[9])\n    networkInferenceName <- args[10]\n    # Optional parameters\n    if(length(args)>10){\n        filterType <- args[11]\n        filterBy <- args[12]\n        if(filterType==\"NA\"){\n            filterType <- NA\n        }\n    } else {\n        filterType <- NA\n    }\n    if(length(args)>12){\n        permuteGeneLabels <- args[13]\n    } else {\n        permuteGeneLabels <- F\n    }\n}\noutputDir <- file.path(\"~\",paste(analysisName, analysisCode ,sep=\"_\"))\ndir.create(outputDir, showWarnings=FALSE)\nwrite.csv(args,file=file.path(outputDir,paste(\"arguments_\",analysisCode,\".txt\",sep=\"\")))\n\n# Set the network inference method\nif(networkInferenceName==\"bere\"){\n    networkInferenceMethod <- bere  \n}\nif(networkInferenceName==\"bereFull\"){\n    networkInferenceMethod <- bereFull\n}\nif(networkInferenceName==\"panda\"){\n    networkInferenceMethod <- function(motifs, exp){\n        panda(motifs, exp)@regNet\n    }\n}\nif(networkInferenceName==\"pandaC\"){\n    networkInferenceMethod <- function(motifs, exp){\n        randindex <- sample(10000000000,1)\n        # write the files to disk\n        motifFile <- file.path(\"~/tmp\", paste0(\"_motifs_tmp\",randindex,\".txt\"))\n        expFile   <- file.path(\"~/tmp\", paste0(\"_exp_tmp\",randindex,\".txt\"))\n        outFile   <- paste0(\"output\", randindex)\n        write.table(motifs, motifFile, sep=\"\\t\", quote=F, col.names = F,  row.names = F)\n        write.table(exp, expFile, sep=\"\\t\", quote=F, col.names = F)\n        \n        system(paste0(\"./gd/Harvard/Research/panda/Version2/PANDA \",\n                      \"-e \", expFile, \" \",\n                      \"-m \", motifFile, \" \",\n                      \"-o \", outFile, \" \",\n                      \"-k 4\"\n        ))\n        \n        # read in results\n        regnet <- read.table(paste0(outFile, \"_FinalNetwork.pairs\"), header=F)\n        regnet <- dcast(regnet, V1 ~ V2, value.var='V4')\n        rownames(regnet) <- regnet[,1]\n        regnet <- regnet[,-1]\n        \n        # clean up\n        system(paste0('rm ',motifFile))\n        system(paste0('rm ',expFile))\n        system(paste0('rm ',outFile, \"_FinalNetwork.pairs\"))\n        as.matrix(regnet)\n    }\n}\nif(networkInferenceName==\"pandaM\"){\n    networkInferenceMethod <- function(motifs, exp){\n        randindex <- sample(10000000000,1)\n        \n        # write the files to disk\n        motifFilename <- paste(\"_motifs_tmp\",randindex,\".txt\",sep=\"\")\n        expFilename <- paste(\"_exp_tmp\",randindex,\".txt\",sep=\"\")\n        outFile   <- paste0(\"output\", randindex)\n        write.table(motifs, file.path(\"/scratch/\",motifFilename), sep=\"\\t\", quote=F, col.names = F,  row.names = F)\n        write.table(exp, file.path(\"/scratch/\",expFilename), sep=\"\\t\", quote=F, col.names = F)\n        \n        # Copy master panda script\n        system(paste('cp ','~/panda_matlab/RunPANDA.m ','~/panda_matlab/RunPANDA', randindex,'.m',sep=\"\"))\n        \n        # Set file pointers\n        system(paste0(\"sed -i 's/motifPlaceholder.txt/\", motifFilename, \"/g' ~/panda_matlab/RunPANDA\", randindex,\".m\"))\n        system(paste0(\"sed -i 's/expPlaceholder.txt/\", expFilename, \"/g' ~/panda_matlab/RunPANDA\", randindex,\".m\"))\n        system(paste0(\"sed -i 's/PANDAOutputPlaceholder/\", outFile, \"/g' ~/panda_matlab/RunPANDA\", randindex,\".m\"))\n        \n        # Run matlab script\n        system(paste0(\"matlab -nojvm -nodesktop -r 'run  ~/panda_matlab/RunPANDA\", randindex,\".m;quit'\"))\n        \n        # clean up (removed after switching to scrarch space)\n        #         system(paste0('rm ',file.path(\"/scratch\", motifFilename)))\n        #         system(paste0('rm ',file.path(\"/scratch\", expFilename)))\n        system(paste0('rm ',file.path(\"~/panda_matlab/\", paste0(\"RunPANDA\",randindex,\".m\"))))\n        \n        # load results back into R\n        # read in results\n        regnet <- read.table(paste0(\"/scratch/\", outFile, \"_FinalNetwork.pairs\"), header=T)\n        #         system(paste0('rm ',file.path(\"~/panda_matlab\", paste0(outFile, \"_FinalNetwork.pairs\"))))\n        regnet <- dcast(regnet, TF ~ gene, value.var='PANDA.prediction')\n        rownames(regnet) <- regnet[,1]\n        regnet <- regnet[,-1]\n        res <- as.matrix(regnet)\n        if(sum(is.na(res))>0){\n            saveRDS(list(exp,res,motifs),paste0(\"FailedNetwork\",randindex,\".rda\"))\n        }\n        res\n    }\n}\n######################################################\n##      Data Loading from ECLIPSE dataset          ###\n##                                                 ###\n######################################################\ndataset <- list()\nif (grepl(\".txt\", exprFile)){\n    dataset$motif    <- read.table(motifFile,header=F)\n    dataset$exp      <- read.table(exprFile,row.names=1,header=T)\n    dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep=\"\\t\",row.names=1)\n} else if (grepl(\".rdata\", exprFile)){\n    #GTEx analysis\n    load(exprFile)\n    dataset$motif    <- cbind(read.table(motifFile,header=F),1)\n    dataset$exp      <- exprs(both)\n    dataset$clinical <- pData(both)\n    \n    # Remove ensembl decimal and value after\n    rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)\n    \n    #Get top 20,000 variable genes\n    rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)\n    genesIncluded <- names(rowsds[1:19000])\n    dataset$exp <- dataset$exp[genesIncluded,]\n    dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]\n    \n    mappingFile <- \"~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt\"\n    mappings <- read.table(mappingFile, header=T)\n    mappings[,1] <- substring(mappings[,1],0,5) \n    dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]\n    \n}\ndataset$ppi      <- read.table(ppiFile,header=F)\ndataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order\n\n# Removed this substring line for GTEx data (may need to reinsert for some other dataset)\n# colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)\n# rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)\n\nmatches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))\ndataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data\ndataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data\n\nif(permuteGeneLabels){\n    print(\"Permuting gene labels once\")\n    rownames(dataset$exp) <- sample(rownames(dataset$exp))\n} else {\n    print(\"No gene label permutation (default)\")\n}\n\n# Specify the group partition\nif(is.na(filterType)){\n    subsetFilter <- rep(T,nrow(dataset$clinical))\n} else {\n    subsetFilter <- dataset$clinical[,filterType]==filterBy\n}\nphenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)\nallFilter <- subsetFilter&phenoFilter\n\ndataset$exp <- dataset$exp[,allFilter]\ndataset$clinical <- dataset$clinical[allFilter,]\ncasesFilter <- dataset$clinical[,phenotypeName]==casesString\ncontrolsFilter <- dataset$clinical[,phenotypeName]==controlsString\n\n# covariateValues <- dataset$clinical[,covariate]\n# table(dataset$clinical$pkyrs>40, casesFilter)\n# mean(dataset$clinical$pkyrs[casesFilter])\n# mean(dataset$clinical$pkyrs[!casesFilter])\n# male <- dataset$clinical$GENDER==\"1-Male\"\n# mean(dataset$clinical$pkyrs[male])\n# mean(dataset$clinical$pkyrs[!male])\n# \n# table(controlsFilter,dataset$clinical[,\"Gold.stage\"])\n\n######################################################\n##  Running null networks with improved algorithm  ###\n##                 2/25/15    START                ###\n######################################################\n\n# dataset$casesNetwork <- networkInferenceMethod(dataset$motif,dataset$exp[,casesFilter])\n# dataset$controlsNetwork <- networkInferenceMethod(dataset$motif,dataset$exp[,controlsFilter])\n# \n# # periodically save workspace\n# save.image(file=file.path(outputDir,paste(\"activeImage\",analysisCode,\".RData\",sep=\"\")))\n\n# Copy expression data for null network generation\nnull.exp <- dataset$exp\n\n#Parallel stuff\nlibrary(foreach)\nlibrary(doParallel)\n\n# Calculate the number of cores\nnum_cores <- detectCores() - 4\nnum_cores <- min(num_cores, 20)\n\n# Initiate cluster\nif(!is.na(num_cores)){\n    cl <- makeCluster(num_cores)\n    registerDoParallel(cl)\n}\n\n#start time\nstrt  <- Sys.time()\niters <- nullPerms*2+2 # Two networks for each partition, plus observed partition\n#loop\nprint(\"Running null permutations in parallel\")\nprint(paste0(num_cores,\" cores used\"))\nprint(paste0(iters,\" networks to be estimated\"))\nnull.networks<-foreach(i=1:iters,.packages=c(\"bereR\",\"pandaR\",\"reshape2\",\"penalized\")) %dopar% {\n    print(paste0(\"Running iteration \", i))\n    if(i%%2==0){\n        selectedSamples <- casesFilter\n    } else {\n        selectedSamples <- controlsFilter\n    }\n    if(i<=2){\n        # Observed partition : Don't reorder anything\n        null.exp <- dataset$exp\n    } else {\n        # Null partition, randomly reorder\n        ## resample case-control\n        null.exp <- dataset$exp[,sample(1:ncol(dataset$exp))]\n        ## This line scrambles the gene names (toggle this) 8/18/15\n        #     rownames(null.exp) <- rownames(null.exp)[sample(1:nrow(null.exp))]\n    }\n    #     null.exp <- null.exp + matrix(rnorm(length(null.exp))/10,nrow=nrow(null.exp),ncol=ncol(null.exp))\n    null.exp <- null.exp[,selectedSamples]\n    if (sum(rowSums(null.exp)==0)>0){\n        zeroGenes <- which(rowSums(null.exp)==0)\n        for(gene in zeroGenes){\n            null.exp[gene,] <- rnorm(ncol(null.exp))\n        }\n    }\n    tmpNet <- networkInferenceMethod(dataset$motif, null.exp)\n    print(paste0(\"Finished running iteration\", i))\n    tmpNet\n}\n\nprint(Sys.time()-strt)\nif(!is.na(num_cores)){\n    stopCluster(cl)\n}\n\n\n\n\n# Add new null permutations to existing list if any\n# This step is to allow for skipping the above step and starting with a stored null set\n# if (file.exists(copd.filename)){\n# null.networks <- append(null.networks, readRDS(\"null.networks_all.rds\"))\n# }\n\n# Save the observed and null networks (as separate files)\n#saveRDS(dataset,dataset.filename)\n#saveRDS(null.networks,copd.filename)\n\n#####################################################\n# START HERE TO SKIP PERMUTATIONS.\n#####################################################\n\n#null.networks  <-  readRDS(copd.filename)\n#dataset        <-  readRDS(dataset.filename)\n\n#####################################################\n###  TF analysis\n#####################################################\n\nif(!is.na(num_cores)){\n    cl <- makeCluster(4)\n    registerDoParallel(cl)\n}\n\nstrt  <- Sys.time()\n#loop\nprint(\"Running transition calculations in parallel\")\nprint(paste0(num_cores,\" cores used\"))\nprint(paste0(length(null.networks)/2,\" transitions to be estimated\"))\ntransMatrices <- foreach(i=1:(length(null.networks)/2),.packages=c(\"bptools\",\"reshape2\",\"penalized\")) %dopar% {\n    transformation.matrix(null.networks[[2*i]], null.networks[[2*i-1]],remove.diagonal=T,method=\"ols\")    \n}\n\nprint(Sys.time()-strt)\nif(!is.na(num_cores)){\n    stopCluster(cl)\n}\n\n# Parallelized this part on 10/30/15\n# # Calculate the transformation matrix for the observed data\n# tm.observed <- transformation.matrix(null.networks[[2]], null.networks[[1]],remove.diagonal=T,method=\"ols\")\n# \n# \n# # Calculate the transformation matrix for the null data\n# tm.null <- lapply(1:nullPerms, function(x){\n#     transformation.matrix(null.networks[[2*x+2]],null.networks[[2*x+1]],method=\"ols\",remove.diagonal = T)\n# })\n\n# dataset$controlsNetwork <- null.networks[1]\n# dataset$casesNetwork <- null.networks[2]\n\n# This object will be in the many GB range\nrm(null.networks)\ngc()\n\n# periodically save workspace\nsave.image(file=file.path(outputDir,paste(\"activeImage\",analysisCode,\".RData\",sep=\"\")))\n\n\n# Do the sum of sq ODM plot versus null\npng(file.path(outputDir,paste('SSODMplot_unscaled',analysisCode,'.png', sep=\"\")), width=4800)\nssodm.plot(transMatrices[[1]], transMatrices[-1],plot.title=paste(\"SSODM observed and null, \",casesString,\" vs \",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=\"\"))\ndev.off()\npng(file.path(outputDir,paste('SSODMplot_scaled',analysisCode,'.png', sep=\"\")), width=4800)\nssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T, plot.title=paste(\"SSODM observed and null, \",casesString,\" vs \",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=\"\"))\ndev.off()\n\ntransMatrices <- lapply(transMatrices, function(x){\n    rownames(x) <- mappings[match(rownames(x), mappings[,1]),2]\n    colnames(x) <- mappings[match(colnames(x), mappings[,1]),2]\n    x\n})\n\n# Top TFs\n#highlight.tfs <- c(\"E2F4\",\"NRF1\",\"GABPA\",\"ELK1\",\"ELK4\",\"E2F1\",\"ZBTB33\",\"ELF1\",\"ZFX\")\n\n# #####################################################\n# ### Gene Analysis\n# #####################################################\n# # Calculate the transformation matrix for the observed data\n# tm.observed.genes <- transformation.matrix(dataset$casesNetwork, dataset$controlsNetwork,remove.diagonal=T,method=\"old\",by.tfs=T,standardize=F)\n# \n# \n# # Calculate the transformation matrix for the null data\n# tm.null.genes <- lapply(null.networks, function(x){\n#   transformation.matrix(x[[1]],x[[2]],method=\"old\",standardize=F)\n# })\n# \n# # Do the sum of sq ODM plot versus null\n# ssodm.plot(tm.observed, tm.null,plot.title=\"SSODM observed and null, COPD subjects vs Smoker control (R)\")\n# ssodm.plot(tm.observed, tm.null, rescale=T, plot.title=\"SSODM observed and null, COPD subjects vs Smoker control (R)\",highlight.tfs = c(\"ELK1\",\"E2F4\"))\n\n\n\n######################################################\n##  Running null networks with improved algorithm  ###\n##                 2/25/15      END                ###\n######################################################\n# \n# \n# cppFunction('NumericMatrix correl(NumericMatrix x) {\n#   int nrow = x.nrow(), ncol = x.ncol();\n#   NumericMatrix resultMatrix(nrow,nrow);\n#   for (int i = 0; i < nrow; i++) {\n#     for (int j = i; j < nrow; j++) {\n#       double sumproduct = 0;\n#       for (int k = 0; k < ncol; k++){\n#         sumproduct+=x(i,k)*x(j,k);\n#       }\n#       resultMatrix(i,j) = sumproduct/(nrow-1);\n#       resultMatrix(j,i) = sumproduct/(nrow-1);\n#     }\n#   }\n#   return resultMatrix;\n# }')\n# \n# cppFunction('double squarert(double x){\n#   return sqrt(x);\n#             }')\n# set.seed(1014)\n# randmat <- t(matrix(rnorm(30000*50), 50))\n# t(apply(randmat, 1, function(x)(x-mean(x))/(sd(x))))\n# \n# system.time(correl(t(apply(randmat, 1, function(x)(x-mean(x))/(sd(x))))))\n# system.time(cor(t(randmat)))\n# #>  [1] 458 558 488 458 536 537 488 491 508 528\n# rowSumsC(x)\n# #>  [1] 458 558 488 458 536 537 488 491 508 528\n# \n\n## Gene expression analysis\nlibrary(limma)\ndesign <- model.matrix(~factor(casesFilter))\ndiff.exp.res <- lmFit(dataset$exp, design)\ndiff.exp.res <- ebayes(diff.exp.res)\n\n\n# 7/28/15 \n# create results table\n# 10/30/15 updates for GTEx, which does not (or I'm not using) expression values for TFs\nobsSsodm <- apply(transMatrices[[1]],1,function(x){t(x)%*%x})\ndTFI_pVals <- 1-calculate.tm.p.values(transMatrices[[1]], transMatrices[-1])\nnegLogPValues <- -log(dTFI_pVals)\n# replace Inf values with max values\nnegLogPValues[negLogPValues==Inf] <- 35\nlabels <- names(obsSsodm)\nlabels[rank(-negLogPValues)>20 & rank(-obsSsodm)>20]<-\"\"\nplotDF <- data.frame(obsSsodm, negLogPValues, \"labels\"=labels)\npng(file.path(outputDir,paste('Volcano plot',analysisCode,'.png', sep=\"\")), width=1200)\nggplot(data=plotDF,aes(x=obsSsodm, y=negLogPValues, label=labels)) + geom_point() + geom_text(vjust=0) + \n    ylab(\"-log(p-value)\") + xlab(\"SSODM\") + ggtitle(\"Signal vs significance\")\ndev.off()\ndTFI_pVals <- dTFI_pVals[names(dTFI_pVals)%in%rownames(diff.exp.res$p.value)]\ndTFI_fdr   <- p.adjust(dTFI_pVals, method = 'fdr')\nincludedTFs <- intersect(names(dTFI_pVals),rownames(diff.exp.res$p.value))\nlimma_pVals <- diff.exp.res$p.value[names(dTFI_pVals),2]\nlimma_fdr <- p.adjust(limma_pVals, method = 'fdr')\nresultTable <- cbind(obsSsodm,dTFI_pVals,dTFI_fdr)\nresultTable <- resultTable[order(dTFI_pVals),]\ncolnames(resultTable) <- c(\"Magnitude\",\"dTFI uncorrected p-value\",\"dTFI FDR\")\nwrite.csv(resultTable,file=file.path(outputDir,paste(\"resultTable\",analysisCode,\".csv\", sep=\"\")))\n# periodically save workspace\nsave.image(file=file.path(outputDir,paste(\"activeImage\",analysisCode,\".RData\",sep=\"\")))\n\n# library(igraph)\n# # Visualize networks\n# net.triple <- dataset$ppi\n# net.triple <- melt(top.binary)\n# g <- graph.data.frame(net.triple[net.triple[,3]==1,], directed=F)\n# V(g)$color<-ifelse(V(g)$name%in%suspects, 'blue', 'red')\n# l <- layout.fruchterman.reingold(g,niter=3,area=vcount(g)^2.3,repulserad=vcount(g)^5.8)\n# plot(g,layout=l)\n# \n# g <- graph.data.frame(dataset$motif[dataset$motif$V1%in%c(suspects,'ELK1'),], directed=F,types=rep(0:1,590))\n# V(g)$color<-ifelse(V(g)$name%in%suspects, 'blue', 'red')\n# l <- layout.bipartite (g, types = NULL, hgap = 10, vgap = 1, maxiter = 100) \n# plot(g,layout=l)\n# \n# data <- dataset$motif[dataset$motif$V2%in%c(suspects,'ELK1','STAT3'),]\n# inc <- spread(data,V2,V3,fill=0)\n# rownames(inc) <- inc[,1]\n# inc<-inc[,-1]\n# g <- graph.incidence(top.binary)\n# E(g)$color<-ifelse(E(g)$grade==9, \"red\", \"grey\")\n# plot(g, layout=layout.bipartite,\n#      vertex.color=c(\"green\",\"cyan\")[V(g)$type+1])\n# \n# \n# # correlation matrix\n# genes <- unique(dataset$motif[,1])\n# heatmap.2(cor(t(dataset$exp[genes,])), dendrogram = \"both\", col=bluered, trace='none',cexCol=1.3,cexRow=1.3,margins=c(12,20))\n# \n# \n# \n# # Strangely behaving TFs (because no motif data exists for these TFs)\n# # Note 2/26/15  These should be filtered out of the analysis in this version of PandaR\n# suspects <- c('HIF1A',\n#               'HAND1',\n#               'ARID3A',\n#               'SOX5',\n#               'PRRX2',\n#               'NR1H2',\n#               'POU5F1',\n#               'VDR',\n#               'NFE2L1',\n#               'NKX3-1',\n#               'MAFG',\n#               'AHR',\n#               'SOX10',\n#               'DDIT3',\n#               'TAL1',\n#               'EWSR1',\n#               'NFIC',\n#               'TLX1',\n#               'ARNT'\n# )\n# \n# \n# #################################\n# ###  Genes approach\n# ##################################\n# \n# obs.s  <- apply(dataset$controlsNetwork-dataset$casesNetwork,2,function(x){x%*%x})\n# null.s <- lapply(null.networks, function(nullnet){\n#   apply(nullnet[[1]]-nullnet[[2]],2,function(x){x%*%x})\n# })\n",
    "created" : 1438141945123.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "738121020",
    "id" : "8943295D",
    "lastKnownWriteTime" : 1446560032,
    "path" : "~/gd/Harvard/Research/R_workspace/BERE_TM_fullpipeline.R",
    "project_path" : "BERE_TM_fullpipeline.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}