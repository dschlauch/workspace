{
    "contents" : "library(MASS)\nlibrary(ggplot2)\n\nchr <- 1\nnumRows <- 1000\n\n# args<-commandArgs(TRUE)\n# chr <- as.numeric(args[1])\n# numRows <- as.numeric(args[2])\n\nsample <- read.table(\"~/1000GP/data/1000GP_Phase3.sample\", sep=\" \", header=T)\nsampleIDs <- as.character(sample[,1])\npop <- as.character(sample[,2])\ngroup <- as.character(sample[,3])\nsex <- as.character(sample[,4])\n\n\n\ngetResultDF <- function(filename, phenotype, numRows, linesAtATime=1000, correctionVec=NULL, varFactor=T, sampleSubset=NULL){\n    \n    if(is.null(correctionVec)){\n        correction <- function(geno){\n            fitted <- mean(geno)\n            list(\"corrected\"=(geno-fitted),\"fitted\"=rep(fitted, length(geno)))\n        }\n    } else {\n        x <- cbind(1, correctionVec)\n        correctionHat  <- x %*% ginv(t(x)%*%x) %*% t(x)\n        correction <- function(geno){\n            fitted <- correctionHat %*% geno\n            # Dan's correction\n            fitted[fitted<.001]<-.001\n            fitted[fitted>.999]<-.999\n            list(\"corrected\"=(geno - fitted),\"fitted\"=fitted)\n        }\n    }\n    # Unless specified, use all the samples\n    if(is.null(sampleSubset)){\n        sampleSubset <- rep(T, numSamples)\n    } else {\n        numSamples = sum(sampleSubset)\n    }\n    phenotypeMatrix <- do.call(cbind, phenotype)\n    phenotypeMatrixCorrected <- correction(phenotypeMatrix)\n#     varY <- sqrt(phenotypeMatrixCorrected$fitted*(1-phenotypeMatrixCorrected$fitted))\n    con <- file(filename, \"rt\")\n    # fix this to stop at end of file\n\n    resultMatrix <- t(do.call(cbind, lapply(1:(numRows/linesAtATime), function(i){\n        genotypes <- apply(do.call(rbind, strsplit(readLines(con, linesAtATime),\" \")), 1,as.numeric)\n        alleles <- genotypes[c(T,F),] + genotypes[c(F,T),]\n        \n        # Subset of samples\n        alleles <- alleles[sampleSubset,]\n        numAlleles <- colSums(alleles)\n        # apply correction here\n        allelesCorrected <- correction(alleles)\n#         alleles <- allelesCorrected$corrected\n        phenotypeMatrix <- phenotypeMatrixCorrected$corrected\n        if(is.null(correctionVec)|!varFactor){\n            varianceFactor <- matrix(numSamples, nrow=ncol(phenotypeMatrix), ncol=ncol(alleles))\n        } else {\n            # New variance factor\n            xProb <- allelesCorrected$fitted/2\n            xVariances <- 2*xProb*(1-xProb) #variance of Binomial(2,xProb)\n            yVariances <- phenotypeMatrixCorrected$fitted*(1-phenotypeMatrixCorrected$fitted)\n            \n            zvar <- t(yVariances)%*%xVariances\n            numerator <- zvar\n            denominator <- colSums(yVariances)%*%t(colSums(xVariances))\n            varRsq <- numerator/denominator\n            varianceFactor <- 1/varRsq\n            \n        }\n        print(dim(varianceFactor))\n\n        r.values <- cor(phenotypeMatrix, allelesCorrected$corrected)\n        negLogPValue <- -log(1-pt(r.values*sqrt((varianceFactor-2)/(1-r.values^2)), varianceFactor))\n        rbind(numAlleles, negLogPValue, varianceFactor, alleles)\n        \n    })))\n    close(con)\n    \n    colnames(resultMatrix)[1] <- \"NumAlleles\"\n    resultMatrix <- data.frame(resultMatrix)\n    #Filter out 0,1 allele SNPs\n    filter <- resultMatrix[,1]>(numSamples*2/50) & (numSamples*2-resultMatrix[,1])>(numSamples*2/50)\n    resultMatrix <- resultMatrix[filter,]\n    \n    obsPValues <- rep(NA, nrow(resultMatrix))\n    rareIndices <- resultMatrix$NumAlleles>2 & resultMatrix$NumAlleles<=(numSamples*2*.04)\n    lowIndices <- resultMatrix$NumAlleles>(numSamples*2*.04) & resultMatrix$NumAlleles<=(numSamples*2*.1)\n    commonIndices <- resultMatrix$NumAlleles>(numSamples*2*.1)\n    resultMatrix <- resultMatrix[,-1]\n\n    # 1st half of matrix is test statistics\n    # 2nd half of matrix is effective samples\n    allAlleles <- resultMatrix[,-(1:600)]\n    resultMatrix <- resultMatrix[,1:600]\n    degFreedom <- resultMatrix[,((ncol(resultMatrix))/2+1):(ncol(resultMatrix))]\n    resultMatrix <- resultMatrix[1:(ncol(resultMatrix)/2)]\n\n    nIt <- ncol(resultMatrix)/3 # number of phenotype risks (uniform, gradual, sharp)\n    combinedResultList <- lapply(list(list(rm=resultMatrix[,1:nIt],df=degFreedom[,1:nIt]), \n                                      list(rm=resultMatrix[,(nIt+1):(2*nIt)],df=degFreedom[,(nIt+1):(2*nIt)]), \n                                      list(rm=resultMatrix[,(2*nIt+1):(3*nIt)],df=degFreedom[,(2*nIt+1):(3*nIt)])), \n                                 function(resultsList){\n        results <- resultsList$rm\n        df      <- resultsList$df\n        rareobsPValues <- apply(apply(results[rareIndices,], 2, sort, decreasing=TRUE),1,function(x){\n            median(x)\n#             -log(1-pchisq(mean(x), 1))\n#             mean(-log(2*pt(abs(x))))\n        })\n        lowobsPValues <- apply(apply(results[lowIndices,], 2, sort, decreasing=TRUE),1,function(x){\n#             -log(1-pchisq(mean(x), 1))\n            median(x)\n        })\n        commonobsPValues <- apply(apply(results[commonIndices,], 2, sort, decreasing=TRUE),1,function(x){\n#             -log(1-pchisq(mean(x), 1))\n            median(x)\n        })\n        \n        rareobsPValues <- data.frame(cbind(rareobsPValues, -log(1:length(rareobsPValues)/length(rareobsPValues))))\n        lowobsPValues <- data.frame(cbind(lowobsPValues, -log(1:length(lowobsPValues)/length(lowobsPValues))))\n        commonobsPValues <- data.frame(cbind(commonobsPValues, -log(1:length(commonobsPValues)/length(commonobsPValues))))\n        rareobsPValues <- cbind(rareobsPValues, \"rare\")\n        lowobsPValues <- cbind(lowobsPValues, \"low\")\n        commonobsPValues <- cbind(commonobsPValues, \"common\")\n        colnames(rareobsPValues) <- c(\"Observed\", \"Expected\", \"MAF\")\n        colnames(lowobsPValues) <- c(\"Observed\", \"Expected\", \"MAF\")\n        colnames(commonobsPValues) <- c(\"Observed\", \"Expected\", \"MAF\")\n        \n        do.call(rbind, list(rareobsPValues,lowobsPValues,commonobsPValues))\n    })\n    uniformResult <- cbind(combinedResultList[[1]], phenotype=\"Uniform\")\n    gradualResult <- cbind(combinedResultList[[2]], phenotype=\"Gradual\")\n    sharpResult <- cbind(combinedResultList[[3]], phenotype=\"Sharp\")\n    results <- do.call(rbind, list(uniformResult, gradualResult, sharpResult))\n    results\n}\n\n# Make non-genetic risk\nnumSamples <- length(sampleIDs)\nsuperPops <- levels(factor(group))\nsuperRisks <- runif(length(superPops),0,.5)\nnames(superRisks) <- superPops\n\npops <- levels(factor(pop))\npopRisks <- runif(length(pops),0,.2)\nnames(popRisks) <- pops\n\nsharpRisk <-as.numeric(pop%in%sample(pops,2))\n\ngradualRisk <- replicate(100, rbinom(numSamples, size=1, prob=(superRisks[group] + popRisks[pop])))\nsharpRisk   <- replicate(100, rbinom(numSamples, size=1, prob=as.numeric(pop%in%sample(pops,1))/5))\nrandomRisk  <- replicate(100, rbinom(numSamples, size=1, prob=.25))\n\nsuperpop.correction <- cbind(as.numeric(group%in%\"AFR\"),as.numeric(group%in%\"AMR\"),as.numeric(group%in%\"EAS\"),as.numeric(group%in%\"EUR\"))\nsubpop.correction <- sapply(pops, function(x){as.numeric(pop %in% x)})[,-1]\n## End of day on 7/8/15\n## TODO: implement correction for sharp phenotype (from jaccard or something)\njaccardMatrix <- read.csv('~/1000GP/output_0_20/combined_jaccard.csv', row.names=1)\ndiag(jaccardMatrix) <- 1 # This is to undo the 'set diagonal to zero' that was done for visualization in jaccard processing.\njaccard.correction <- eigen(jaccardMatrix)$vectors[,1:10]\n\n# Comparison to PCA\nvarcov.correction <- eigen(varcovMatrix)$vectors[,1:10]\n\n\nrunAndPlot <- function(chr=1, correctMethod=\"uncorrected\", ATT=\"ATT\", subpops=\"all\", numEigenVectors=2, numRows=5000){\n    print(correctMethod)\n    print(ATT)\n    print(subpops)\n    if(\"all\"%in%subpops){\n        sampleSubset <- rep(T,length(pop))\n        gradualRisk <- replicate(100, rbinom(numSamples, size=1, prob=(superRisks[group] + popRisks[pop])))\n        sharpRisk   <- replicate(100, rbinom(numSamples, size=1, prob=as.numeric(pop%in%sample(pops,1))/5))\n        randomRisk  <- replicate(100, rbinom(numSamples, size=1, prob=.25))\n    } else {\n        sampleSubset <- pop %in% subpops\n        gradualRisk <- replicate(100, rbinom(sum(sampleSubset), size=1, prob=(.2+as.numeric(pop%in%subpops[1])[sampleSubset]/10)))\n        sharpRisk   <- replicate(100, rbinom(sum(sampleSubset), size=1, prob=as.numeric(pop%in%subpops[1])[sampleSubset]/5))\n        randomRisk  <- replicate(100, rbinom(sum(sampleSubset), size=1, prob=.25))\n    }\n    if(ATT==\"ATT\"){\n        varFactor<-F\n    } else {\n        varFactor<-T\n    }\n    \n    \n    if(correctMethod==\"uncorrected\"){\n        correction<-NULL\n        varFactor <- F\n    } else if(correctMethod==\"jaccard\"){\n        correction <- eigen(jaccardMatrix[sampleSubset,sampleSubset])$vectors[,1:numEigenVectors,drop=F]\n    } else if(correctMethod==\"varcov\"){\n        correction <- eigen(varcovMatrix[sampleSubset,sampleSubset])$vectors[,1:numEigenVectors,drop=F]\n    } else if(correctMethod==\"superpop\"){\n        correction <- cbind(as.numeric(group%in%\"AFR\"),as.numeric(group%in%\"AMR\"),as.numeric(group%in%\"EAS\"),as.numeric(group%in%\"EUR\"))[sampleSubset,]\n    } else if(correctMethod==\"subpop\"){\n        correction <- sapply(pops, function(x){as.numeric(pop %in% x)})[sampleSubset,-1]\n    }\n    \n    #results  <- getResultDF(filename=paste('~/1000GP/data/1000GP_Phase3_chr', chr, '.hap.gz',sep=''), phenotype= list(randomRisk, gradualRisk, sharpRisk), numRows=numRows, linesAtATime=1000, correctionVec = correction, varFactor=varFactor, sampleSubset=sampleSubset)\n    # 10/5/15 replace individual chromosome with filtered file\n    results  <- getResultDF(filename=paste('~/1000GP/data/combinedFiltered100.gz',sep=''), phenotype= list(randomRisk, gradualRisk, sharpRisk), numRows=numRows, linesAtATime=1000, correctionVec = correction, varFactor=varFactor, sampleSubset=sampleSubset)\n    \n    png(paste(\"~/1000GP/plots/chr\", chr,\"_\",correctMethod,\"_\", ATT, \"_\",paste(subpops, collapse=\"\"),\".png\",sep=\"\"), width=1200)\n    print(ggplot(results, aes(Expected, Observed, color=MAF))+ geom_abline(intercept = 0) + ylim(0, 20) + ggtitle(paste(\"Nongenetic Phenotype Risk (\",correctMethod,\") - \",paste(subpops, collapse=\"-\"),sep=\"\")) + geom_point() + facet_wrap(~ phenotype))\n    write.csv(results, file=paste(\"~/1000GP/output_associations/\", chr,\"_\",correctMethod,\"_\", ATT, \"_\",paste(subpops, collapse=\"\"),\".csv\", sep=\"\"))\n    dev.off()\n    print(paste0(\"plot created: \",\"~/1000GP/plots/chr\", chr,\"_\",correctMethod,\"_\", ATT, \"_\",paste(subpops, collapse=\"\"),\".png\"))\n}\n",
    "created" : 1440693342491.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1796392253",
    "id" : "C8B89402",
    "lastKnownWriteTime" : 1445543643,
    "path" : "~/1000GP/associations-copy.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}