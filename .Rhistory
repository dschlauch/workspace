outputDir <- "~/gd/Harvard/Research/R_workspace/TM_manuscript/figures/"
analysisCode <- "ECLIPSE"
x <- transMatrices[[1]]
mdf <- melt(x)
mdf[,2] <- factor(mdf[,2],levels=sort(levels(mdf[,2]), decreasing=T))
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + scale_fill_gradient2(name = "Transition") +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.title=element_text(size=25),
legend.title=element_text(size=20), legend.text=element_text(size=20), legend.key.size=unit(.7,"in"),
axis.text.y = element_blank(), axis.text.x = element_blank(),
plot.title=element_text(family="Times", face="bold", size=40)) +
ggtitle(expression(atop("Transition Matrix", atop(italic("Smoker Controls to COPD Patients"), ""))))
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + scale_fill_gradient2(name = "Transition") +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.title=element_text(size=28),
legend.title=element_text(size=20), legend.text=element_text(size=20), legend.key.size=unit(.7,"in"),
axis.text.y = element_blank(), axis.text.x = element_blank(),
plot.title=element_text(family="Times", face="bold", size=40)) +
ggtitle(expression(atop("Transition Matrix", atop(italic("Smoker Controls to COPD Patients"), ""))))
print(p1)
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
paste0(outputDir, metric, '_comparison_diff_tissue.pdf')
getwd()
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dim(merged.data.frame)
merged.data.frame
?melt
head(melt(merged.data.frame,c(8,18,28,38)))
stackedDT <- rbind(resultTables)
dim(stackedDT)
length(resultTables)
resultTables[1]
dim(resultTables[1])
class(resultTables[1])
length(resultTables)
dim(resultTables[[1]])
dim(resultTables[[2]])
dim(resultTables[[3]])
dim(resultTables[[4]])
stackedDF <- do.call(rbind,resultTables)
head(resultTables[[1]])
resultTables <- lapply(filenames, read.csv)
stackedDF <- do.call(rbind,resultTables)
head(stackedDF)
tail(stackedDF)
strsplit(rownames(stackedDF),".")[1]
strsplit(rownames(stackedDF),".")[[1]]
strsplit(rownames(stackedDF),".")
?strsplit
rownames(stackedDF)
strsplit(rownames(stackedDF),".")
length(strsplit(rownames(stackedDF),"."))
length(strsplit(rownames(stackedDF),"[.]"))
strsplit(rownames(stackedDF),"[.]")
lapply(strsplit(rownames(stackedDF),"[.]"),"[[1")
lapply(strsplit(rownames(stackedDF),"[.]"),"[[", 1)
unlist(lapply(strsplit(rownames(stackedDF),"[.]"),"[[", 1))
resultTables <- lapply(filenames, read.csv)
names(resultTables) <- analysisNames
stackedDF <- do.call(rbind,resultTables)
head(stackedDF)
stackedDF$study <- unlist(lapply(strsplit(rownames(stackedDF),"[.]"),"[[", 1))
head(stackedDF)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/gd/Harvard/Research/R_workspace/generateAllManuscriptPlots.R')
source('~/gd/Harvard/Research/R_workspace/generateAllManuscriptPlots.R')
x
xx
xx<-123451
1.2425
xx<-1.52354252
exp(xx)
exp(xx)/(1-exp(xx))
exp(xx)/(1+exp(xx))
library(networkD3)
load("~/Dropbox/gtex_website/brain-0fdr0.1_edges_modularity.Rdata")
dim(condor.modularity[["edges"]])
head(condor.modularity[["edges"]])
simpleNetwork(condor.modularity[["edges"]][1:100,])
simpleNetwork(condor.modularity[["edges"]][1:100,])
simpleNetwork(condor.modularity[["edges"]][1:1000,])
length(unique(condor.modularity[["edges"]][,1]))
length(unique(condor.modularity[["edges"]][1:100,1]))
length(unique(condor.modularity[["edges"]][1:100,2]))
simpleNetwork(condor.modularity[["edges"]][1:100,])
simpleNetwork(condor.modularity[["edges"]][1:400,])
dim(condor.modularity[["edges"]])
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
library(ggrepel)
library(ggplot2)
library(gridExtra)
library(ggExtra)
library(gtable)
library(VennDiagram)
analysisNames <- c("ECLIPSE_combined_runs","COPDGene_combined_runs", "LGRC_combined_runs","LTCOPD_combined_runs")
displayNames <- c("ECLIPSE","COPDGene","LGRC","LTCOPD")
baseDir <- "~/gd/Harvard/Research/TM_outputs/JASPAR2014/BERE/"
# outputDir <- './'
setwd(baseDir)
baseDir
filenames <- sapply(analysisNames, function(aname){
dir(paste0(baseDir,aname), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
})
filenames
resultTables <- lapply(filenames, read.csv)
names(resultTables) <- analysisNames
resultTables <- lapply(resultTables, function(x){
x$rankSig <- rank(x$dTFI.normalized.scores)
x <- x[order(-x$Magnitude),]
x$rankMag <- 1:nrow(x)
x$limma <- exp(-(x$limma))
x$negLogPValues <- -log(x$dTFI.normalized.scores)
colnames(x) <- paste(analysisNames[parent.frame()$i], colnames(x), sep="_")
x
})
merged.data.frame = Reduce(function(...) merge(..., by=1,all=T), resultTables)
merged.data.frame <- merged.data.frame[order(merged.data.frame[,2]),]
makeComparisonPlot <- function(pair, plotTopNTFs=8, filterColIndices = c(8,18,28,38), metric="Magnitude", xlimits=c(0,.0325), ylimits=c(0,.0325)){
# Include labels for any TFs that are in the top 15 of any list
includedLabels <- apply(merged.data.frame[,filterColIndices[pair]],1,function(...) suppressWarnings(min(...,na.rm=T))) <= plotTopNTFs
merged.data.frame$labels <- as.character(merged.data.frame[,1])
merged.data.frame$labels[!includedLabels] <- ""
corValue <- cor(merged.data.frame[[paste(analysisNames[pair[1]], metric, sep="_")]], merged.data.frame[[paste(analysisNames[pair[2]], metric, sep="_")]], use="complete.obs", method="spearman")
p.value <- cor.test(merged.data.frame[[paste(analysisNames[pair[1]], metric, sep="_")]], merged.data.frame[[paste(analysisNames[pair[2]], metric, sep="_")]], use="complete.obs", method="spearman")$p.value
pValueText <- ifelse (p.value<1e-16,"p<1e-16",paste0("p=",as.character(p.value)))
corText <- paste0("bold(r[s]==",round(corValue,3),"~\n(",pValueText,"))")
plot1 <- ggplot(merged.data.frame, aes_string(paste(analysisNames[pair[1]], metric, sep="_"),paste(analysisNames[pair[2]], metric, sep="_"), label="labels"))
plot1 <- plot1 + geom_point(colour="blue",alpha=.5, size=4) +
xlab(displayNames[pair[1]]) + ylab(displayNames[pair[2]]) +
geom_text_repel(data=merged.data.frame[merged.data.frame$labels!="",], size = 8) +
annotate("text", x = Inf, y = -Inf, hjust=1, vjust=0, label = corText, parse = TRUE, size = 10, fontface="bold.italic")+
scale_x_continuous(limits=xlimits, expand = c(0, 0)) +
scale_y_continuous(limits=ylimits, expand = c(0, 0)) +
theme_classic() + theme(axis.title=element_text(size=28), axis.text=element_text(size=22))
plot1
#   ggMarginal(plot1)
}
filterColIndices = c(9,19,29,39)
metric="Magnitude"
topTFlist <- lapply(filterColIndices, function(i){
merged.data.frame[merged.data.frame[,i] %in% 1:20,1]
})
names(topTFlist) <- displayNames
names(topTFlist)
venn.diagram(x = topTFlist,
filename = "Venn.tiff",height = 2000, width = 3000,
col = "transparent", fill = c("green","yellow","darkorchid1","lightblue"),
alpha = 0.50, label.col = rep("white",15), cex = 1.5, fontfamily = "serif", fontface = "bold",
cat.col = rep("black",4), cat.cex = 1.5,
cat.pos = 0, cat.dist = 0.07, cat.fontfamily = "serif", rotation.degree = 0,
margin = 0.2, main="Top 20 differentially involved TFs in each COPD Study",main.pos= c(0.5, .9),main.cex = 1.4)
?venn.diagram
getwd()
venn.diagram(x = topTFlist,
filename = "Venn.tiff",height = 2000, width = 3000,
col = "transparent", fill = c("green","yellow","darkorchid1","lightblue"),
alpha = 0.50, label.col = rep("black",15), cex = 1.5, fontfamily = "serif", fontface = "bold",
cat.col = rep("black",4), cat.cex = 1.5,
cat.pos = 0, cat.dist = 0.07, cat.fontfamily = "serif", rotation.degree = 0,
margin = 0.2, main="Top 20 differentially involved TFs in each COPD Study",main.pos= c(0.5, .9),main.cex = 1.4)
topTFlist
venn.plot <- draw.quad.venn(
area1 = 84,
area2 = 54,
area3 = 126,
area4 = 114,
n12 = 10,
n13 = 34,
n14 = 39,
n23 = 32,
n24 = 39,
n34 = 84,
n123 = 0,
n124 = 3,
n134 = 28,
n234 = 28,
n1234 = 0,
category = c("FIRST", "SECOND", "THIRD", "FOURTH"),
fill = c("orange", "red", "green", "blue"),
lwd = rep(1, 4),
lty = "dashed",
cex = 1,
cat.cex = 1,
cat.col = c("orange", "red", "green", "blue")
);
venn.plot <- draw.quad.venn(
area1 = 84,
area2 = 54,
area3 = 126,
area4 = 114,
n12 = 10,
n13 = 34,
n14 = 39,
n23 = 32,
n24 = 39,
n34 = 84,
n123 = 0,
n124 = 3,
n134 = 28,
n234 = 28,
n1234 = "asdasd",
category = c("FIRST", "SECOND", "THIRD", "FOURTH"),
fill = c("orange", "red", "green", "blue"),
lwd = rep(1, 4),
lty = "dashed",
cex = 1,
cat.cex = 1,
cat.col = c("orange", "red", "green", "blue")
);
?draw.triple.venn
?draw.quadruple.venn
?draw.quad.venn
venn.plot <- draw.quad.venn(
area1 = 100,
area2 = 100,
area3 = 100,
area4 = 100,
n12 = 10,
n13 = 34,
n14 = 39,
n23 = 32,
n24 = 39,
n34 = 84,
n123 = 0,
n124 = 3,
n134 = 28,
n234 = 28,
n1234 = "asdasd",
category = c("FIRST", "SECOND", "THIRD", "FOURTH"),
fill = c("orange", "red", "green", "blue"),
lwd = rep(1, 4),
lty = "dashed",
cex = 1,
cat.cex = 1,
cat.col = c("orange", "red", "green", "blue")
);
venn.plot <- draw.quad.venn(
area1 = 100,
area2 = 100,
area3 = 100,
area4 = 100,
n12 = 10,
n13 = 34,
n14 = 39,
n23 = 32,
n24 = 39,
n34 = 84,
n123 = 0,
n124 = 3,
n134 = 28,
n234 = 28,
n1234 = 10,
category = c("FIRST", "SECOND", "THIRD", "FOURTH"),
fill = c("orange", "red", "green", "blue"),
lwd = rep(1, 4),
lty = "dashed",
cex = 1,
cat.cex = 1,
cat.col = c("orange", "red", "green", "blue")
);
venn.plot <- draw.quad.venn(
area1 = 100,
area2 = 100,
area3 = 100,
area4 = 100,
n12 = 10,
n13 = 34,
n14 = 39,
n23 = 32,
n24 = 39,
n34 = 84,
n123 = 0,
n124 = 3,
n134 = 28,
n234 = 28,
n1234 = 0,
category = c("FIRST", "SECOND", "THIRD", "FOURTH"),
fill = c("orange", "red", "green", "blue"),
lwd = rep(1, 4),
lty = "dashed",
cex = 1,
cat.cex = 1,
cat.col = c("orange", "red", "green", "blue")
);
venn.plot <- draw.quad.venn(
area1 = 84,
area2 = 54,
area3 = 126,
area4 = 114,
n12 = 10,
n13 = 34,
n14 = 39,
n23 = 32,
n24 = 39,
n34 = 84,
n123 = 0,
n124 = 3,
n134 = 28,
n234 = 28,
n1234 = 0,
category = c("FIRST", "SECOND", "THIRD", "FOURTH"),
fill = c("orange", "red", "green", "blue"),
lwd = rep(1, 4),
lty = "dashed",
cex = 1,
cat.cex = 1,
cat.col = c("orange", "red", "green", "blue")
);
venn.plot <- draw.quad.venn(
area1 = 84,
area2 = 54,
area3 = 126,
area4 = 154,
n12 = 10,
n13 = 34,
n14 = 39,
n23 = 32,
n24 = 39,
n34 = 84,
n123 = 0,
n124 = 3,
n134 = 28,
n234 = 28,
n1234 = 0,
category = c("FIRST", "SECOND", "THIRD", "FOURTH"),
fill = c("orange", "red", "green", "blue"),
lwd = rep(1, 4),
lty = "dashed",
cex = 1,
cat.cex = 1,
cat.col = c("orange", "red", "green", "blue")
);
venn.plot <- draw.quad.venn(
area1 = 84,
area2 = 54,
area3 = 126,
area4 = 254,
n12 = 10,
n13 = 34,
n14 = 39,
n23 = 32,
n24 = 39,
n34 = 84,
n123 = 0,
n124 = 3,
n134 = 28,
n234 = 28,
n1234 = 0,
category = c("FIRST", "SECOND", "THIRD", "FOURTH"),
fill = c("orange", "red", "green", "blue"),
lwd = rep(1, 4),
lty = "dashed",
cex = 1,
cat.cex = 1,
cat.col = c("orange", "red", "green", "blue")
);
install.packages("Vennerable", repos="http://R-Forge.R-project.org")
library(Vennerable)
vennD=Venn(SetNames = c("Samp1", "Samp2","Samp3"), Weight=c(`100`=x,`010`=x,`110`=x,`001`=x,`101`=x,`011`=x,`111`=x))
?Venn
Venn(n=3)
data(StemCell)
w <- Venn(Sets=StemCell[1:2])
Weights(w)
# nb order of intersection subsets not guaranteed
Weights(w) <- 1:4
Venn(SetNames=letters[1:5])
plot(Venn(SetNames=letters[1:5]))
?Venn
vennD=Venn(SetNames = c("Samp1", "Samp2","Samp3"))
plot(vennD, doWeights = FALSE, type = "circles")
?Venn
topTFlist
table(topTFlist)
topTFlist
lapply(topTFlist, as.character)
table(lapply(topTFlist, as.character))
topTFlist
table(lapply(topTFlist, sort(as.character()))
topTFlist
lapply(topTFlist, function(x){levels(topTFlist)%in%x})
lapply(topTFlist, function(x){levels(topTFlist)%in%as.character(x)})
topTFlist
lapply(topTFlist, function(x){as.character(x)})
levels(x)
lapply(topTFlist, function(x){levels(x)%in%as.character(x)})
cbind(lapply(topTFlist, function(x){levels(x)%in%as.character(x)})
)
do.call(cbind,lapply(topTFlist, function(x){levels(x)%in%as.character(x)}))
tfHistList <- do.call(cbind,lapply(topTFlist, function(x){levels(x)%in%as.character(x)}))
venn.diagram(x = topTFlist,
rownames(tfHistList) <- levels(topTFlist[[1]])
tfHistList <- do.call(cbind,lapply(topTFlist, function(x){levels(x)%in%as.character(x)}))
rownames(tfHistList) <- levels(topTFlist[[1]])
tfHistList
tfNames<-levels(topTFlist[[1]])
rownames(tfHistList) <- tfNames
tfNames[rowSums(tfHistList)==4]
tfNames[rowSums(tfHistList)==3]
tfNames[rowSums(tfHistList[,-1])==3]
tfNames[rowSums(tfHistList[,-2])==3]
topTFlist
tfNames[rowSums(tfHistList[,-2])==3]
tfNames[rowSums(tfHistList[,-3])==3]
tfNames[rowSums(tfHistList[,-4])==3]
tfNames[rowSums(tfHistList%*%c(T,T,T,T))==4]
tfNames[rowSums(tfHistList%*%c(T,T,T,F))==4]
tfHistList
tfNames[rowSums(tfHistList%*%matrix(c(T,T,T,F),ncol=1)==4]
tfNames[rowSums(tfHistList%*%matrix(c(T,T,T,F),ncol=1))==4]
apply(tfHistList,1,function(x){x*c(T,T,T,F)}
apply(tfHistList,1,function(x){x*c(T,T,T,F)})
tfNames[colSums(apply(tfHistList,1,function(x){x*c(T,T,T,F)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x*c(T,T,F,F)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x*c(T,T,F,T)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x*c(T,T,T,T)}))==4]
F*F
F+F
tfNames[colSums(apply(tfHistList,1,function(x){x==c(T,T,T,T)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(T,T,T,F)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(F,F,T,T)}))==4]
cbind(tfNames[colSums(apply(tfHistList,1,function(x){x==c(F,F,T,T)}))==4])
topTFlist
tfNames[colSums(apply(tfHistList,1,function(x){x==c(T,T,F,F)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(F,T,F,T)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(F,T,T,F)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(T,F,F,T)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(T,F,T,F)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(T,F,F,F)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(F,T,F,F)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(F,F,T,F)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(F,F,F,T)}))==4]
tfNames[colSums(apply(tfHistList,1,function(x){x==c(F,F,F,F)}))==4]
system('pdflatex figure3.tex')
system('pdflatex figure3.tex')
getwd()
outputDir <- "~/gd/Harvard/Research/R_workspace/TM_manuscript/figures/"
setwd(outputDir)
system('pdflatex figure3.tex')
system('pdfcrop figure3.pdf figure3.pdf')
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
library(ggrepel)
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
outputDir <- "~/gd/Harvard/Research/R_workspace/TM_manuscript/figures/"
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
outputDir <- "~/gd/Harvard/Research/R_workspace/TM_manuscript/figures/"
setwd(outputDir)
system('pdflatex figure3.tex')
system('pdfcrop figure3.pdf figure3.pdf')
system('convert -density 600 figure3.pdf -resize 50% figure3.png')
library(VennDiagram)
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
library(ggrepel)
outputDir <- "~/gd/Harvard/Research/R_workspace/TM_manuscript/figures/"
setwd(outputDir)
system('pdflatex figure2.tex')
system('pdflatex figure3.tex')
system('pdfcrop figure2.pdf figure2.pdf')
system('pdfcrop figure3.pdf figure3.pdf')
system('pdfcrop "dTFI\ vs\ LIMMA\ ECLIPSE.pdf" figure4.pdf')
system('convert -density 600 figure2.pdf figure2.png')
system('convert -density 600 figure3.pdf -resize 50% figure3.png')
system('convert -density 600 figure4.pdf -resize 50% figure4.png')
system('convert -density 1200 figure2.pdf figure2.png')
system('convert -density 1200 figure3.pdf -resize 50% figure3.png')
system('convert -density 1200 figure4.pdf -resize 50% figure4.png')
