jm <- as.matrix(jaccardMatrix)[subset,subset]
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
max(jm)
diag(jm)<-0
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
subset <- rep(T,2504)
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
which(jm>.1)
which(jm>.1,arr.ind=T))
which(jm>.1,arr.ind=T)
which(jm>.1,arr.ind=T)[,1]
subset <- -related
related <- which(jm>.1,arr.ind=T)[,1]
subset <- -related
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
legend()
heatmap.2(hc)
subset<-sample(2504,100)
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
heatmap.2(1-jm)
?heatmap.2
heatmap.2(1-jm, dendrogram=N)
heatmap.2(1-jm, dendrogram="none")
heatmap.2(1-jm, dendrogram="none", trace="none")
colnames(jm) <- pop[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
heatmap.2(1-jm, dendrogram="none", trace="none")
subset <- sample(2504,500)
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
colnames(jm) <- pop[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
heatmap.2(1-jm, dendrogram="none", trace="none")
heatmap.2(jm, dendrogram="none", trace="none")
heatmap.2(log(jm), dendrogram="none", trace="none")
heatmap.2(jm, dendrogram="none", trace="none")
heatmap.2(1-jm, dendrogram="none", trace="none")
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
jaccardMatrix1 <- jaccardMatrix[-related,-related]
jm <- as.matrix(jaccardMatrix1)[subset,subset]
heatmap.2(1-jm, dendrogram="none", trace="none",col=my_palette <- colorRampPalette(c("green", "black", "red"))(n = 1000))
heatmap.2(1-jm, dendrogram="none", trace="none",col=my_palette <- colorRampPalette(c("green", "black", "red"))(n = 2))
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
min(1-jm)
jm[jm<.985]<-.985
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
subset <- sample(2504,500)
subset <- -related
subset <- rep(T,2504)
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
colnames(jm) <- pop[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
jm[jm>.015]<-.015
jm[jm>.015]<-.015
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
jm[jm>.005]<-.005
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
jm[,1]
x <- rbinom(100,1,.5)
y <- rbinom(100,1,.5)
cor(x,y)
cor(c(x,rep(0,100)),c(y,,rep(0,100)))
cor(c(x,rep(0,100)),c(y,rep(0,100)))
sum(x*y)
sum((1-x)*(1-y))
sum(x*y)/(100-sum((1-x)*(1-y))
x <- rbinom(100,1,.5)
y <- rbinom(100,1,.5)
cor(x,y)
sum(x*y)/(100-sum((1-x)*(1-y)))
x <- rbinom(1000,1,.5)
y <- rbinom(1000,1,.5)
cor(x,y)
sum(x*y)/(100-sum((1-x)*(1-y)))
y
cor(x,y)
sum(x*y)/(100-sum((1-x)*(1-y)))
sum(x*y)/(1000-sum((1-x)*(1-y)))
x2 <- c(x,rep(0,1000))
y2 <- c(y,rep(0,1000))
cor(x2,y2)
sum(x2*y2)/(1000-sum((1-x2)*(1-y2)))
sum(x2*y2)/(2000-sum((1-x2)*(1-y2)))
y <- rbinom(1000,1,.5)
y <- rbinom(1000,1,c(0,1))
y
maf <- runif(10000)/2
maf
maf[1:5]
maf <- runif(10000)/2
mafDelta1 <- runif(10000)/100
mafDelta2 <- runif(10000)/100
p1 <- rbinom(10000,1,maf+mafDelta1)
p2 <- rbinom(10000,1,maf+mafDelta1)
p3 <- rbinom(10000,1,maf+mafDelta2)
p4 <- rbinom(10000,1,maf+mafDelta2)
data <- list()
data$p1 <- rbinom(10000,1,maf+mafDelta1)
data$p2 <- rbinom(10000,1,maf+mafDelta1)
data$p3 <- rbinom(10000,1,maf+mafDelta2)
data$p4 <- rbinom(10000,1,maf+mafDelta2)
cor(data)
cor(as.matrix(data))
head(data)
data <- data.frame()
data$p1 <- rbinom(10000,1,maf+mafDelta1)
data$p2 <- rbinom(10000,1,maf+mafDelta1)
data$p3 <- rbinom(10000,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
maf <- runif(10000)/2
mafDelta1 <- runif(10000)/10
mafDelta2 <- runif(10000)/10
p1 <- rbinom(10000,1,maf+mafDelta1)
p2 <- rbinom(10000,1,maf+mafDelta1)
p3 <- rbinom(10000,1,maf+mafDelta2)
p4 <- rbinom(10000,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
p1 <- rbinom(10000,1,maf+mafDelta1)
p2 <- rbinom(10000,1,maf+mafDelta1)
p3 <- rbinom(10000,1,maf+mafDelta2)
p4 <- rbinom(10000,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
p1
mafDelta1 <- runif(10000)/10
mafDelta2 <- runif(10000)/10
p1 <- rbinom(10000,1,maf+mafDelta1)
p2 <- rbinom(10000,1,maf+mafDelta1)
p3 <- rbinom(10000,1,maf+mafDelta2)
p4 <- rbinom(10000,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
mafDelta1
maf
p1 <- rbinom(10000,1,maf+mafDelta1)
p2 <- rbinom(10000,1,maf+mafDelta1)
p3 <- rbinom(10000,1,maf+mafDelta2)
p4 <- rbinom(10000,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
numVariants <- 100000
numVariants <- 100000
maf <- runif(numVariants)/2
mafDelta1 <- runif(numVariants)/10
mafDelta2 <- runif(numVariants)/10
p1 <- rbinom(numVariants,1,maf+mafDelta1)
p2 <- rbinom(numVariants,1,maf+mafDelta1)
p3 <- rbinom(numVariants,1,maf+mafDelta2)
p4 <- rbinom(numVariants,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
numVariants <- 1000000
maf <- runif(numVariants)/2
mafDelta1 <- runif(numVariants)/10
mafDelta2 <- runif(numVariants)/10
p1 <- rbinom(numVariants,1,maf+mafDelta1)
p2 <- rbinom(numVariants,1,maf+mafDelta1)
p3 <- rbinom(numVariants,1,maf+mafDelta2)
p4 <- rbinom(numVariants,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
sum(p1)
sum(p2)
sum(p2)/numVariants
maf <- runif(numVariants)/4
mafDelta1 <- runif(numVariants)/10
mafDelta2 <- runif(numVariants)/10
p1 <- rbinom(numVariants,1,maf+mafDelta1)
p2 <- rbinom(numVariants,1,maf+mafDelta1)
p3 <- rbinom(numVariants,1,maf+mafDelta2)
p4 <- rbinom(numVariants,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
p1 <- rbinom(numVariants,1,maf+mafDelta1)
p2 <- rbinom(numVariants,1,maf+mafDelta1)
p3 <- rbinom(numVariants,1,maf+mafDelta2)
p4 <- rbinom(numVariants,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
x <- rbinom(1000,1,.5)
y <- rbinom(1000,1,.5)
cor(x,y)
sum(x*y)/(1000-sum((1-x)*(1-y)))
x2 <- c(x,rep(0,1000))
y2 <- c(y,rep(0,1000))
cor(x2,y2)
sum(x2*y2)/(2000-sum((1-x2)*(1-y2)))
numVariants <- 1000000
maf <- runif(numVariants)/4
mafDelta1 <- runif(numVariants)/10
mafDelta2 <- runif(numVariants)/10
p1 <- rbinom(numVariants,1,maf+mafDelta1)
p2 <- rbinom(numVariants,1,maf+mafDelta1)
p3 <- rbinom(numVariants,1,maf+mafDelta2)
p4 <- rbinom(numVariants,1,maf+mafDelta2)
cor(cbind(p1,p2,p3,p4))
exprFile <- "./gd/Harvard/Research/data/GTEx/gtex_cell.rdata"
class(exprFile)
load(exprFile)
exprFile
getwd()
exprFile <- "~/gd/Harvard/Research/data/GTEx/gtex_cell.rdata"
load(exprFile)
exprFile1 <- "~/gd/Harvard/Research/data/GTEx/gtex_sub_noxymt_qsmooth_cell.rdata"
load(exprFile1)
load(exprFile1)
exprFile1 <- "~/gd/Harvard/Research/data/GTEx/gtex_sub_noxymt_qsmooth_cell.rdata"
load(exprFile1)
exprFile <- "~/gd/Harvard/Research/data/GTEx/gtex_cell.rdata"
load(exprFile)
dataset$exp      <- exprs(obj)
dataset <- list()
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
rownames(dataset$exp)
substring(rownames(dataset$exp),1,15)
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
dim(dataset$exp)
motifFile <- "./gd/Harvard/Research/data/GTEx/KG_cisbp_652.txt"
phenotypeName <- "our_subtypes"
casesString <- "cells_ebv-transformed_lymphocytes"
controlsString <- "skin"
filterType <- NA
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
motifFile <- "~/gd/Harvard/Research/data/GTEx/KG_cisbp_652.txt"
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dim(dataset$motif)
head(dataset$motif)
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
matches
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
subsetFilter
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
allFilter <- subsetFilter&phenoFilter
allFilter
dim(dataset$exp)
casesString
controlsString
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
analysisCode <- sample(100000,1)
exprFile <- "~/gd/Harvard/Research/data/GTEx/gtex_sub_noxymt_qsmooth_cell.rdata"
motifFile <- "~/gd/Harvard/Research/data/GTEx/KG_cisbp_652.txt"
phenotypeName <- "our_subtypes"
casesString <- "cells_ebv-transformed_lymphocytes"
controlsString <- "skin"
filterType <- NA
permuteGeneLabels <- F
filterType <- NA
getwd()
networkInferenceName
dataset <- list()
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
# colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
# rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
# covariateValues <- dataset$clinical[,covariate]
# table(dataset$clinical$pkyrs>40, casesFilter)
# mean(dataset$clinical$pkyrs[casesFilter])
# mean(dataset$clinical$pkyrs[!casesFilter])
# male <- dataset$clinical$GENDER=="1-Male"
# mean(dataset$clinical$pkyrs[male])
# mean(dataset$clinical$pkyrs[!male])
#
# table(controlsFilter,dataset$clinical[,"Gold.stage"])
######################################################
##  Running null networks with improved algorithm  ###
##                 2/25/15    START                ###
######################################################
# dataset$casesNetwork <- networkInferenceMethod(dataset$motif,dataset$exp[,casesFilter])
# dataset$controlsNetwork <- networkInferenceMethod(dataset$motif,dataset$exp[,controlsFilter])
#
# # periodically save workspace
# save.image(file=file.path(outputDir,paste("activeImage",analysisCode,".RData",sep="")))
dim(mappings)
head(mappings)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="REFSEQ", multiVals="first")
library(org.Hs.eg.db)
?mapIds
columns
?columns
columns(org.Hs.eg.db)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
length(symbols)
symbols[1:10]
unique(symbols)
length(unique(symbols))
dataset$exp      <- exprs(obj)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
length(unique(symbols))
sum(is.na(symbols))
sum(symbols)
sum(symbols=="asdasd")
symbols[1:10]
dim(dataset$exp)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
length(unique(symbols))
sum(is.na(unique(symbols)))
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
dim(dataset$exp)
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
library(org.Hs.eg.db)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
dim(dataset$exp)
dataset$exp[1:15,1:15]
library(limma)
design <- model.matrix(~factor(casesFilter))
diff.exp.res <- lmFit(dataset$exp, design)
design
dim(design)
dim(dataset$exp)
casesFilter
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
# colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
# rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
dim(dataset$exp)
library(limma)
design <- model.matrix(~factor(casesFilter))
diff.exp.res <- lmFit(dataset$exp, design)
diff.exp.res <- ebayes(diff.exp.res)
negLogPValues <- -log(dTFI_pVals)
dTFI_pVals <- dTFI_pVals[names(dTFI_pVals)%in%rownames(diff.exp.res$p.value)]
limma_pVals <- diff.exp.res$p.value[names(dTFI_pVals),2]
unique(dataset$motif[,1])
dTFI_pVals <- dTFI_pVals[names(dTFI_pVals)%in%rownames(diff.exp.res$p.value)]
dTFI_pVals <- dTFI_pVals[unique(dataset$motif[,1])%in%rownames(diff.exp.res$p.value)]
dim(diff.exp.res$p.value)
head(diff.exp.res$p.value)
diff.exp.res$p.value[unique(dataset$motif[,1]),]
diff.exp.res$p.value["HBB",]
diff.exp.res$p.value[factor("HBB"),]
unique(dataset$motif[,1])
dataset$motif[1:10,1]
dataset$motif[1:10,]
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
dim(dataset$motif)
head(dataset$motif)
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
head(dataset$motif)
diff.exp.res$p.value[unique(dataset$motif[,1]),]
diff.exp.res$p.value[unique(dataset$motif[,1]),2]
plot(dataset$exp['ABLIM1'])
plot(dataset$exp['ABLIM1',])
plot(dataset$exp['ABLIM1',],col=c("red","blue")[as.numeric(casesFilter)])
as.numeric(casesFilter)
dataset$exp['ABLIM1',]
dataset$exp['ABLIM1',casesFilter]
dataset$exp['ABLIM1',controlsFilter]
mean(dataset$exp['ABLIM1',controlsFilter])
mean(dataset$exp['ABLIM1',casesFilter])
sd(dataset$exp['ABLIM1',casesFilter])
sd(dataset$exp['ABLIM1',controlsFilter])
c("red","blue")[as.numeric(casesFilter)]
casesFilter
as.numeric(casesFilter)
c("red,"blue")[as.numeric(casesFilter)]
c("red","blue")[as.numeric(casesFilter)]
c("red,"blue")[as.numeric(casesFilter)+1]
c("red","blue")[as.numeric(casesFilter)+1]
plot(dataset$exp['ABLIM1',],col=c("red","blue")[as.numeric(casesFilter)+1])
diff.exp.res$p.value[unique(dataset$motif[,1]),2]
plot(dataset$exp['PI3',],col=c("red","blue")[as.numeric(casesFilter)+1])
plot(dataset$exp['GYG1',],col=c("red","blue")[as.numeric(casesFilter)+1])
