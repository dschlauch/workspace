".", x[2])
mov.fname = paste0(sub(paste0(fig.num, "$"), "", x[1]), ".",
format)
# order correctly
figs <- Sys.glob(fig.fname)
figs <- figs[order(as.numeric(stringr::str_match(figs, paste0("(\\d+)\\.", x[2]))[, 2]))]
animation::im.convert(figs, output = mov.fname)
sprintf("![%s](%s)", options$label, paste0(opts_knit$get("base.url"), mov.fname))
})
opts_chunk$set(cache = TRUE, message = FALSE, warning = FALSE, fig.show = "animate")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README/README-fig-",
cache.path = "README/README-cache-"
)
library(knitr)
# I want the README to have visible GIFs on GitHub, as
# GitHub cannot show .mp4s or other animation formats.
# I therefore hacked together a GIF animation hook for knitr.
library(animation)
ani.options(autobrowse = FALSE, interval = 1)
opts_knit$set(animation.fun = function(x, options, format = "gif") {
x = c(knitr:::sans_ext(x), knitr:::file_ext(x))
fig.num = options$fig.num
format = sub("^[.]", "", format)
fig.fname = paste0(sub(paste0(fig.num, "$"), "*", x[1]),
".", x[2])
mov.fname = paste0(sub(paste0(fig.num, "$"), "", x[1]), ".",
format)
# order correctly
figs <- Sys.glob(fig.fname)
figs <- figs[order(as.numeric(stringr::str_match(figs, paste0("(\\d+)\\.", x[2]))[, 2]))]
animation::im.convert(figs, output = mov.fname)
sprintf("![%s](%s)", options$label, paste0(opts_knit$get("base.url"), mov.fname))
})
opts_chunk$set(cache = TRUE, message = FALSE, warning = FALSE, fig.show = "animate")
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:99) {
if(tkn[i]=="Empty"){
tkn[i]<-"Correct Seat"
}else{
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}
stsInterval[,i] <- tkn
}
# Get last available seat
tkn[which(tkn=="Empty")]<-"You"
stsInterval[,100]<- tkn
# stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row") + theme_bw()
gga <- gg_animate(p, interval = .01)
gg_animate(gga, "./seating_ordered.gif")
stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") +
geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row") + theme_bw()+
scale_fill_brewer(palette="Set1")
gg_animate(p, "./seating_unordered.gif", interval = c(rep(.1,99),1)
)
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
library(ggrepel)
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
casesString <- "COPD"
controlsString <- "Smoker Control"
phenotypeName <- "Subject.type"
analysisName
analysisName <- "NI_only"
analysisCode <- "0001"
outputDir <- file.path("~",paste(analysisName, analysisCode ,sep="_"))
setwd(outputDir)
setwd('..')
getwd()
networkInferenceMethod <- bere
filterType <- NA
dataset <- list()
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
save.image(file=file.path(outputDir,paste("readyToGoECLIPSE",analysisCode,".RData",sep="")))
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
exprFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt"
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
clinicalFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt"
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
dataset <- list()
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
save.image(file=file.path(outputDir,paste("readyToGoCOPDGene",analysisCode,".RData",sep="")))
null.exp <- dataset$exp
#Parallel stuff
# Calculate the number of cores
num_cores <-4
# Initiate cluster
if(!is.na(num_cores)){
cl <- makeCluster(num_cores)
registerDoParallel(cl)
}
strt  <- Sys.time()
iters <- nullPerms+1 # Two networks for each partition, plus observed partition
#loop
print("Running null permutations in parallel")
print(paste0(num_cores," cores used"))
print(paste0(iters," network transitions to be estimated"))
print(Sys.time()-strt)
if(!is.na(num_cores)){
stopCluster(cl)
}
print(paste0("Running iteration ", i))
if(i==1){
# Observed partition : Don't reorder anything
null.exp <- dataset$exp
} else {
# Null partition, randomly reorder
## resample case-control
null.exp <- dataset$exp[,sample(1:ncol(dataset$exp))]
## This line scrambles the gene names (toggle this) 8/18/15
rownames(null.exp) <- rownames(null.exp)[sample(1:nrow(null.exp))]
}
#     null.exp <- null.exp + matrix(rnorm(length(null.exp))/10,nrow=nrow(null.exp),ncol=ncol(null.exp))
null.exp.cases <- null.exp[,casesFilter]
null.exp.controls <- null.exp[,controlsFilter]
# Some QC for sparse data
if (sum(rowSums(null.exp)==0)>0){
zeroGenes <- which(rowSums(null.exp)==0)
for(gene in zeroGenes){
null.exp[gene,] <- rnorm(ncol(null.exp))
}
}
null.exp <- dataset$exp
null.exp.cases <- null.exp[,casesFilter]
null.exp.controls <- null.exp[,controlsFilter]
if (sum(rowSums(null.exp)==0)>0){
zeroGenes <- which(rowSums(null.exp)==0)
for(gene in zeroGenes){
null.exp[gene,] <- rnorm(ncol(null.exp))
}
}
tmpNetCases <- networkInferenceMethod(dataset$motif, null.exp.cases)
tmpNetControls <- networkInferenceMethod(dataset$motif, null.exp.controls)
saveRDS(tmpNetCases,file.path(outputDir,'COPDGeneCases.rds'))
saveRDS(tmpNetControls,file.path(outputDir,'COPDGeneControls.rds'))
round(.124515125,4)
library(ggplot2)
library(gridExtra)
library(ggExtra)
library(gtable)
library(VennDiagram)
analysisNames <- c("ECLIPSE_combined_runs","COPDGene_combined_runs", "LGRC_combined_runs","LTCOPD_combined_runs")
displayNames <- c("ECLIPSE","COPDGene","LGRC","LTCOPD")
baseDir <- "~/gd/Harvard/Research/TM_outputs/JASPAR2014/BERE/"
outputDir <- './'
setwd(baseDir)
filenames <- sapply(analysisNames, function(aname){
dir(paste0(baseDir,aname), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
})
resultTables <- lapply(filenames, read.csv)
names(resultTables) <- analysisNames
resultTables <- lapply(resultTables, function(x){
x$rankSig <- rank(x$dTFI.normalized.scores)
x <- x[order(-x$Magnitude),]
x$rankMag <- 1:nrow(x)
x$limma <- exp(-(x$limma))
x$negLogPValues <- -log(x$dTFI.normalized.scores)
colnames(x) <- paste(analysisNames[parent.frame()$i], colnames(x), sep="_")
x
})
# Merge results into single data.frame
merged.data.frame = Reduce(function(...) merge(..., by=1,all=T), resultTables)
merged.data.frame <- merged.data.frame[order(merged.data.frame[,2]),]
metric <- "negLogPValues"
generatePlots("negLogPValues",filterColIndices = c(8,18,28,38))
generatePlots("Magnitude", filterColIndices = c(9,19,29,39))
keepColnames <- c(t(outer(analysisNames,c("Magnitude","rankMag","dTFI.FDR","limma"), paste, sep="_")))
displayColnames <- rep(c("dTFI","rank","FDR","LIMMA"), 3)
publicationTable <- cbind(merged.data.frame[,1], round(merged.data.frame[,keepColnames],4))
colnames(publicationTable) <- c('TF',displayColnames)
options(scipen=999)
publicationTable <- publicationTable[order(-publicationTable[,2]),]
publicationTable <- publicationTable[which(apply(publicationTable[,c(3,7,11)],1,min)<11),]
publicationTable[publicationTable==0] <- "<.0001"
publicationTable <- data.frame(gsub("0.", ".", as.matrix(publicationTable),fixed=T),check.names=FALSE)
dim(publicationTable)
getwd()
colnames(publicationTable)
keepColnames <- c(t(outer(analysisNames,c("Magnitude","rankMag","dTFI.FDR","limma"), paste, sep="_")))
displayColnames <- rep(c("dTFI","rank","FDR","LIMMA"), 3)
publicationTable <- cbind(merged.data.frame[,1], round(merged.data.frame[,keepColnames],4))
colnames(publicationTable) <- c('TF',displayColnames)
colnames(publicationTable)
keepColnames <- c(t(outer(analysisNames,c("Magnitude","rankMag","dTFI.FDR","limma"), paste, sep="_")))
displayColnames <- rep(c("dTFI","rank","FDR","LIMMA"), 4)
publicationTable <- cbind(merged.data.frame[,1], round(merged.data.frame[,keepColnames],4))
colnames(publicationTable) <- c('TF',displayColnames)
options(scipen=999)
publicationTable <- publicationTable[order(-publicationTable[,2]),]
publicationTable <- publicationTable[which(apply(publicationTable[,c(3,7,11)],1,min)<11),]
publicationTable[publicationTable==0] <- "<.0001"
# Table is now a character table (not numeric)
publicationTable <- data.frame(gsub("0.", ".", as.matrix(publicationTable),fixed=T),check.names=FALSE)
dim(publicationTable)
publicationTable
write.table(publicationTable, file="study_comparison_table.txt", row.names=F, sep="\t", quote=F)
libary(bptools)
library(bptools)
?hcl.heatmap.plot
hcl.heatmap.plot(transMatrices[[1]])
outputDir
getwd()
load("~/gd/Harvard/Research/TM_outputs/JASPAR2014/BERE/ECLIPSE_combined_runs/activeImage.RData")
outputDir <- "ECLIPSE_combined_runs"
pdf(file.path(outputDir,paste('TM_heatmap.pdf', sep="")), width=9, height=8)
hcl.heatmap.plot(transMatrices[[1]])
dev.off()
x <- scale(transMatrices[[1]])
mdf <- melt(x)
p1 <- ggplot(mdf, aes(x=variable, y=Var1)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_blank(axis.text.x = element_text(angle = 90, hjust = 1))
p1 <- ggplot(mdf, aes(x=variable, y=Var1)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw(axis.text.x = element_text(angle = 90, hjust = 1))
p1 <- ggplot(mdf, aes(x=variable, y=Var1)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw()#axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
head(mdf)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw()#axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
dim(transMatrices[[1]])
transMatrices[[1]][1:5,1:5]
x <- transMatrices[[1]]
mdf <- melt(x)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(p1)
TFs
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("Transcription Factors") +ylab("Transcription Factors")
print(p1)
pdf(file.path(outputDir,paste('TM_heatmap.pdf', sep="")), width=9, height=8)
print(p1)
dev.off()
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=.1,angle = 90, hjust = 1)) + xlab("Transcription Factors") +ylab("Transcription Factors")
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) + xlab("Transcription Factors") +ylab("Transcription Factors")
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")+
scale_fill_manual("dTFI")
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")+
scale_fill_continuous("dTFI")
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")+
scale_fill_gradient("dTFI")
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")+
guides(fill=guide_legend(title="dTFI")
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")+
guides(fill=guide_legend(title="dTFI"))
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")+
scale_fill_hue("dTFI")
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")+
scale_fill_hue(name="dTFI")
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")+
scale_fill_continuous(guide = guide_legend(title = "dTFI"))
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(guide = guide_legend(title = "dTFI")) + theme_bw() + theme(axis.text.x = element_text(size=1,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(guide = guide_legend(title = "dTFI")) + theme_bw() +
theme(axis.text.y = element_text(size=5), axis.text.x = element_text(size=5,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient(guide = guide_legend(title = "dTFI")) + theme_bw() +
theme(axis.text.y = element_text(size=5), axis.text.x = element_text(size=5,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2() + theme_bw() +
theme(axis.text.y = element_text(size=5), axis.text.x = element_text(size=5,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(title = "dTFI") + theme_bw() +
theme(axis.text.y = element_text(size=5), axis.text.x = element_text(size=5,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")
print(p1)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.text.y = element_text(size=5), axis.text.x = element_text(size=5,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors")
print(p1)
pdf(file.path(outputDir,paste('TM_heatmap.pdf', sep="")), width=9, height=8)
print(p1)
dev.off()
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.text.y = element_text(size=5), axis.text.x = element_text(size=5,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transtion Matrix")
pdf(file.path(outputDir,paste('TM_heatmap.pdf', sep="")), width=9, height=8)
print(p1)
dev.off()
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.text.y = element_text(size=4), axis.text.x = element_text(size=4,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transtion Matrix")
pdf(file.path(outputDir,paste('TM_heatmap.pdf', sep="")), width=9, height=8)
print(p1)
dev.off()
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.text.y = element_text(size=3), axis.text.x = element_text(size=3,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transtion Matrix")
pdf(file.path(outputDir,paste('TM_heatmap.pdf', sep="")), width=9, height=8)
print(p1)
dev.off()
library(ggplot2)
setwd('~')
outputDir <- "NI_only_0001"
generateNIDifferencePlot <- function(datasetA, datasetB, niMethod, imageType=png){
datasetACases <- readRDS(file.path(outputDir, paste0(datasetA, '_cases_', niMethod, '_network.rds')))
datasetAControls <- readRDS(file.path(outputDir, paste0(datasetA, '_controls_', niMethod, '_network.rds')))
datasetBCases <- readRDS(file.path(outputDir, paste0(datasetB, '_cases_', niMethod, '_network.rds')))
datasetBControls <- readRDS(file.path(outputDir, paste0(datasetB, '_controls_', niMethod, '_network.rds')))
matchedTFs <- intersect(rownames(datasetACases),rownames(datasetBCases))
matchedGenes <- intersect(colnames(datasetACases),colnames(datasetBCases))
datasetACases    <- datasetACases[matchedTFs,matchedGenes]
datasetAControls <- datasetAControls[matchedTFs,matchedGenes]
datasetBCases    <- datasetBCases[matchedTFs,matchedGenes]
datasetBControls <- datasetBControls[matchedTFs,matchedGenes]
df <- data.frame(dataA=c(datasetACases)-c(datasetAControls), dataB=c(datasetBCases)-c(datasetBControls))
spearCor <- cor(df[,1],df[,2],method="spearman")
print(spearCor)
imageType(file.path(outputDir,paste(datasetA, datasetB, niMethod, 'edgeweight_difference_comparison.png', sep="_")))
plot <- ggplot(df, aes(x=dataA, y=dataB)) +
geom_point(size=.1, alpha=.1) + xlab(datasetA) + ylab(datasetB) + ggtitle(paste0("Edgeweights in Controls (", datasetA, datasetB, ")")) + theme_classic()+
annotate("text", x = 0.0, y = -Inf, hjust=0, label = paste0("r=",round(spearCor,4)), parse = TRUE, size = 8)
print(plot)
dev.off()
}
datasetA<-"ECLIPSE"
datasetACases <- readRDS(file.path(outputDir, paste0(datasetA, '_cases_', niMethod, '_network.rds')))
niMethod <- "ARACNE"
datasetACases <- readRDS(file.path(outputDir, paste0(datasetA, '_cases_', niMethod, '_network.rds')))
getwd()
setwd('./remote_code')
setwd('./remote_code/')
file.path(outputDir, paste0(datasetA, '_cases_', niMethod, '_network.rds')
)
niMethod <- "bere"
datasetACases <- readRDS(file.path(outputDir, paste0(datasetA, '_cases_', niMethod, '_network.rds')))
datasetACases[1:5,1:5]
rownames(datasetACases)
