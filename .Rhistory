xlab("number of traffic groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 2) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars"), element_text(size=22)) +
xlab("number of traffic groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 2) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars"), size=22) +
xlab("number of traffic groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 2) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars")) +
theme(plot.title = element_text(lineheight=5, face="bold")) +
xlab("number of traffic groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 2) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars")) +
theme(plot.title = element_text(lineheight=50, face="bold")) +
xlab("number of traffic groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 2) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars")) +
theme(plot.title = element_text(size=50, face="bold")) +
xlab("number of traffic groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 2) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars")) +
theme(plot.title = element_text(size=10, face="bold")) +
xlab("number of traffic groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 2) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars")) +
theme(plot.title = element_text(size=20, face="bold")) +
xlab("number of traffic groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 2) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
numSimulations <- 100000
numSimulations <- 100000
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars (",numSimulations," simulations")) +
theme(plot.title = element_text(size=20, face="bold")) +
xlab("number of traffic groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 2) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
n
expectedVector <- c(1,rep(NA,n-1))
for(i in 2:n){
expectedVector[i] <- 1 + sum(expectedVector[1:(i-1)])/i
}
expectedVector[n]
sapply(2:n,function(i){
expectedVector[i] <- 1 + sum(expectedVector[1:(i-1)])/i
})[n]
expectedVector
sapply(2:n,function(i){
expectedVector[i] <- 1 + sum(expectedVector[1:(i-1)])/i
})
expectedVector[n]
sapply(2:n,function(i){
expectedVector[i] <- 1 + sum(expectedVector[1:(i-1)])/i
})
expectedVector <- c(1,rep(NA,n-1))
sapply(2:n,function(i){
expectedVector[i] <- 1 + sum(expectedVector[1:(i-1)])/i
})
expectedVector
sapply(2:n,function(i){
expectedVector[i] <- 1 + sum(expectedVector[1:(i-1)])/i
})
expectedVector
expectedVector <- c(1,rep(NA,n-1))
sapply(2:n,function(i){
expectedVector[i] <- 1 + sum(expectedVector[1:(i-1)])/i
})
expectedVector[n]
sapply(2:n,function(i){
expectedVector[i] <<- 1 + sum(expectedVector[1:(i-1)])/i
})
expectedGroups <- function(n){
expectedVector <- c(1,rep(NA,n-1))
sapply(2:n,function(i){
expectedVector[i] <<- 1 + sum(expectedVector[1:(i-1)])/i
})[n]
}
numExpectedGroups <- expectedGroups(numVehicles)
numExpectedGroups
numVehicles
n<-numVehicles
expectedVector <- c(1,rep(NA,n-1))
sapply(2:n,function(i){
expectedVector[i] <<- 1 + sum(expectedVector[1:(i-1)])/i
})[n]
expectedVector
expectedGroups <- function(n){
expectedVector <- c(1,rep(NA,n-1))
sapply(2:n,function(i){
expectedVector[i] <<- 1 + sum(expectedVector[1:(i-1)])/i
})
expectedVector[n]
}
expectedGroups(numVehicles)
expectedVector <- c(1,rep(NA,n-1))
sapply(2:n,function(i){
expectedVector[i] <<- 1 + sum(expectedVector[1:(i-1)])/i
})
expectedVector[n]
n<-10
expectedVector <- c(1,rep(NA,n-1))
sapply(2:n,function(i){
expectedVector[i] <<- 1 + sum(expectedVector[1:(i-1)])/i
})
expectedVector[n]
1+1/2
(1+1/2)/3
(1+1.5)/3 + (2/3)*1.5
1.5 + 1/3
1.5 + 1/3+1/4
sum(1/(1:n))
n
expectedGroups(n)
expectedGroups(10000)
sum(1/(1:10000))
expectedGroups <- function() sum(1/(1:n))
expectedGroups(2)
expectedGroups <- function(n) sum(1/(1:n))
expectedGroups(2)
expectedGroups(1000)
expectedGroups(10000)
orderVehicles <- sample(numVehicles)
orderVehicles
orderVehicles <- list(sample(numVehicles))
length(orderVehicles)
orderVehicles <- as.list(sample(numVehicles))
length(orderVehicles)
which.min(orderVehicles)
orderVehicles[-which.min(orderVehicles)]
orderVehicles <- c(orderVehicles[which.min(orderVehicles)],orderVehicles[-which.min(orderVehicles)])
length(orderVehicles)
orderVehicles[1:5]
orderVehicles <- as.list(sample(numVehicles))
orderVehicles <- as.list(sample(numVehicles))
orderVehicles[1:5]
orderVehicles <- c(orderVehicles[which.min(orderVehicles)],orderVehicles[-which.min(orderVehicles)])
orderVehicles[1:5]
length(orderVehicles)
orderVehiclesRear <- c(orderVehicles[which.min(orderVehicles)],head(orderVehicles, which.min(orderVehicles)-1))
length(orderVehicles)
which.min(orderVehicles)
length(head(orderVehicles, which.min(orderVehicles)-1))
head(orderVehicles, which.min(orderVehicles)-1)
orderVehiclesRear <- c(orderVehicles[which.min(orderVehicles)],head(orderVehicles, which.min(orderVehicles)-1))
length(orderVehiclesRear)
orderVehiclesRear
orderVehicles <- as.list(sample(numVehicles))
orderVehiclesRear <- c(orderVehicles[which.min(orderVehicles)],head(orderVehicles, which.min(orderVehicles)-1))
length(orderVehiclesRear)
which.min(orderVehicles)
tail(orderVehicles,5)
tail(orderVehicles,0)
orderVehicles <- as.list(sample(numVehicles))
minIndex <- which.min(orderVehicles)
minIndex
orderVehiclesRear <- c(orderVehicles[minIndex],head(orderVehicles, minIndex-1))
length(orderVehiclesRear)
orderVehiclesRear[1:3]
length(tail(orderVehicles,length(orderVehicles)-minIndex)))
length(tail(orderVehicles,length(orderVehicles)-minIndex))
length(moveSlowest(tail(orderVehicles,length(orderVehicles)-minIndex))))
length(moveSlowest(tail(orderVehicles,length(orderVehicles)-minIndex)))
moveSlowest <-  function(orderVehicles){
if(length(orderVehicles)==0){
return(orderVehicles)
}
minIndex <- which.min(orderVehicles)
orderVehiclesRear <- c(orderVehicles[minIndex],head(orderVehicles, minIndex-1))
c(orderVehiclesRear, moveSlowest(tail(orderVehicles,length(orderVehicles)-minIndex)))
}
orderVehicles <- as.list(sample(numVehicles))
moveSlowest(orderVehicles)
moveSlowest(orderVehicles)[1:10]
hoursPassed <- 0
while(is.unsorted(orderVehicles)){
moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
is.unsorted(orderVehicles)
?is.unsorted
c(1,2,3,4)==c(1,2,3,4)
all(c(1,2,3,4)==c(1,2,3,4))
all(c(1,2,3,4)==c(1,2,3,5))
numVehicles
orderVehicles <- as.list(sample(numVehicles))
moveSlowest <-  function(orderVehicles){
if(length(orderVehicles)==0){
return(orderVehicles)
}
minIndex <- which.min(orderVehicles)
orderVehiclesRear <- c(orderVehicles[minIndex],head(orderVehicles, minIndex-1))
c(orderVehiclesRear, moveSlowest(tail(orderVehicles,length(orderVehicles)-minIndex)))
}
hoursPassed <- 0
while(all(orderVehicles==1:numVehicles)){
moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
all(orderVehicles==1:numVehicles)
while(!all(orderVehicles==1:numVehicles)){
moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
numVehicles <-10
orderVehicles <- as.list(sample(numVehicles))
orderVehicles <- as.list(sample(numVehicles))
orderVehicles
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
orderVehicles
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
orderVehicles
orderVehicles <- as.list(sample(numVehicles))
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
replicate(1000,{
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
})
replicate(1000,{
orderVehicles <- as.list(sample(numVehicles))
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
})
numVehicles <-100
replicate(1000,{
orderVehicles <- as.list(sample(numVehicles))
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
})
mean(.Last.value)
orderVehicles <- as.list(sample(numVehicles))
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
orderVehicles <- as.list(sample(numVehicles))
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
origOrder <- as.list(sample(numVehicles))
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
max(origOrder-(1:numVehicles))
(1:numVehicles)
origOrder-(1:numVehicles)
origOrder
max(c(origOrder)-(1:numVehicles))
c(origOrder)
max(unlist(origOrder)-(1:numVehicles))
origOrder <- as.list(sample(numVehicles))
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
max(unlist(origOrder)-(1:numVehicles))
origOrder <- as.list(sample(numVehicles))
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
max(unlist(origOrder)-(1:numVehicles))
origOrder <- as.list(sample(numVehicles))
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
max(unlist(origOrder)-(1:numVehicles))
origOrder <- as.list(sample(numVehicles))
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
max(unlist(origOrder)-(1:numVehicles))
origOrder <- as.list(sample(numVehicles))
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
max(unlist(origOrder)-(1:numVehicles))
origOrder <- 1:100
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
origOrder <- 100:1
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
origOrder <- c(100:91,1:99)
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
origOrder <- c(100:91,1:89)
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
c(100:91,1:89)
c(1:89)
orderVehicles <- origOrder
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
orderVehicles <- as.list(origOrder)
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
orderVehicles
c(100:91,1:90)
origOrder <- c(100:91,1:90)
orderVehicles <- as.list(origOrder)
hoursPassed <- 0
while(!all(orderVehicles==1:numVehicles)){
orderVehicles <- moveSlowest(orderVehicles)
hoursPassed <- hoursPassed+1
}
hoursPassed
max(unlist(origOrder)-(1:numVehicles))
Of these, (1) is intuitive, but (2) requires a little reasoning.  Consider a car which is forced to pull over.  That means that each of the cars in their traffic group are faster than it
unlist(origOrder)
numVehicles
(1/numVehicles)*(numVehicles-1)
replicate(1000,{
origOrder <- as.list(sample(numVehicles))
#   orderVehicles <- as.list(origOrder)
#   hoursPassed <- 0
#   while(!all(orderVehicles==1:numVehicles)){
#     orderVehicles <- moveSlowest(orderVehicles)
#     hoursPassed <- hoursPassed+1
#   }
#   hoursPassed
max(unlist(origOrder)-(1:numVehicles))
})
numVehicles<-10000
replicate(1000,{
origOrder <- as.list(sample(numVehicles))
#   orderVehicles <- as.list(origOrder)
#   hoursPassed <- 0
#   while(!all(orderVehicles==1:numVehicles)){
#     orderVehicles <- moveSlowest(orderVehicles)
#     hoursPassed <- hoursPassed+1
#   }
#   hoursPassed
max(unlist(origOrder)-(1:numVehicles))
})
replicate(1000,  max(sample(numVehicles)-(1:numVehicles)))
ggplot(data.frame(hours=replicate(10000,  max(sample(numVehicles)-(1:numVehicles)))), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("asd")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5) +
expand_limits(y = c(0, 15000))
ggplot(data.frame(hours=replicate(10000,  max(sample(numVehicles)-(1:numVehicles)))), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("asd")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5) +
expand_limits(y = c(0, 15000))
ggplot(data.frame(hours=replicate(10000,  max(sample(numVehicles)-(1:numVehicles)))), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("asd")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5)
ggplot(data.frame(hours=replicate(10000,  max(sample(numVehicles)-(1:numVehicles)))), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=4,fill=I("blue")) +
ggtitle(paste0("asd")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5)
ggplot(data.frame(hours=replicate(10000,  max(sample(numVehicles)-(1:numVehicles)))), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=4,fill=I("blue")) +
ggtitle(paste0("Number of hours until traffic clears for ", numVehicles, "cars")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5)
numVehicles <- 100
ggplot(data.frame(hours=replicate(100000,  max(sample(numVehicles)-(1:numVehicles)))), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=4,fill=I("blue")) +
ggtitle(paste0("Number of hours until traffic clears for ", numVehicles, " cars")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5)
ggplot(data.frame(hours=replicate(100000,  max(sample(numVehicles)-(1:numVehicles)))), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Number of hours until traffic clears for ", numVehicles, " cars")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5)
For 100 cars, the average number of hours until traffic clears is `{r} 1+1` hours
numVehicles <- 50
hours <- replicate(100000,  max(sample(numVehicles)-(1:numVehicles)))
ggplot(data.frame(hours=hours), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Number of hours until traffic clears for ", numVehicles, " cars")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5)
mean(hours)
```{r}
numVehicles <- 50
hours <- replicate(100000,  max(sample(numVehicles)-(1:numVehicles)))
ggplot(data.frame(hours=hours), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Number of hours until traffic clears for ", numVehicles, " cars")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Hours in traffic") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5)
mean(hours)
numVehicles <- 50
hours <- replicate(100000,  max(sample(numVehicles)-(1:numVehicles)))
ggplot(data.frame(hours=hours), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Number of Hours Until Traffic Clears for ", numVehicles, " Cars")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Hours") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5)
mean(hours)
ggplot(data.frame(hours=hours), aes(hours, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Number of Hours Until Traffic Clears for ", numVehicles, " Cars")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Hours")
mean(hours)
For `{r} numVehicles` cars, the average number of hours until traffic clears is `{r} mean(hours)` hours
my_grob = grobTree(textGrob("Expected # of groups", x=0.15,  y=.95, hjust=0, gp=gpar(col="red", fontsize=15, fontface="bold")))
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars (",numSimulations," simulations)")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
numVehicles <- 10000
numSimulations <- 100000
groupSizes <- replicate(numSimulations,numberOfGroupedVehicles(sample(numVehicles), 0))
meanGroups <- mean(groupSizes)
meanGroups
numExpectedGroups <- expectedGroups(numVehicles)
numExpectedGroups
my_grob = grobTree(textGrob("Expected # of groups", x=0.15,  y=.95, hjust=0, gp=gpar(col="red", fontsize=15, fontface="bold")))
ggplot(data.frame(groupSizes=groupSizes), aes(groupSizes, col="blue")) + geom_histogram(color="black",binwidth=1,fill=I("blue")) +
ggtitle(paste0("Distribution of group sizes for ",numVehicles, " cars (",numSimulations," simulations)")) +
theme(plot.title = element_text(size=15, face="bold")) +
xlab("Number of Traffic Groups") + geom_vline(xintercept = numExpectedGroups, color="red",size = 1.5) +
annotation_custom(my_grob) +
expand_limits(y = c(0, 15000))
