load("~/gd/Harvard/Research/TM_outputs/ECLIPSE_bere_bare_55557/activeImage55557.RData")
names(dTFI_pVals)
cpgs_for_TFs <- diffCpGMethPValues[,probes %in% names(dTFI_pVals)]
class(probes)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(dTFI_pVals)]
dim(cpgs_for_TFs)
library(ggplot2)
cpgs_for_TFs[,1:1-]
cpgs_for_TFs[,1:10]
tfs <- getNearestGene(colnames(cpgs_for_TFs))$nearestGeneSymbol
tfs <- genes[genes %in% names(dTFI_pVals)]
tfs
qplot(cpgs_for_TFs[,3],tfs)
length(cpgs_for_TFs[,3])
qplot(cpgs_for_TFs[,,],tfs)
qplot(cpgs_for_TFs[3,],tfs)
qplot(tfs,cpgs_for_TFs[3,])
order(dTFI_pVals)
qplot(tfs[order(dTFI_pVals)], cpgs_for_TFs[3,order(dTFI_pVals)])
tfs[order(dTFI_pVals)]
cpgs_for_TFs[3,order(dTFI_pVals)]
qplot(tfs,cpgs_for_TFs[3,])
dTFI_pVals <- sort(dTFI_pVals)
dTFI_pVals
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(dTFI_pVals)]
tfs <- genes[genes %in% names(dTFI_pVals)]
library(ggplot2)
qplot(tfs,cpgs_for_TFs[3,])
TFValues <- sort(ssodm)
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- genes[genes %in% names(TFValues)]
library(ggplot2)
qplot(tfs,cpgs_for_TFs[3,])
TFValues
TFValues <- as.factor(sort(dTFI_pVals))
TFValues
tfs
tfs <- as.factor(genes[genes %in% names(TFValues)])
tfs
levels(tfs)
levels(tfs) <- names(sort(TFValues))
levels(tfs)
tfs
qplot(tfs,cpgs_for_TFs[3,])
levels(tfs) <- names(sort(-TFValues))
names(sort(-TFValues))
TFValues
TFValues <- sort(dTFI_pVals)
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- as.factor(genes[genes %in% names(TFValues)])
levels(tfs) <- names(sort(-TFValues))
library(ggplot2)
qplot(tfs,cpgs_for_TFs[3,])
levels(tfs) <- names(sort(TFValues))
library(ggplot2)
qplot(tfs,cpgs_for_TFs[3,])
levels(tfs)
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval)
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
tfs
levels(tfs)
TFValues <- sort(dTFI_pVals)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- as.factor(genes[genes %in% names(TFValues)])
levels(tfs) <- names(sort(TFValues))
library(ggplot2)
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
qplot(tfs, negLogPval, col="blue") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
qplot(tfs, negLogPval, col="red") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
qplot(tfs, negLogPval, col=1) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
qplot(tfs, negLogPval, col=3) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
qplot(tfs, negLogPval, col="") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval))
obsSsodm
sort(obsSsodm)
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- as.factor(genes[genes %in% names(TFValues)])
levels(tfs) <- names(sort(TFValues))
library(ggplot2)
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval))
TFValues
TFValues <- sort(obsSsodm)
TFValues
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs
levels(tfs) <- names(sort(TFValues))
tfs
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval))
levels(tfs)
levels(tfs) <- names(sort(-TFValues))
levels(tfs)
tfs
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- as.factor(genes[genes %in% names(TFValues)])
levels(tfs) <- names(sort(-TFValues))
tfs
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- as.factor(genes[genes %in% names(TFValues)])
levels(tfs) <- names(sort(TFValues))
tfs
tfs
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- as.factor(genes[genes %in% names(TFValues)])
levels(tfs) <- levels(tfs)[order(TFValues)]
levels(tfs)
order(TFValues)
TFValues
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- as.factor(genes[genes %in% names(TFValues)])
levels(tfs)
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- as.factor(genes[genes %in% names(TFValues)])
tfs
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- as.factor(genes[genes %in% names(TFValues)])
tfs
levels(tfs) <- levels(tfs)[sample(1:153)]
tfs
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
tfs
tfs[1:5]
genes <- getNearestGene(probes)$nearestGeneSymbol
genes[1:5]
genes %in% names(TFValues)[1:10]
(genes %in% names(TFValues))[1:10]
(genes %in% names(TFValues))[1:20]
genes[1:5]
genes[1:10]
tfs[1:5]
negLogPval <- -log(cpgs_for_TFs[3,])
TFValues <- sort(dTFI_pVals)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval))
tfs
levels(tfs)
TFValues <- sort(dTFI_pVals)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
library(ggplot2)
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval))
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
library(ggplot2)
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval))
?sort
TFValues <- sort(dTFI_pVals, decreasing=T)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
library(ggplot2)
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval))
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("asd")
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs")
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by significance)")
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by significance)")
TFValues <- sort(dTFI_pVals, decreasing=T)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
library(ggplot2)
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by significance)")
TFValues
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
library(ggplot2)
negLogPval <- -log(cpgs_for_TFs[3,])
qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by effect size)")
library(gridExtra)
library(ggExtra)
grid.arrange(plot1, plot2, nrow=2, top="differentially methylated CpG sites near TFs"))
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
negLogPval <- -log(cpgs_for_TFs[3,])
plot1 <- qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by effect size)")
TFValues <- sort(dTFI_pVals, decreasing=T)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
negLogPval <- -log(cpgs_for_TFs[3,])
plot2 <- qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by significance)")
grid.arrange(plot1, plot2, nrow=2, top="differentially methylated CpG sites near TFs")
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
negLogPval <- -log(cpgs_for_TFs[3,])
plot1 <- qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by effect size)")
plot1
plot1 <- qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by effect size)")
TFValues <- sort(dTFI_pVals, decreasing=T)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
negLogPval <- -log(cpgs_for_TFs[3,])
plot2 <- qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by significance)")
grid.arrange(plot1, plot2, nrow=2, top="differentially methylated CpG sites near TFs")
plot2
plot1
TFValues <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
negLogPval <- -log(cpgs_for_TFs[3,])
plot1 <- qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by effect size)")
plot1
TFValues <- sort(dTFI_pVals, decreasing=T)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
negLogPval <- -log(cpgs_for_TFs[3,])
plot2 <- qplot(tfs, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by significance)")
plot1
tfs
TFValues1 <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues)]
tfs1 <- factor(genes[genes %in% names(TFValues)], levels=names(TFValues))
negLogPval <- -log(cpgs_for_TFs[3,])
plot1 <- qplot(tfs1, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by effect size)")
plot1
TFValues1 <- sort(obsSsodm)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues1)]
tfs1 <- factor(genes[genes %in% names(TFValues1)], levels=names(TFValues1))
negLogPval <- -log(cpgs_for_TFs[3,])
plot1 <- qplot(tfs1, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by effect size)")
TFValues2 <- sort(dTFI_pVals, decreasing=T)
cpgs_for_TFs <- diffCpGMethPValues[,genes %in% names(TFValues2)]
tfs2 <- factor(genes[genes %in% names(TFValues2)], levels=names(TFValues2))
negLogPval <- -log(cpgs_for_TFs[3,])
plot2 <- qplot(tfs2, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("differentially methylated CpG sites near TFs (ordered by significance)")
grid.arrange(plot1, plot2, nrow=2, top="differentially methylated CpG sites near TFs")
negLogPval[1:10]
png('diffMethylCpG', width=1800)
grid.arrange(plot1, plot2, nrow=2, top="differentially methylated CpG sites near TFs")
dev.off()
plot1 <- qplot(tfs1, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("ordered by effect size")
plot2 <- qplot(tfs2, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("ordered by significance")
grid.arrange(plot1, plot2, nrow=2, top="differentially methylated CpG sites near TFs")
plot2 <- qplot(tfs2, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("ordered by significance")+
geom_smooth(method='lm',formula=negLogPval~tfs2)
plot2
plot2 <- qplot(tfs2, negLogPval) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_point(aes(colour = negLogPval)) + ggtitle("ordered by significance")+
geom_smooth(method='lm',formula=negLogPval~as.numeric(tfs2))
plot2
filenames <- dir(paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
analysisNames <- c("ECLIPSE_bere_bare_55557","LGRC_bere_38678","COPDGene_bere_70856")
filenames <- dir(paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
filenames
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames)
filenames <- dir(paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
filenames
publicationTable
publicationTable[publicationTable[,1]=='RFX1',]
publicationTable[publicationTable[,1]=='RFX2',]
paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames)
filenames
?dir
library(ggplot2)
library(gridExtra)
library(ggExtra)
analysisNames <- c("ECLIPSE_bere_bare_55557","LGRC_bere_38678","COPDGene_bere_70856")
displayNames <- c("COPDGene","ECLIPSE","LGRC")
filenames <- dir(paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
filenames
dir(paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames), full.names = T, recursive = TRUE, all.files = TRUE)
dir(paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames), full.names = T, all.files = TRUE)
paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames)
dir(paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames), full.names = F, all.files = TRUE)
filenames <- sapply(analysisNames, function(aname){
dir(paste0("~/gd/Harvard/Research/TM_outputs/",aname), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
}
filenames <- sapply(analysisNames, function(aname){
dir(paste0("~/gd/Harvard/Research/TM_outputs/",aname), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
})
filenames
filenames <- dir(paste0("~/gd/Harvard/Research/TM_outputs/",analysisNames), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
filenames
resultTables <- lapply(filenames, read.csv)
displayNames <- c("ECLIPSE","LGRC","COPDGene")
# Find the files for comparison
# Read them in.
analysisNames <- c("ECLIPSE_bere_bare_55557","LGRC_bere_38678","COPDGene_bere_70856")
displayNames <- c("ECLIPSE","LGRC","COPDGene")
# Find the files for comparison
# Read them in.
# Add within-study rank order for magnitude and significance
filenames <- sapply(analysisNames, function(aname){
dir(paste0("~/gd/Harvard/Research/TM_outputs/",aname), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
})
resultTables <- lapply(filenames, read.csv)
names(resultTables) <- analysisNames
resultTables <- lapply(resultTables, function(x){
x$rankSig <- 1:nrow(x)
x <- x[order(-x$Magnitude),]
x$rankMag <- 1:nrow(x)
x$limma <- exp(-(x$limma))
colnames(x) <- paste(analysisNames[parent.frame()$i], colnames(x), sep="_")
x
})
merged.data.frame = Reduce(function(...) merge(..., by=1,all=T), resultTables)
merged.data.frame <- merged.data.frame[order(merged.data.frame[,2]),]
# Function for generation of a plot based on an index pair
makeComparisonPlot <- function(pair, plotTopNTFs=15, filterColIndices = c(8,16,24)){
# Include labels for any TFs that are in the top 15 of any list
includedLabels <- apply(merged.data.frame[,filterColIndices[pair]],1,function(...) suppressWarnings(min(...,na.rm=T))) < plotTopNTFs
merged.data.frame$labels <- as.character(merged.data.frame[,1])
merged.data.frame$labels[!includedLabels] <- ""
corText <- paste0("R^{2}==",round(cor(merged.data.frame[[paste(analysisNames[pair[1]], "Magnitude", sep="_")]], merged.data.frame[[paste(analysisNames[pair[2]], "Magnitude", sep="_")]], use="complete.obs"),4))
plot1 <- ggplot(merged.data.frame, aes_string(paste(analysisNames[pair[1]], "Magnitude", sep="_"),paste(analysisNames[pair[2]], "Magnitude", sep="_"), label="labels"))
plot1 <- plot1 + geom_point(colour="blue",alpha=.5, size=4) + xlab(displayNames[pair[1]]) + ylab(displayNames[pair[2]]) + geom_text(vjust=0)  + expand_limits(x=c(0,.025)) + annotate("text", x = .02, y = 0, label = corText, parse = TRUE)
ggMarginal(plot1)
}
# Create the 3 comparison plots for ECLIPSE, LGRC, COPDGene and combine them
plot1 <- suppressWarnings(makeComparisonPlot(c(1,2)))
plot2 <- suppressWarnings(makeComparisonPlot(c(2,3)))
plot3 <- suppressWarnings(makeComparisonPlot(c(3,1)))
suppressWarnings(grid.arrange(plot1, plot2, plot3, ncol=3, top="Comparison of Differential TF Involvement Across Studies"))
# Generate the png for the above plots
png('eclipse_copdgene_lgrc_comparison.png', width=1800)
suppressWarnings(grid.arrange(plot1, plot2, plot3, ncol=3, top="Comparison of Differential TF Involvement Across Studies"))
dev.off()
# Create table
keepColnames <- c(t(outer(analysisNames,c("Magnitude","rankMag","dTFI.FDR","limma..logp"), paste, sep="_")))
displayColnames <- rep(c("Magnitude","rank","FDR","LIMMA"), 3)
publicationTable <- cbind(merged.data.frame[,1], round(merged.data.frame[,keepColnames],4))
colnames(publicationTable) <- c('TF',displayColnames)
publicationTable <- publicationTable[order(-publicationTable[,2]),]
publicationTable[publicationTable==0] <- "<.0001"
head(publicationTable)
source('~/.active-rstudio-document')
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
publicationTable
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
load("~/gd/Harvard/Research/data/expSet.clean_V14_1435701821.RData")
load("~/gd/Harvard/Research/data/expSet.clean_V14_1435701821.RData")
View(exp.clean)
write.table(exp.clean, file="LTCOPD_exp.txt", sep="\t")
getwd()
write.table(pDat.clean, file="LTCOPD_clinical.txt", sep="\t")
write.table(pDat.clean, file="~/gd/Harvard/Research/data/LTCOPD/LTCOPD_clinical.txt", sep="\t",quote=F)
write.table(exp.clean, file="~/gd/Harvard/Research/data/LTCOPD/LTCOPD_exp.txt", sep="\t",quote=F)
exp.clean[1:5,1:5]
View(exp.clean)
length("ST-01016289")
library(org.Hs.eg.db)
?mapIds
columns
columns(org.Hs.eg.db)
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("beadarrayExampleData", "illuminaHumanv3.db"))
source("http://www.bioconductor.org/biocLite.R")
biocLite( "illuminaHumanv3.db")
symbols <- mget(rownames(exp.clean), illuminaHumanv3SYMBOL, ifnotfound = NA)
illuminaHumanv3SYMBOL
library("illuminaHumanv3.db")
symbols <- mget(rownames(exp.clean), illuminaHumanv3SYMBOL, ifnotfound = NA)
length(symbols)
symbols[1:5]
sum(is.na(symbols))
symbols <- mget(rownames(exp.clean), illuminaHumanv3SYMBOL, ifnotfound = NA)
exp.clean.symbols <- exp.clean[!is.na(symbols) & !duplicated(symbols),]
rownames(exp.clean.symbols) <- symbols[!is.na(symbols) & !duplicated(symbols)]
dim(exp.clean.symbols)
exp.clean.symbols[1:5,1:5]
write.table(exp.clean.symbols, file="~/gd/Harvard/Research/data/LTCOPD/LTCOPD_exp.txt", sep="\t",quote=F)
colnames(pDat.clean)
head(pDat.clean)
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
analysisCode <- sample(100000,1)
exprFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_clinical.txt"
phenotypeName<-'diagnosis'
casesString <- 'COPD'
controlsString <- "skin"
controlsString <- "control"
filterType <- NA
networkInferenceName <- "bere"
networkInferenceMethod <- bere
dataset <- list()
grepl(".txt", exprFile)
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
dataset$motif    <- read.table(motifFile,header=F)
colnames(dataset$exp)
exp.clean.symbols[1:5,1:5]
colnames(exp.clean.symbols) <- gsub("-",""colnames(exp.clean.symbols))
colnames(exp.clean.symbols) <- gsub("-","",colnames(exp.clean.symbols))
exp.clean.symbols[1:5,1:5]
pDat.clean
rownames(pDat.clean) <- gsub("-","",rownames(pDat.clean))
pDat.clean
write.table(pDat.clean, file="~/gd/Harvard/Research/data/LTCOPD/LTCOPD_clinical.txt", sep="\t",quote=F)
write.table(exp.clean.symbols, file="~/gd/Harvard/Research/data/LTCOPD/LTCOPD_exp.txt", sep="\t",quote=F)
dataset <- list()
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
colnames(dataset$exp)
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
dim(dataset$exp)
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
matches
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter
allFilter <- subsetFilter&phenoFilter
subsetFilter <- rep(T,nrow(dataset$clinical))
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
allFilter <- subsetFilter&phenoFilter
allFilter
dataset$exp <- dataset$exp[,allFilter]
dim(dataset$exp)
length(allFilter)
dataset$exp <- dataset$exp[,allFilter]
dataset$exp <- dataset$exp[,subsetFilter]
phenoFilter
dataset$clinical[,phenotypeName]
phenoFilter <- phenoFilter & !is.na(phenoFilter)
phenoFilter
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
controlsFilter
casesFilter
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter
dataset$clinical[,phenotypeName]
dataset <- list()
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
matches
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
subsetFilter <- rep(T,nrow(dataset$clinical))
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter
phenoFilter <- phenoFilter & !is.na(phenoFilter)
phenoFilter
allFilter <- subsetFilter&phenoFilter
allFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
casesFilter
controlsString
dataset$clinical[,phenotypeName]
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
dataset$clinical[,phenotypeName]
controlsString
controlsString <- "Control"
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
controlsFilter
casesFilter
sum(controlsFilter)
null.exp <- dataset$exp
dataset <- list()
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$exp      <- read.table(clinicalFile,row.names=1,header=T)
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
