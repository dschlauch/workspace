dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
dim(dataset$motif)
dataset <- list()
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
library(org.Hs.eg.db)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
# covariateValues <- dataset$clinical[,covariate]
# table(dataset$clinical$pkyrs>40, casesFilter)
# mean(dataset$clinical$pkyrs[casesFilter])
# mean(dataset$clinical$pkyrs[!casesFilter])
# male <- dataset$clinical$GENDER=="1-Male"
# mean(dataset$clinical$pkyrs[male])
# mean(dataset$clinical$pkyrs[!male])
#
# table(controlsFilter,dataset$clinical[,"Gold.stage"])
######################################################
##  Running null networks with improved algorithm  ###
##                 2/25/15    START                ###
######################################################
# dataset$casesNetwork <- networkInferenceMethod(dataset$motif,dataset$exp[,casesFilter])
# dataset$controlsNetwork <- networkInferenceMethod(dataset$motif,dataset$exp[,controlsFilter])
#
# # periodically save workspace
# save.image(file=file.path(outputDir,paste("activeImage",analysisCode,".RData",sep="")))
# Copy expression data for null network generation
null.exp <- dataset$exp
#Parallel stuff
library(foreach)
library(doParallel)
# Calculate the number of cores
num_cores <- detectCores() - 4
num_cores <- min(num_cores, numMaxCores)
# Initiate cluster
if(!is.na(num_cores)){
cl <- makeCluster(num_cores)
registerDoParallel(cl)
}
#start time
strt  <- Sys.time()
iters <- nullPerms*2+2 # Two networks for each partition, plus observed partition
#loop
print("Running null permutations in parallel")
print(paste0(num_cores," cores used"))
print(paste0(iters," networks to be estimated"))
dir.create(file.path(outputDir,"nullNets"))
i
print(paste0("Running iteration ", i))
if(i%%2==0){
selectedSamples <- casesFilter
} else {
selectedSamples <- controlsFilter
}
selectedSamples
if(i<=2){
# Observed partition : Don't reorder anything
null.exp <- dataset$exp
} else {
# Null partition, randomly reorder
## resample case-control
null.exp <- dataset$exp[,sample(1:ncol(dataset$exp))]
## This line scrambles the gene names (toggle this) 8/18/15
rownames(null.exp) <- rownames(null.exp)[sample(1:nrow(null.exp))]
}
dim(null.exp)
null.exp <- null.exp[,selectedSamples]
if (sum(rowSums(null.exp)==0)>0){
zeroGenes <- which(rowSums(null.exp)==0)
for(gene in zeroGenes){
null.exp[gene,] <- rnorm(ncol(null.exp))
}
}
dim(null.exp)
tmpNet <- networkInferenceMethod(dataset$motif, null.exp)
getwd()
list <- list.files('../data/nullNets/nullNets')
list
nullNets <- lapply(list, readRDS)
list <- list.files('../data/nullNets/nullNets', full.names=T)
list
nullNets <- lapply(list, readRDS)
length(nullNets)
list <- list.files('../data/nullNets/nullNets', full.names=T)
list
names(nullNets)
list <- sort(list.files('../data/nullNets/nullNets', full.names=T))
list
list <- sort(list.files('../data/nullNets/nullNets', full.names=T))
list
list <- sort(list.files('../data/nullNets/nullNets', full.names=T))
list
list <- sort(list.files('../data/nullNets/nullNets', full.names=T))
list
list <- list.files('../data/nullNets/nullNets', full.names=T)
list
nullNets <- lapply(list[1:30], readRDS)
if(!is.na(num_cores)){
cl <- makeCluster(4)
registerDoParallel(cl)
}
strt  <- Sys.time()
num_cores<-4
if(!is.na(num_cores)){
cl <- makeCluster(4)
registerDoParallel(cl)
}
library(foreach)
library(doParallel)
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
if(!is.na(num_cores)){
cl <- makeCluster(4)
registerDoParallel(cl)
}
strt  <- Sys.time()
#loop
print("Running transition calculations in parallel")
print(paste0(num_cores," cores used"))
print(paste0(length(null.networks)/2," transitions to be estimated"))
null.networks <- nullNets
print(paste0(length(null.networks)/2," transitions to be estimated"))
transMatrices <- foreach(i=1:(length(null.networks)/2),.packages=c("bptools","reshape2","penalized")) %dopar% {
transformation.matrix(null.networks[[2*i]], null.networks[[2*i-1]],remove.diagonal=T,method="ols")
}
print(Sys.time()-strt)
if(!is.na(num_cores)){
stopCluster(cl)
}
outputDir <- '.'
analysisCode<-'0000'
casesString <- 'COPD'
controlsString <- 'Controls'
networkInferenceName <- 'BERE'
analysisName <- 'ECLIPSE'
ssodm.plot(transMatrices[[1]], transMatrices[-1],plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
transMatrices <- foreach(i=1:(length(null.networks)/2),.packages=c("bptools","reshape2","penalized")) %dopar% {
transformation.matrix(null.networks[[2*i]], null.networks[[2*i-1]],remove.diagonal=T,method="ols")
}
if(!is.na(num_cores)){
cl <- makeCluster(4)
registerDoParallel(cl)
}
strt  <- Sys.time()
#loop
print("Running transition calculations in parallel")
print(paste0(num_cores," cores used"))
print(paste0(length(null.networks)/2," transitions to be estimated"))
transMatrices <- foreach(i=1:(length(null.networks)/2),.packages=c("bptools","reshape2","penalized")) %dopar% {
transformation.matrix(null.networks[[2*i]], null.networks[[2*i-1]],remove.diagonal=T,method="ols")
}
print(Sys.time()-strt)
if(!is.na(num_cores)){
stopCluster(cl)
}
class(null.networks)
readRDS('../data/nullNets/nullNets/nullNet_105.rds')
data <- readRDS('../data/nullNets/nullNets/nullNet_105.rds')
class(data)
dim(data)
78*2
*100
78*2*100
78*2*100/1000
mat <- matrix(rnorm(100000),nrow=10000)
dim(mat)
mat <- matrix(rnorm(1000000),nrow=10000)
mat <- matrix(rnorm(2000000),nrow=20000)
dim(mat)
mat <- matrix(rnorm(12000000),nrow=20000)
cmat <- cor(mat)
dim(cmat)
cmat <- cor(t(mat))
View(cmat)
dim(cmat)
bere
library(bereR)
bere
source("https://bioconductor.org/biocLite.R")
biocLite("JASPAR2014")
source("https://bioconductor.org/biocLite.R")
biocLite("JASPAR2016")
load("~/gd/Harvard/Research/TM_outputs/LTCOPD_bere_bare_30008/activeImage30008.RData")
ssodm.plot(transMatrices[[1]], transMatrices[-1],plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
ssodm.plot(transMatrices[[1]], transMatrices[-1],plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
class(transMatrices)
length(transMatrices)
length(transMatrices[[1]])
class(transMatrices[[1]])
dim(transMatrices[[1]])
class(transMatrices[-1])
class(transMatrices[[1]])
casesString
controlsString
networkInferenceName
analysisName
class(transMatrices)
class(transMatrices[[1]])
transMatrices[[1]][1:10,1:10]
ssodm.plot
tm.obs <-transMatrices[[1]]
tm.null <-transMatrices[-1]
sort.by.sig=F
rescale=F
plot.title=NA
highlight.tfs=NA
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
num.iterations
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
ssodm
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
ggplot(null.SSODM.melt, aes(x=TF, y=value))+
geom_point(aes(size=1,color=factor(Var2),alpha = .5*as.numeric(factor(Var2)))) +
scale_color_manual(values = c("blue", "red")) +
scale_x_discrete(limits = x.axis.order ) +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
head(null.SSODM.melt)
outputDir
tiff(file.path(outputDir,paste('SSODMplot_unscaled',analysisCode,'.tiff', sep="")), width=4800)
ssodm.plot(transMatrices[[1]], transMatrices[-1],plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
dev.off()
tiff(file.path(outputDir,paste('SSODMplot_scaled',analysisCode,'.tiff', sep="")), width=4800)
ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
dev.off()
library(limma)
design <- model.matrix(~factor(casesFilter))
diff.exp.res <- lmFit(dataset$exp, design)
diff.exp.res <- ebayes(diff.exp.res)
logfoldchange <- log(rowMeans(dataset$exp[,casesFilter])/rowMeans(dataset$exp[,controlsFilter]))
obsSsodm <- apply(transMatrices[[1]],1,function(x){t(x)%*%x})
includedTFs <- intersect(names(obsSsodm),rownames(diff.exp.res$p.value))
obsSsodm <- obsSsodm[includedTFs]
dTFI_pVals_All <- 1-2*abs(.5-calculate.tm.p.values(transMatrices[[1]], transMatrices[-1],method="non-parametric"))
names(dTFI_pVals_All) <- colnames(transMatrices[[1]])
dTFI_pVals <- dTFI_pVals_All[includedTFs]
negLogPValues <- -log(dTFI_pVals)
# replace Inf values with max values
negLogPValues[negLogPValues==Inf] <- 35
labels <- names(obsSsodm)
labels[rank(-negLogPValues)>20 & rank(-obsSsodm)>20]<-""
dTFI_fdr   <- p.adjust(dTFI_pVals, method = 'fdr')
logfoldchangeTF <- logfoldchange[names(dTFI_pVals)]
limma_pVals <- diff.exp.res$p.value[names(dTFI_pVals),2]
limma_fdr <- p.adjust(limma_pVals, method = 'fdr')
limmanegLogPValues <- -log(limma_pVals)
limmanegLogPValues[limmanegLogPValues>10]<-10 # for visual purposes
resultTable <- cbind(obsSsodm,dTFI_pVals,dTFI_fdr,logfoldchangeTF,limmanegLogPValues)
resultTable <- resultTable[order(dTFI_pVals),]
plotDF <- data.frame(obsSsodm, negLogPValues, limmanegLogPValues, logfoldchangeTF, "labels"=labels)
colnames(resultTable) <- c("Magnitude","dTFI uncorrected p-value","dTFI FDR", "log FC", "limma -logp")
write.csv(resultTable,file=file.path(outputDir,paste("resultTable",analysisCode,".csv", sep="")))
tiff(file.path(outputDir,paste('Volcano plot',analysisCode,'.tiff', sep="")), width=1800)
ggplot(data=plotDF,aes(x=obsSsodm, y=negLogPValues, label=labels, size=100)) + geom_point(aes(col=limmanegLogPValues), alpha=.5) + geom_text(vjust=0) +
ylab("-log(dTFI p-value)") + xlab("SSODM") + ggtitle("Signal vs significance") + scale_size_continuous(range = c(0, 12),guide=FALSE) +
scale_colour_gradientn("LIMMA sig",colours=c("blue","white","red"))
dev.off()
tiff(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.tiff', sep="")), width=1800)
ggplot(data=plotDF,aes(x=logfoldchangeTF, y=negLogPValues, label=labels, size=100)) + geom_point(aes(col=limmanegLogPValues), alpha=.75) + geom_text(vjust=0) +
ylab("significance of dTFI") + xlab("-log(FC)") + ggtitle("Transition vs Fold Change") +
scale_size_continuous(range = c(0, 12),guide=FALSE) +
scale_colour_gradientn("LIMMA sig",colours=c("blue","white","red"))
dev.off()
save.image(file=file.path(outputDir,paste("activeImage",analysisCode,".RData",sep="")))
transitionSigmas <- function(tm.observed, tm.null){
tm.null.mean <- apply(simplify2array(tm.null), 1:2, mean)
tm.null.sd <- apply(simplify2array(tm.null), 1:2, sd)
sigmas <- (tm.observed - tm.null.mean)/tm.null.sd
}
tm.sigmas <- transitionSigmas(transMatrices[[1]], transMatrices[-1])
diag(tm.sigmas) <- 0
tm.sigmas.melt <- melt(tm.sigmas)
adjMat <- transMatrices[[1]]
diag(adjMat) <- 0
adjMat.melt <- melt(adjMat)
adj.combined <- merge(tm.sigmas.melt,adjMat.melt, by=c("Var1","Var2"))
# adj.combined[,1] <- mappings[match(adj.combined[,1], mappings[,1]),2]
# adj.combined[,2] <- mappings[match(adj.combined[,2], mappings[,1]),2]
numEdges  <- 40
numTopTFs <- 10
topTFsIncluded <- names(sort(dTFI_pVals_All)[1:numTopTFs])
topTFIndices <- 2>(is.na(match(adj.combined[,1],topTFsIncluded))+is.na(match(adj.combined[,2],topTFsIncluded)))
adj.combined <- adj.combined[topTFIndices,]
adj.combined <- adj.combined[abs(adj.combined[,4])>=sort(abs(adj.combined[,4]),decreasing=T)[numEdges],]
tfNet <- graph.data.frame(adj.combined, directed=T)
vSize <- -log(dTFI_pVals_All)
vSize[vSize<0] <- 0
vSize[vSize>3] <- 3
V(tfNet)$size <- vSize[V(tfNet)$name]*5
E(tfNet)$width <- (abs(E(tfNet)$value.x))*20/max(abs(E(tfNet)$value.x))
E(tfNet)$color<-ifelse(E(tfNet)$value.x>0, "blue", "red")
tiff(file.path(outputDir,paste('Transition plot',analysisCode,'.tiff', sep="")), width=1500, height=1500)
plot.igraph(tfNet, edge.arrow.size=2, vertex.label.cex= 1.5, vertex.label.color= "black",main=paste0("Transition: ",controlsString," to ",casesString))
legend("bottomleft", c("Gained features","Lost features"), lty=c(1,1),lwd=c(2.5,2.5),col=c("blue","red"))
dev.off()
saveRDS(list(obsSsodm,dTFI_pVals_All),'dTFI.rdata')
rank(obsSsodm)[c("GABPA","ELK1","ELK4")]
rank(obsSsodm)[c("GABPA","ELK1","ELK4","SP1")]
dim(resultTable)
resultTable[1:10.]
resultTable[1:10,]
resultTable[,2]
resultTable[c("GABPA"),2]
resultTable[c("GABPA","ELK1"),2]
resultTable[c("GABPA","ELK1","ELK4"),2]
resultTable[c("GABPA","ELK1","ELK4","SP1"),2]
load("~/gd/Harvard/Research/TM_outputs/ECLIPSE_bere_bare_84433/activeImage84433.RData")
load("~/gd/Harvard/Research/TM_outputs/ECLIPSE_bere_bare_84433/activeImage84433.RData")
ssodm.plot(transMatrices[[1]], transMatrices[-1],plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
outputDir
tiff(file.path(outputDir,paste('SSODMplot_unscaled',analysisCode,'.tiff', sep="")), width=4800)
ssodm.plot(transMatrices[[1]], transMatrices[-1],plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
dev.off()
tiff(file.path(outputDir,paste('SSODMplot_scaled',analysisCode,'.tiff', sep="")), width=4800)
ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
dev.off()
list <- list.files('../data/TM_outputs/ECLIPSE_bere_combined_runs/tms/', full.names=T)
list
getwd()
list <- list.files('../TM_outputs/ECLIPSE_bere_combined_runs/tms/', full.names=T)
list
nullNets <- lapply(list[1:30], readRDS)
nullNets <- lapply(list, readRDS)
length(nullNets)
all_tms <- lapply(list, readRDS)
grep("_1.rds",list)
list <- sort(list.files('../TM_outputs/ECLIPSE_bere_combined_runs/tms/', full.names=T))
grep("_1.rds",list)
observedIndex <- grep("_1.rds",list)[1]
observedIndex
grep("_1.rds",list)
grep("!_1.rds",list)
grepl("_1.rds",list)
nullIndices <- !grepl("_1.rds",list)[1]
which(nullIndices)
nullIndices
nullIndices <- !grepl("_1.rds",list)
nullIndices
all_tms <- lapply(list[c(observedIndex,nullIndices)], readRDS)
length(all_tms)
c(observedIndex,nullIndices)
nullIndices
observedIndex
nullIndices <- which(!grepl("_1.rds",list))
nullIndices
all_tms <- lapply(list[c(observedIndex,nullIndices)], readRDS)
fileList <- sort(list.files('../TM_outputs/ECLIPSE_bere_combined_runs/tms/', full.names=T))
#remove observed except 1
observedIndex <- grep("_1.rds",list)[1]
nullIndices <- which(!grepl("_1.rds",list))
all_tms <- lapply(list[c(observedIndex,nullIndices)], readRDS)
fileList <- sort(list.files('../TM_outputs/ECLIPSE_bere_combined_runs/tms/', full.names=T))
#remove observed except 1
observedIndex <- grep("_1.rds",fileList)[1]
nullIndices <- which(!grepl("_1.rds",fileList))
all_tms <- lapply(list[c(observedIndex,nullIndices)], readRDS)
all_tms <- lapply(fileList[c(observedIndex,nullIndices)], readRDS)
length(all_tms)
transMatrices <- lapply(fileList[c(observedIndex,nullIndices)], readRDS)
load("~/gd/Harvard/Research/TM_outputs/ECLIPSE_bere_combined_runs/activeImage84433.RData")
source('./process_TM.R')
getwd()
analysisName
setwd('~/gd/Harvard/Research/TM_outputs/')
setwd('~/gd/Harvard/Research/TM_outputs/ECLIPSE_bere_combined_runs/')
fileList <- sort(list.files('./tms/', full.names=T))
fileList
observedIndex <- grep("_1.rds",fileList)[1]
nullIndices <- which(!grepl("_1.rds",fileList))
transMatrices <- lapply(fileList[c(observedIndex,nullIndices)], readRDS)
load("~/gd/Harvard/Research/TM_outputs/ECLIPSE_bere_combined_runs/activeImage84433.RData")
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
outputDir
outputDir <- '.'
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
tiff(file.path(outputDir,paste('SSODMplot_scaled',analysisCode,'.tiff', sep="")), width=4800)
ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
dev.off()
analysisCode <-""
setwd('~/gd/Harvard/Research/TM_outputs/JASPAR2016/COPDGene_combined_runs/')
fileList <- sort(list.files('./tms/', full.names=T))
#remove observed except 1
observedIndex <- grep("_1.rds",fileList)[1]
nullIndices <- which(!grepl("_1.rds",fileList))
transMatrices <- lapply(fileList[c(observedIndex,nullIndices)], readRDS)
load("./activeImage.RData")
analysisCode <-""
outputDir <- '.'
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
outputDir
getwd()
tiff(file.path(outputDir,paste('SSODMplot_unscaled',analysisCode,'.tiff', sep="")), width=4800)
ssodm.plot(transMatrices[[1]], transMatrices[-1],plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
dev.off()
tiff(file.path(outputDir,paste('SSODMplot_scaled',analysisCode,'.tiff', sep="")), width=4800)
ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
dev.off()
setwd('~/gd/Harvard/Research/TM_outputs/CISPB/BERE/ECLIPSE_combined_runs/')
fileList <- sort(list.files('./tms/', full.names=T))
#remove observed except 1
observedIndex <- grep("_1.rds",fileList)[1]
nullIndices <- which(!grepl("_1.rds",fileList))
transMatrices <- lapply(fileList[c(observedIndex,nullIndices)], readRDS)
load("./activeImage.RData")
analysisCode <-""
outputDir <- '.'
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
path.to.file("asd","fwqf","ff")
file.path("asd","fwqf","ff")
file.path("asd","fwqf","","ff")
?file.path
