ggtitle(expression(atop("ECLIPSE Transition Matrix", atop(italic("Smoker Controls to COPD Patients"), ""))))
print(p1)
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=800, height=800)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), plot.title=element_text(family="Times", face="bold", size=40)) +
xlab("Transcription Factors") + ylab("Transcription Factors") +
ggtitle(expression(atop("ECLIPSE Transition Matrix", atop(italic("Smoker Controls to COPD Patients"), ""))))
print(p1)
dev.off()
outputDir
outputDir <- "~/gd/Harvard/Research/R_workspace/TM_manuscript/figures/"
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=800, height=800)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), plot.title=element_text(family="Times", face="bold", size=40)) +
xlab("Transcription Factors") + ylab("Transcription Factors") +
ggtitle(expression(atop("ECLIPSE Transition Matrix", atop(italic("Smoker Controls to COPD Patients"), ""))))
print(p1)
dev.off()
pdf(file.path(outputDir,paste('Transition plot',analysisCode,'.pdf', sep="")), width=15, height=15)
plot.igraph(tfNet, edge.arrow.size=2, vertex.label.cex= 1.5, vertex.label.color= "black",main="")
legend("bottomleft", c("Gained features","Lost features"), lty=c(1,1),lwd=c(2.5,2.5),col=c("blue","red"))
dev.off()
ggplot(data=plotDF, aes(x=limmanegLogPValues, y=negLogZPValues)) + geom_point(aes(col=logfoldchangeTF), size=5, alpha=.6) +
geom_text_repel(data=plotDF[labels!="",], aes(limmanegLogPValues, negLogZPValues, label=labels)) +
ylab("Differential TF Involvement, -log(p-value)") + xlab("Differential Expression,  LIMMA -log(p-value)") +
ggtitle(expression(atop("Differential Involvement vs Differential Expression (ECLIPSE)", atop(italic("Smoker Controls to COPD Patients"), ""))))+
theme_classic() + scale_colour_continuous(limits=c(-max(abs(logfoldchangeTF)),max(abs(logfoldchangeTF))), name="log(fold-change)", low = "red", high = "blue") +
theme(plot.title = element_text(size=20,hjust=0))
dTFI_LIMMA_gg <- ggplot(data=plotDF, aes(x=limmanegLogPValues, y=negLogZPValues)) + geom_point(aes(col=logfoldchangeTF), size=5, alpha=.6) +
geom_text_repel(data=plotDF[labels!="",], aes(limmanegLogPValues, negLogZPValues, label=labels)) +
ylab("Differential TF Involvement, -log(p-value)") + xlab("Differential Expression,  LIMMA -log(p-value)") +
ggtitle(expression(atop("Differential Involvement vs Differential Expression (ECLIPSE)", atop(italic("Smoker Controls to COPD Patients"), ""))))+
theme_classic() + scale_colour_continuous(limits=c(-max(abs(logfoldchangeTF)),max(abs(logfoldchangeTF))), name="log(fold-change)", low = "red", high = "blue") +
theme(plot.title = element_text(size=20,hjust=0))
pdf(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.pdf', sep="")), width=9, height=8)
dTFI_LIMMA_gg <- ggplot(data=plotDF, aes(x=limmanegLogPValues, y=negLogZPValues)) + geom_point(aes(col=logfoldchangeTF), size=5, alpha=.6) +
geom_text_repel(data=plotDF[labels!="",], aes(limmanegLogPValues, negLogZPValues, label=labels)) +
ylab("Differential TF Involvement, -log(p-value)") + xlab("Differential Expression,  LIMMA -log(p-value)") +
ggtitle(expression(atop("Differential Involvement vs Differential Expression (ECLIPSE)", atop(italic("Smoker Controls to COPD Patients"), ""))))+
theme_classic() + scale_colour_continuous(limits=c(-max(abs(logfoldchangeTF)),max(abs(logfoldchangeTF))), name="log(fold-change)", low = "red", high = "blue") +
theme(plot.title = element_text(size=20,hjust=0))
print(dTFI_LIMMA_gg)
dev.off()
png(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.png', sep="")), width=900, height=800)
print(dTFI_LIMMA_gg)
dev.off()
dTFI_LIMMA_gg <- ggplot(data=plotDF, aes(x=limmanegLogPValues, y=negLogZPValues)) + geom_point(aes(col=logfoldchangeTF), size=5, alpha=.6) +
geom_text_repel(data=plotDF[labels!="",], aes(limmanegLogPValues, negLogZPValues, label=labels)) +
ylab("Differential TF Involvement, -log(p-value)") + xlab("Differential Expression,  LIMMA -log(p-value)") +
ggtitle(expression(atop("Differential Involvement vs Differential Expression (ECLIPSE)", atop(italic("Smoker Controls to COPD Patients"), ""))))+
theme_classic() + scale_colour_continuous(limits=c(-max(abs(logfoldchangeTF)),max(abs(logfoldchangeTF))), name="log(fold-change)", low = "red", high = "blue") +
theme(plot.title = element_text(size=40,hjust=.5))
pdf(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.pdf', sep="")), width=9, height=8)
print(dTFI_LIMMA_gg)
dev.off()
png(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.png', sep="")), width=900, height=800)
print(dTFI_LIMMA_gg)
dev.off()
dTFI_LIMMA_gg <- ggplot(data=plotDF, aes(x=limmanegLogPValues, y=negLogZPValues)) + geom_point(aes(col=logfoldchangeTF), size=5, alpha=.6) +
geom_text_repel(data=plotDF[labels!="",], aes(limmanegLogPValues, negLogZPValues, label=labels)) +
ylab("Differential TF Involvement, -log(p-value)") + xlab("Differential Expression,  LIMMA -log(p-value)") +
ggtitle(expression(atop("Differential Involvement vs Differential Expression (ECLIPSE)", atop(italic("Smoker Controls to COPD Patients"), ""))))+
theme_classic() + scale_colour_continuous(limits=c(-max(abs(logfoldchangeTF)),max(abs(logfoldchangeTF))), name="log(fold-change)", low = "red", high = "blue") +
theme(plot.title = element_text(size=30,hjust=.5))
pdf(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.pdf', sep="")), width=9, height=8)
print(dTFI_LIMMA_gg)
dev.off()
png(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.png', sep="")), width=900, height=800)
print(dTFI_LIMMA_gg)
dev.off()
dTFI_LIMMA_gg <- ggplot(data=plotDF, aes(x=limmanegLogPValues, y=negLogZPValues)) + geom_point(aes(col=logfoldchangeTF), size=5, alpha=.6) +
geom_text_repel(data=plotDF[labels!="",], aes(limmanegLogPValues, negLogZPValues, label=labels)) +
ylab("Differential TF Involvement, -log(p-value)") + xlab("Differential Expression,  LIMMA -log(p-value)") +
ggtitle(expression(atop("Differential Involvement vs Differential Expression (ECLIPSE)", atop(italic("Smoker Controls to COPD Patients"), ""))))+
theme_classic() + scale_colour_continuous(limits=c(-max(abs(logfoldchangeTF)),max(abs(logfoldchangeTF))), name="log(fold-change)", low = "red", high = "blue") +
theme(plot.title = element_text(size=20,hjust=.5))
pdf(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.pdf', sep="")), width=9, height=8)
print(dTFI_LIMMA_gg)
dev.off()
png(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.png', sep="")), width=900, height=800)
print(dTFI_LIMMA_gg)
dev.off()
dTFI_LIMMA_gg <- ggplot(data=plotDF, aes(x=limmanegLogPValues, y=negLogZPValues)) + geom_point(aes(col=logfoldchangeTF), size=5, alpha=.6) +
geom_text_repel(data=plotDF[labels!="",], aes(limmanegLogPValues, negLogZPValues, label=labels)) +
ylab("Differential TF Involvement, -log(p-value)") + xlab("Differential Expression,  LIMMA -log(p-value)") +
ggtitle(expression(atop("Differential Involvement vs Differential Expression (ECLIPSE)", atop(italic("Smoker Controls to COPD Patients"), ""))))+
theme_classic() + scale_colour_continuous(limits=c(-max(abs(logfoldchangeTF)),max(abs(logfoldchangeTF))), name="log(fold-change)", low = "red", high = "blue") +
theme(plot.title = element_text(size=25,hjust=.5))
pdf(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.pdf', sep="")), width=9, height=8)
print(dTFI_LIMMA_gg)
dev.off()
png(file.path(outputDir,paste('dTFI vs LIMMA',analysisCode,'.png', sep="")), width=900, height=800)
print(dTFI_LIMMA_gg)
dev.off()
library(reshape2)
library(bereR)
library(pandaR)
library(ROCR)
library(dplyr)
library(penalized)
validateMethodsOnDataset <- function(dataset){
source(paste("~/gd/Harvard/Research/R_workspace/",dataset,".R",sep=""))
# Data Procession
# Remove non-target genes
exprData <- exprData[rownames(exprData)%in%unique(goldStandard[,2]),]
# order Genes
exprData <- scale(exprData[order(rownames(exprData)),])
if (ncol(exprData)>200){
# Keep number of samples under 200
exprData <- exprData[,1:100]
}
# Get subset of expression data that is relevant (possibly keep all)
#     dataset <- "DREAM5c_G313"
#     exprData <- exprData[,!grep("G313",chipFeatures$V5)]
# Run algorithms -  PANDA, BERE (with Corr method, LDA, and weighted correlation diff), straight up corellation
########## PANDA
#     pandaMelt <- panda(motifs, exprData, progress=F)@regNet %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
########## Degree only approach
#     degreeMelt <- degreeApproach(motifs) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  BERE
bereMelt <- bere(motifs, exprData, cpp=F, verbose=F) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  LDA BERE
#     ldabereMelt <- ldaBERE(motifs, exprData) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  FULL BERE
#     fullbereMelt1 <- bereFull(motifs, exprData, alpha=1, lambda=1) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
#     fullbereMelt2 <- bereFull(motifs, exprData, alpha=1, lambda=2) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
#     fullbereMelt5 <- bereFull(motifs, exprData, alpha=1, lambda=5) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
#     fullbereMelt10 <- bereFull(motifs, exprData, alpha=1, lambda=10) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
#     fullbereMelt15 <- bereFull(motifs, exprData, alpha=1, lambda=15) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
#     fullbereMelt25 <- bereFull(motifs, exprData, alpha=1, lambda=25) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
#     fullbereMelt40 <- bereFull(motifs, exprData, alpha=1, lambda=40) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
#     fullbereMelt1000 <- bereFull(motifs, exprData, alpha=1, lambda=1000) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  Straight TF correlation
#     tfCorMelt <- abs(cor(x=t(exprData[rownames(exprData) %in% transFactors,]), y=t(exprData))) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  Weighted Cor diff
#    weightedCorDiffMelt <- t(weightedCorDiff) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
###################################################
##########  Validate Results with gold standard
###################################################
goldStandard <- goldStandard %>% meltToCharacter %>% removeDiagonal %>% sortMelt
motifs <- motifs %>% meltToCharacter %>% removeDiagonal %>% sortMelt
###################################################
##########  Plot Results against gold standard
###################################################
datalist <- list("Gold Standard"=goldStandard[,3],
#                      "Degree-only"=degreeMelt[,3],
#                      "PANDA"=pandaMelt[,3],
"BERE"=bereMelt[,3],
#                     "LDA BERE"=ldabereMelt[,3],
#                     "Full BERE 1"=fullbereMelt1[,3],
#                     "Full BERE 2"=fullbereMelt2[,3],
#                     "Full BERE 5"=fullbereMelt5[,3],
#                     "Full BERE 10"=fullbereMelt10[,3],
#                     "Full BERE 15"=fullbereMelt15[,3],
#                     "Full BERE 25"=fullbereMelt25[,3],
#                     "Full BERE 40"=fullbereMelt40[,3],
#                     "Full BERE 1000"=fullbereMelt1000[,3],
#                     "TF Corr"=tfCorMelt[,3],#+motifs[,3],
"Motifs"=motifs[,3])
TFsubset <- goldStandard[,1] %in% unique(goldStandard[,1])[6]
png(filename=paste("./TM_manuscript/figures/",dataset,"_all.png",sep=""))
plotROC(datalist, "all", organism=dataset, goldStandard)
dev.off()
png(filename=paste("./TM_manuscript/figures/",dataset,"_motif.png",sep=""))
plotROC(datalist, "motif", organism=dataset, goldStandard)
dev.off()
png(filename=paste("./TM_manuscript/figures/",dataset,"_nonmotif.png",sep=""))
plotROC(datalist, "nonmotif", organism=dataset, goldStandard)
dev.off()
}
plotROC <- function(datalist, includeSubset="all", organism="", goldStandard=NA, TFsubset=NA){
require(ROCR)
methods <- names(datalist)[-1] # Remove gold standard from methods list
if(includeSubset=="all"){ subset <- rep(T,length(datalist[["Gold Standard"]]))}
if(includeSubset=="motif"){ subset <- (datalist[["Motifs"]]==1)}
if(includeSubset=="nonmotif"){ subset <- (datalist[["Motifs"]]==0)}
if(!all(is.na(TFsubset))){
subset <- subset*TFsubset==1
}
plotList <- lapply(methods, function(x){
methodPred  <- prediction(datalist[[x]][subset], datalist[["Gold Standard"]][subset])
roc.methodPred  <- performance(methodPred, measure = c("tpr","auc"), x.measure = "fpr")
auc.methodPred  <- performance(methodPred, "auc")@y.values[[1]]
list("roc.methodPred"=roc.methodPred, "auc.methodPred"=auc.methodPred)
})
names(plotList) <- methods
plot(plotList[["BERE"]][["roc.methodPred"]], main=paste(organism, "-", includeSubset, "motifs","ROC"), col = 1, lwd=3)
mapply(function(x,index){
lines(plotList[[x]][["roc.methodPred"]]@x.values[[1]], plotList[[x]][["roc.methodPred"]]@y.values[[1]], col = (index), lwd=3)
}, methods, 1:length(methods))
legendLabels <- c(sapply(methods, function(x){
paste(x, round(plotList[[x]][["auc.methodPred"]],4))
}))
legend(.5,.6, legendLabels, lty=rep(1,length(methods)),lwd=rep(5,length(methods)),col=1:length(methods),title="Area under ROC curve")
rocPerTFResults <- c()
if(!all(is.na(goldStandard))){
# Calculate average ROC per TF
tfs <- unique(goldStandard[,1])
goldcounts <- table(goldStandard[subset,c(1,3)])[,2]
tfs <- tfs[goldcounts>0]
goldcounts <- goldcounts[goldcounts>0]
TFaucrocs <- sapply(tfs, function(tf){
tfsub <- goldStandard[,1] %in% tf
sapply(methods, function(x){
methodPred  <- prediction(datalist[[x]][subset & tfsub], datalist[["Gold Standard"]][subset & tfsub])
performance(methodPred, "auc")@y.values[[1]]
})
})
meanROC <- apply(TFaucrocs,1,mean)
wmeanROC <- apply(TFaucrocs,1,function(x){
sum(x*goldcounts)/sum(goldcounts)
})
rocPerTFResults <- c(rocPerTFResults, paste("Average within TF ROC, weighted by gold standard hits -", organism, includeSubset))
rocPerTFResults <- c(rocPerTFResults, wmeanROC)
}
write.table(rocPerTFResults, file=paste("./output/",organism, includeSubset,"_aucroc_per_TF.txt",sep=""))
}
sortMelt <- function(df){df[order(df[,1],df[,2]),]}
removeDiagonal <- function(x){x[x[,1]!=x[,2],]}
meltToCharacter <- function(x){
x[,1]<-as.character(x[,1])
x[,2]<-as.character(x[,2])
x
}
setwd('~/gd/Harvard/Research/R_workspace')
source("./validation.R")
datasets <- c("Yeast", "DREAM5a", "DREAM5c", "DREAM5d")
sapply(datasets, validateMethodsOnDataset)
dataset
dataset <- "Yeast"
source('~/gd/Harvard/Research/R_workspace/validation.R')
sapply(datasets, validateMethodsOnDataset)
setwd('~/gd/Harvard/Research/R_workspace')
source("./validation.R")
datasets <- c("Yeast", "DREAM5a", "DREAM5c", "DREAM5d")
sapply(datasets, validateMethodsOnDataset)
source('~/.active-rstudio-document')
source('~/gd/Harvard/Research/R_workspace/validation.R')
sapply(datasets, validateMethodsOnDataset)
source('~/gd/Harvard/Research/R_workspace/validation.R')
source('~/gd/Harvard/Research/R_workspace/validation.R')
sapply(datasets, validateMethodsOnDataset)
source("./validation.R")
datasets <- c("Yeast", "DREAM5a", "DREAM5c", "DREAM5d")
sapply(datasets, validateMethodsOnDataset)
getwd()
pdf("asdsad.pdf")
hist(rnorm(1000))
dev.off()
source('~/gd/Harvard/Research/R_workspace/validation.R')
source('~/gd/Harvard/Research/R_workspace/validation.R')
sapply(datasets, validateMethodsOnDataset)
b=1:100;b[b%%3==0]="FIZZ";b[seq(5,95,5)]="BUZZ";b[seq(0,95,15)]="FIZZBUZZ";b
library(ggplot2)
matrix(rnorm(20*100),nrow=20)
expr <- data.frame(matrix(rnorm(20*100),nrow=20))
melt(expr)
library(reshape2)
melt(expr)
dim(expr)
dim(melt(expr))
expr <- matrix(rnorm(20*100),nrow=20)
melt(expr)
heatmap1 <- melt(expr)
class(heatmap1)
head(heatmap1)
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(fill=value)
ggplot(heatmap1, aes(Var1,Var2))
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value))
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value))+
theme_bw()
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value))+
theme_classic()
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
sapply(rnorm(100), function(x){rnorm(20,mean=x)})
expr <- matrix(t(sapply(rnorm(100), function(x){rnorm(20,mean=x)})),nrow=20)
heatmap1 <- melt(expr)
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
expr <- matrix(sapply(rnorm(20), function(x){rnorm(100,mean=x)}),nrow=20)
heatmap1 <- melt(expr)
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
heatmap1 <- melt(expr)
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
source('~/.active-rstudio-document')
library(ggplot2)
library(reshape2)
expr <- matrix(sapply(rnorm(20), function(x){rnorm(100,mean=x)}),nrow=20)
heatmap1 <- melt(expr)
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
library(ggplot2)
library(reshape2)
expr <- matrix(sapply(rnorm(20), function(x){rnorm(100,mean=x)}),nrow=20)
heatmap1 <- melt(expr)
ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
scale_fill_gradientn(colours=c("navyblue","darkmagenta","darkorange1"))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
print(makeHeatmap())
print(makeHeatmap())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/gd/Harvard/Research/R_workspace/heatmap_diagram.R')
getwd()
source('~/.active-rstudio-document')
source('~/gd/Harvard/Research/R_workspace/heatmap_diagram.R')
makeTMHeatmap <-  function(){
expr <- diag(20)
heatmap1 <- melt(expr)
ggHeat <- ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
scale_fill_gradientn(colours=c("blue","black","Yellow"))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
ggHeat
}
source('~/gd/Harvard/Research/R_workspace/heatmap_diagram.R')
20:1
expr <- diag(20)[20:1,]
heatmap1 <- melt(expr)
ggHeat <- ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
scale_fill_gradientn(colours=c("blue","black","Yellow"))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
ggHeat
expr <- diag(20)[20:1,] +rnorm(400)
heatmap1 <- melt(expr)
ggHeat <- ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
scale_fill_gradientn(colours=c("blue","black","Yellow"))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
ggHeat
expr <- diag(20)[20:1,] +rnorm(400)/10
heatmap1 <- melt(expr)
ggHeat <- ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
scale_fill_gradientn(colours=c("blue","black","Yellow"))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
ggHeat
expr <- diag(20)[20:1,] +rnorm(400)/6
heatmap1 <- melt(expr)
ggHeat <- ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
scale_fill_gradientn(colours=c("blue","black","Yellow"))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
ggHeat
expr <- diag(20)[20:1,] +rnorm(400)/6
expr[12,15]<-1
heatmap1 <- melt(expr)
ggHeat <- ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
scale_fill_gradientn(colours=c("blue","black","Yellow"))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
ggHeat
source('~/gd/Harvard/Research/R_workspace/heatmap_diagram.R')
source('~/gd/Harvard/Research/R_workspace/heatmap_diagram.R')
expr <- diag(20) +rnorm(400)/6
expr[2,15]<-1
expr[15,2]<-1
expr[14,18]<-1
expr[18,14]<-1
expr[2,5]<-1
expr <- expr[20:1,]
heatmap1 <- melt(expr)
ggHeat <- ggplot(heatmap1, aes(Var1,Var2)) + geom_tile(aes(fill=value)) +
scale_fill_gradientn(colours=c("blue","black","Yellow"))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
ggHeat
source('~/gd/Harvard/Research/R_workspace/heatmap_diagram.R')
