theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=8)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
#' example1
ssodm.plot <- function(tm.obs, tm.null, sort.by.sig=F, rescale=F, plot.title=NA, highlight.tfs=NA){
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
# Process the data for ggplot2
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
## Plot the data
ggplot(null.SSODM.melt, aes(x=TF, y=value))+
geom_point(aes(color=factor(Var2), alpha = .5*as.numeric(factor(Var2))), size=1) +
scale_color_manual(values = c("blue", "red")) +
scale_x_discrete(limits = x.axis.order ) +
theme_classic() +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=8)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=12)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=16)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
#' example1
ssodm.plot <- function(tm.obs, tm.null, sort.by.sig=F, rescale=F, plot.title=NA, highlight.tfs=NA){
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
# Process the data for ggplot2
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
## Plot the data
ggplot(null.SSODM.melt, aes(x=TF, y=value)) +
geom_point(aes(color=factor(Var2), alpha = .5*as.numeric(factor(Var2))), size=1) +
geom_point(aes(color=factor(Var2), alpha = .5*as.numeric(factor(Var2))), size=1) +
scale_color_manual(values = c("blue", "red")) +
scale_x_discrete(limits = x.axis.order ) +
theme_classic() +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
ssodm.plot <- function(tm.obs, tm.null, sort.by.sig=F, rescale=F, plot.title=NA, highlight.tfs=NA){
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
# Process the data for ggplot2
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
## Plot the data
ggplot(null.SSODM.melt, aes(x=TF, y=value)) +
geom_point(aes(null.SSODM.melt[as.numeric(factor(null.SSODM.melt$Var2))==1]), alpha = .5, size=4, color=1) +
geom_point(aes(null.SSODM.melt[as.numeric(factor(null.SSODM.melt$Var2))==2]), alpha = 1, size=4, color=2) +
scale_color_manual(values = c("blue", "red")) +
scale_x_discrete(limits = x.axis.order ) +
theme_classic() +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
ssodm.plot <- function(tm.obs, tm.null, sort.by.sig=F, rescale=F, plot.title=NA, highlight.tfs=NA){
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
# Process the data for ggplot2
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
## Plot the data
ggplot(null.SSODM.melt, aes(x=TF, y=value)) +
geom_point(aes(null.SSODM.melt[as.numeric(factor(null.SSODM.melt$Var2))==1],), alpha = .5, size=4, color=1) +
geom_point(aes(null.SSODM.melt[as.numeric(factor(null.SSODM.melt$Var2))==2],), alpha = 1, size=4, color=2) +
scale_color_manual(values = c("blue", "red")) +
scale_x_discrete(limits = x.axis.order ) +
theme_classic() +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
ssodm.plot <- function(tm.obs, tm.null, sort.by.sig=F, rescale=F, plot.title=NA, highlight.tfs=NA){
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
# Process the data for ggplot2
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
## Plot the data
ggplot(null.SSODM.melt, aes(x=TF, y=value)) +
geom_point(aes(null.SSODM.melt[as.numeric(factor(null.SSODM.melt$Var2))==1,]), alpha = .5, size=4, color=1) +
geom_point(aes(null.SSODM.melt[as.numeric(factor(null.SSODM.melt$Var2))==2,]), alpha = 1, size=4, color=2) +
scale_color_manual(values = c("blue", "red")) +
scale_x_discrete(limits = x.axis.order ) +
theme_classic() +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
ssodm.plot <- function(tm.obs, tm.null, sort.by.sig=F, rescale=F, plot.title=NA, highlight.tfs=NA){
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
# Process the data for ggplot2
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
## Plot the data
ggplot(null.SSODM.melt, aes(x=TF, y=value))+
geom_point(aes(color=factor(Var2), alpha = .5*as.numeric(factor(Var2))), size=1) +
scale_color_manual(values = c("blue", "red")) +
scale_alpha_discrete(show_guide = FALSE) +
scale_x_discrete(limits = x.axis.order ) +
theme_classic() +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
ssodm.plot <- function(tm.obs, tm.null, sort.by.sig=F, rescale=F, plot.title=NA, highlight.tfs=NA){
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
# Process the data for ggplot2
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
## Plot the data
ggplot(null.SSODM.melt, aes(x=TF, y=value))+
geom_point(aes(color=factor(Var2), alpha = .5*as.numeric(factor(Var2))), size=1) +
scale_color_manual(values = c("blue", "red")) +
scale_alpha(guide = "none") +
scale_x_discrete(limits = x.axis.order ) +
theme_classic() +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T)#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T), plot.title="")#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T,plot.title="")#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
ssodm.plot <- function(tm.obs, tm.null, sort.by.sig=F, rescale=F, plot.title=NA, highlight.tfs=NA){
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
# Process the data for ggplot2
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
## Plot the data
ggplot(null.SSODM.melt, aes(x=TF, y=value))+
geom_point(aes(color=factor(Var2), alpha = .5*as.numeric(factor(Var2))), size=4) +
scale_color_manual(values = c("blue", "red")) +
scale_alpha(guide = "none") +
scale_x_discrete(limits = x.axis.order ) +
theme_classic() +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T,plot.title="")#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
ssodm.plot <- function(tm.obs, tm.null, sort.by.sig=F, rescale=F, plot.title=NA, highlight.tfs=NA){
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
t.values <- sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
})
# Process the data for ggplot2
combined.mat <- cbind(null.ssodm.matrix, ssodm)
colnames(combined.mat) <- c(rep('Null',num.iterations),"Observed")
if (rescale){
combined.mat <- t(apply(combined.mat,1,function(x){
(x-mean(x[-(num.iterations+1)]))/sd(x[-(num.iterations+1)])
}))
x.axis.order <- rownames(tm.null[[1]])[order(-t.values)]
x.axis.size  <- 10 # pmin(15,7-log(p.values[order(p.values)]))
} else {
x.axis.order <- rownames(tm.null[[1]])
x.axis.size  <- pmin(15,7-log(p.values))
}
null.SSODM.melt <- melt(combined.mat)[,-1][,c(2,1)]
null.SSODM.melt$TF<-rep(rownames(tm.null[[1]]),num.iterations+1)
## Plot the data
ggplot(null.SSODM.melt, aes(x=TF, y=value))+
geom_point(aes(color=factor(Var2), alpha = .5*as.numeric(factor(Var2))), size=2) +
scale_color_manual(values = c("blue", "red")) +
scale_alpha(guide = "none") +
scale_x_discrete(limits = x.axis.order ) +
theme_classic() +
theme(legend.title=element_blank(),axis.text.x = element_text(colour = 1+x.axis.order%in%highlight.tfs, angle = 90, hjust = 1, size=x.axis.size,face="bold")) +
ylab("Sum of Squared Off-Diagonal Mass") +
ggtitle(plot.title)
}
pdf(file.path(outputDir,paste0('SSODMplot_scaled',analysisCode,'.pdf')), width=24)
sPlot <- ssodm.plot(transMatrices[[1]], transMatrices[-1], rescale=T,plot.title="")#, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
print(sPlot)
dev.off()
setwd('~/gd/Harvard/Research/TM_outputs/JASPAR2014/BERE/ECLIPSE_combined_runs/')
load("./activeImage.RData")
rm(all_tms)
save.image(file=file.path("activeImage.RData"))
analysisCode <-""
outputDir <- '.'
fileList <- sort(list.files('./tms/', full.names=T))
fileList
observedIndex <- grep("_1.rds",fileList)[1]
nullIndices <- which(!grepl("_1.rds",fileList))
all_tms <- lapply(fileList[c(observedIndex,nullIndices)], readRDS)
