fill=I("blue") + col=I("red")
}
populationSize <- 10000
numGen <- 100
numSim <- 10
alleleFreq = .2
runAlleleFreqSim(populationSize, numGen, numPerms, alleleFreq)
runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
generation
runAlleleFreqSim <- function(populationSize, numGen, numSim, alleleFreq){
# Initiate cluster
cores <- 4
cl <- makeCluster(cores)
registerDoParallel(cl)
#start time
strt  <- Sys.time()
res <- foreach(i=1:cores,.packages=c()) %dopar% {
generation <- function(alleles){
fatherHap <- rbinom(length(alleles), 1, sample(alleles[1:(populationSize/2)], populationSize, replace=T)/2)
motherHap <- rbinom(length(alleles), 1, sample(alleles[(populationSize/2+1):populationSize], populationSize, replace=T)/2)
fatherHap + motherHap
}
res <- replicate(numSim/cores,{
alleles <- rbinom(populationSize, 2, alleleFreq)
for(i in 1:numGen){
alleles <- generation(alleles)
}
mean(alleles)/2
})
}
print(Sys.time()-strt)
stopCluster(cl)
res <- unlist(res)
qplot(res, geom="histogram",main = paste0("Allele frequency for population of", populationSize, "after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.02, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
fill=I("blue") + col=I("red")
}
populationSize <- 10000
numGen <- 100
numSim <- 10
alleleFreq = .2
runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
source('~/gd/Harvard/Research/R_workspace/neutralSNPs.R')
res
runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
qplot(res, geom="histogram",main = paste0("Allele frequency for population of", populationSize, "after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.02, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency")
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
res
qplot(res, geom="histogram",main = paste0("Allele frequency for population of", populationSize, "after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.02, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency")
qplot(res, geom="histogram",main = paste0("Allele frequency for population of", populationSize, "after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.01, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency")
stopCluster(cl)
qplot(res, geom="histogram",main = paste0("Allele frequency for population of", populationSize, "after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.01, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
library(ggplot2)
library(foreach)
library(doParallel)
runAlleleFreqSim <- function(populationSize, numGen, numSim, alleleFreq){
# Initiate cluster
cores <- 4
cl <- makeCluster(cores)
registerDoParallel(cl)
#start time
strt  <- Sys.time()
res <- foreach(i=1:cores,.packages=c()) %dopar% {
generation <- function(alleles){
fatherHap <- rbinom(length(alleles), 1, sample(alleles[1:(populationSize/2)], populationSize, replace=T)/2)
motherHap <- rbinom(length(alleles), 1, sample(alleles[(populationSize/2+1):populationSize], populationSize, replace=T)/2)
fatherHap + motherHap
}
res <- replicate(numSim/cores,{
alleles <- rbinom(populationSize, 2, alleleFreq)
for(i in 1:numGen){
alleles <- generation(alleles)
}
mean(alleles)/2
})
}
print(Sys.time()-strt)
stopCluster(cl)
res <- unlist(res)
qplot(res, geom="histogram",main = paste0("Allele frequency for population of", populationSize, "after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.01, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
}
populationSize <- 10000
numGen <- 100
numSim <- 10
alleleFreq = .2
numSim <- 100
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
res
library(ggplot2)
library(foreach)
library(doParallel)
runAlleleFreqSim <- function(populationSize, numGen, numSim, alleleFreq){
# Initiate cluster
cores <- 4
cl <- makeCluster(cores)
registerDoParallel(cl)
#start time
strt  <- Sys.time()
res <- foreach(i=1:cores,.packages=c()) %dopar% {
generation <- function(alleles){
fatherHap <- rbinom(length(alleles), 1, sample(alleles[1:(populationSize/2)], populationSize, replace=T)/2)
motherHap <- rbinom(length(alleles), 1, sample(alleles[(populationSize/2+1):populationSize], populationSize, replace=T)/2)
fatherHap + motherHap
}
res <- replicate(numSim/cores,{
alleles <- rbinom(populationSize, 2, alleleFreq)
for(i in 1:numGen){
alleles <- generation(alleles)
}
mean(alleles)/2
})
}
print(Sys.time()-strt)
stopCluster(cl)
res <- unlist(res)
qplot(res, geom="histogram",main = paste0("Allele frequency for population of", populationSize, "after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
}
populationSize <- 10000
numGen <- 100
numSim <- 1000
alleleFreq = .2
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
res
qplot(res, geom="histogram",main = paste0("Allele frequency for population of", populationSize, "after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red") +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90)
res
alleleFreq = .01
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
res
numGen <- 1000
numSim <- 100
alleleFreq = .01
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
res
numSim <- 1000
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
res
res
ggplot_build(res)
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
qplot(res, geom="histogram",main = paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
res
library(ggplot2)
library(foreach)
library(doParallel)
runAlleleFreqSim <- function(populationSize, numGen, numSim, alleleFreq){
# Initiate cluster
cores <- 4
cl <- makeCluster(cores)
registerDoParallel(cl)
#start time
strt  <- Sys.time()
res <- foreach(i=1:cores,.packages=c()) %dopar% {
generation <- function(alleles){
fatherHap <- rbinom(length(alleles), 1, sample(alleles[1:(populationSize/2)], populationSize, replace=T)/2)
motherHap <- rbinom(length(alleles), 1, sample(alleles[(populationSize/2+1):populationSize], populationSize, replace=T)/2)
fatherHap + motherHap
}
res <- replicate(numSim/cores,{
alleles <- rbinom(populationSize, 2, alleleFreq)
for(i in 1:numGen){
alleles <- generation(alleles)
}
mean(alleles)/2
})
}
print(Sys.time()-strt)
stopCluster(cl)
unlist(res)
}
populationSize <- 10000
numGen <- 1000
numSim <- 100
alleleFreq = .01
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
qplot(res, geom="histogram",main = paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
res
sum(res==-)
sum(res==0)
populationSize <- 10000
numGen <- 1000
numSim <- 100
alleleFreq = .1
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
qplot(res, geom="histogram",main = paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
qplot(res, geom="histogram",binwidth = 10,main = paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
qplot(res, geom="histogram",binwidth = .01, main = paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
qplot(res, geom="histogram",binwidth = .01, main = paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
ggplot(data.frame(res), geom="histogram",binwidth = .01, main = paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
ggplot(data.frame(res), aes(res))
ggplot(data.frame(res), aes(res))+ geom_histogram()
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01)
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01) +
ggtitle(paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01) +
ggtitle(paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq)
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01) +
ggtitle(paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90)
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01) +
ggtitle(paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency")
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01) +
ggtitle(paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency") +
geom_bar(fill = "blue", col="red")
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01,color="black", fill=NA))
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01,color="black", fill=NA)
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01, color="red", fill="blue")
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01, color="red", fill="blue") +
ggtitle(paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency")
runAlleleFreqSim <- function(populationSize, numGen, numSim, alleleFreq){
# Initiate cluster
cores <- 4
cl <- makeCluster(cores)
registerDoParallel(cl)
#start time
strt  <- Sys.time()
res <- foreach(i=1:cores,.packages=c()) %dopar% {
generation <- function(alleles){
fatherHap <- rbinom(length(alleles), 1, sample(alleles[1:(populationSize/2)], populationSize, replace=T)/2)
motherHap <- rbinom(length(alleles), 1, sample(alleles[(populationSize/2+1):populationSize], populationSize, replace=T)/2)
fatherHap + motherHap
}
res <- replicate(numSim/cores,{
alleles <- rbinom(populationSize, 2, alleleFreq)
for(i in 1:numGen){
alleles <- generation(alleles)
}
mean(alleles)/2
})
}
print(Sys.time()-strt)
stopCluster(cl)
unlist(res)
}
populationSize <- 10000
numGen <- 1000
numSim <- 1000
alleleFreq = .1
res <- runAlleleFreqSim(populationSize, numGen, numSim, alleleFreq)
ggplot(data.frame(res), aes(res))+ geom_histogram(binwidth = .01, color="red", fill="blue") +
ggtitle(paste0("Allele frequency for population of ", populationSize, " after ", numGen, " generations (", numSim," simulations)")) +
geom_vline(xintercept = alleleFreq) +
annotate("text", x=alleleFreq-.001, y=20, label="Starting Allele Frequency", color="red",angle = 90) +
xlab("Final allele frequency")
source('~/1000GP/calculatePCA.R')
source('~/1000GP/associations-copy.R')
unique(pop)
unique(group)
hclust(jaccardMatrix)
dim(jaccardMatrix)
?hclust
?dist
hclust(as.dist(jaccardMatrix))
plot(hclust(as.dist(jaccardMatrix)))
heatmap.2(hclust(as.dist(jaccardMatrix)))
library(gplots)
heatmap.2(as.dist(jaccardMatrix))
heatmap.2(jaccardMatrix)
class(jaccardMatrix)
heatmap.2(as.dist(matrix(jaccardMatrix)))
heatmap.2(as.dist(as.matrix(jaccardMatrix)))
as.matrix(jaccardMatrix)[1:5,1:5]
as.dist(as.matrix(jaccardMatrix))
heatmap.2(as.dist(as.matrix(jaccardMatrix)))
heatmap.2(as.matrix(jaccardMatrix))
colorCodes <- c(ASA="red", AMA="green", EUR="blue", SAS="yellow", EAS="black")
hc <- hclust(as.dist(as.matrix(jaccardMatrix)))
jaccardMatrix[1:5,1:5]
hc
jm <- as.matrix(jaccardMatrix)
rownames(jm) <- pop
jm[1:5,1:5]
rownames(jm) <- group
jm[1:5,1:5]
labelCol <- function(x) {
if (is.leaf(x)) {
## fetch label
label <- attr(x, "label")
#     code <- substr(label, 1, 1)
## use the following line to reset the label to one letter code
# attr(x, "label") <- code
attr(x, "nodePar") <- list(lab.col=colorCodes[label])
}
return(x)
}
colorCodes <- c(ASA="red", AMA="green", EUR="blue", SAS="yellow", EAS="black")
jm <- as.matrix(jaccardMatrix)
rownames(jm) <- group
hc <- hclust(as.dist())
hc <- hclust(as.dist(jm))
d <- dendrapply(as.dendrogram(hc), labelCol)
plot(d)
sample(2504,100)
subset<-sample(2504,100)
jm <- as.matrix(jaccardMatrix)[subset,subset]
rownames(jm) <- group
hc <- hclust(as.dist(jm))
labelCol <- function(x) {
if (is.leaf(x)) {
## fetch label
label <- attr(x, "label")
#     code <- substr(label, 1, 1)
## use the following line to reset the label to one letter code
# attr(x, "label") <- code
attr(x, "nodePar") <- list(lab.col=colorCodes[label])
}
return(x)
}
d <- dendrapply(as.dendrogram(hc), labelCol)
plot(d)
jm
subset<-sample(2504,100)
jm <- as.matrix(jaccardMatrix)[subset,subset]
rownames(jm) <- group
rownames(jm) <- group[subset]
hc <- hclust(as.dist(jm))
d <- dendrapply(as.dendrogram(hc), labelCol)
plot(d)
unique(group)
colorCodes <- c(AFR="red", AMR="green", EUR="blue", SAS="yellow", EAS="black")
subset<-sample(2504,100)
jm <- as.matrix(jaccardMatrix)[subset,subset]
rownames(jm) <- group[subset]
hc <- hclust(as.dist(jm))
d <- dendrapply(as.dendrogram(hc), labelCol)
plot(d)
jm
jm[1:5,1:5]
jm[1:15,1:15]
jm <- max(jm)-jm
jm
hc <- hclust(as.dist(jm))
d <- dendrapply(as.dendrogram(hc), labelCol)
plot(d)
hc <- hclust(as.dist(jm),method="average")
d <- dendrapply(as.dendrogram(hc), labelCol)
plot(d)
plot(d, main="Hierarchical Clustering across superpopulations")
labels_colors
d <- dendrapply(as.dendrogram(hc, hang=max(jaccardMat)*.1)), labelCol)
d <- dendrapply(as.dendrogram(hc, hang=max(jaccardMat)*.1), labelCol)
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations")
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-lowest.node*1.25,1))
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
max(jm)
1-max(jm)
plot(d, main="Hierarchical Clustering across superpopulati")
jm <- as.matrix(jaccardMatrix)[subset,subset]
jm <- max(jm)-jm
rownames(jm) <- group[subset]
hc <- hclust(as.dist(jm),method="average")
d <- dendrapply(as.dendrogram(hc), labelCol)
plot(d, main="Hierarchical Clustering across superpopulati")
jm <- as.matrix(jaccardMatrix)[subset,subset]
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
max(jm)
diag(jm)<-0
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
subset <- rep(T,2504)
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
which(jm>.1)
which(jm>.1,arr.ind=T))
which(jm>.1,arr.ind=T)
which(jm>.1,arr.ind=T)[,1]
subset <- -related
related <- which(jm>.1,arr.ind=T)[,1]
subset <- -related
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
legend()
heatmap.2(hc)
subset<-sample(2504,100)
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
heatmap.2(1-jm)
?heatmap.2
heatmap.2(1-jm, dendrogram=N)
heatmap.2(1-jm, dendrogram="none")
heatmap.2(1-jm, dendrogram="none", trace="none")
colnames(jm) <- pop[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
heatmap.2(1-jm, dendrogram="none", trace="none")
subset <- sample(2504,500)
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
colnames(jm) <- pop[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
heatmap.2(1-jm, dendrogram="none", trace="none")
heatmap.2(jm, dendrogram="none", trace="none")
heatmap.2(log(jm), dendrogram="none", trace="none")
heatmap.2(jm, dendrogram="none", trace="none")
heatmap.2(1-jm, dendrogram="none", trace="none")
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
jaccardMatrix1 <- jaccardMatrix[-related,-related]
jm <- as.matrix(jaccardMatrix1)[subset,subset]
heatmap.2(1-jm, dendrogram="none", trace="none",col=my_palette <- colorRampPalette(c("green", "black", "red"))(n = 1000))
heatmap.2(1-jm, dendrogram="none", trace="none",col=my_palette <- colorRampPalette(c("green", "black", "red"))(n = 2))
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
min(1-jm)
jm[jm<.985]<-.985
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
subset <- sample(2504,500)
subset <- -related
subset <- rep(T,2504)
jm <- as.matrix(jaccardMatrix)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
colnames(jm) <- pop[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
jm[jm>.015]<-.015
jm[jm>.015]<-.015
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
jm[jm>.005]<-.005
heatmap.2(1-jm, dendrogram="none", trace="none",col=bluered)
jm[,1]
