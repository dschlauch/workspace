abline(lm(geneY[51:100]~geneX[51:100]), col="blue" )
legend(-2,7,       c("COPD","SMC"),       lty=c(1,1,1),lwd=c(2.5,2.5,2.5),col=c("blue","red"))
legend(-2,7,       c("Null COPD","Null SMC"),       lty=c(1,1,1),lwd=c(2.5,2.5,2.5),col=c("blue","red"))
library(bereR)
bereFull
library(reshape2)
library(bereR)
library(pandaR)
library(ROCR)
library(dplyr)
library(penalized)
dataset<-"Yeast"
source(paste("~/gd/Harvard/Research/R_workspace/",dataset,".R",sep=""))
# Data Procession
# Remove non-target genes
exprData <- exprData[rownames(exprData)%in%unique(goldStandard[,2]),]
# order Genes
exprData <- scale(exprData[order(rownames(exprData)),])
if (ncol(exprData)>200){
# Keep number of samples under 200
exprData <- exprData[,1:100]
}
# Get subset of expression data that is relevant (possibly keep all)
#     dataset <- "DREAM5c_G313"
#     exprData <- exprData[,!grep("G313",chipFeatures$V5)]
# Run algorithms -  PANDA, BERE (with Corr method, LDA, and weighted correlation diff), straight up corellation
library(reshape2)
library(bereR)
library(pandaR)
library(ROCR)
library(dplyr)
library(penalized)
validateMethodsOnDataset <- function(dataset){
source(paste("~/gd/Harvard/Research/R_workspace/",dataset,".R",sep=""))
# Data Procession
# Remove non-target genes
exprData <- exprData[rownames(exprData)%in%unique(goldStandard[,2]),]
# order Genes
exprData <- scale(exprData[order(rownames(exprData)),])
if (ncol(exprData)>200){
# Keep number of samples under 200
exprData <- exprData[,1:100]
}
# Get subset of expression data that is relevant (possibly keep all)
#     dataset <- "DREAM5c_G313"
#     exprData <- exprData[,!grep("G313",chipFeatures$V5)]
# Run algorithms -  PANDA, BERE (with Corr method, LDA, and weighted correlation diff), straight up corellation
########## PANDA
pandaMelt <- panda(motifs, exprData, progress=F)@regNet %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
########## Degree only approach
degreeMelt <- degreeApproach(motifs) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  BERE
bereMelt <- bere(motifs, exprData, cpp=F, verbose=F) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  LDA BERE
ldabereMelt <- ldaBERE(motifs, exprData) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  FULL BERE
fullbereMelt1 <- bereFull(motifs, exprData, alpha=1, lambda=1) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt2 <- bereFull(motifs, exprData, alpha=1, lambda=2) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt5 <- bereFull(motifs, exprData, alpha=1, lambda=5) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt10 <- bereFull(motifs, exprData, alpha=1, lambda=10) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt15 <- bereFull(motifs, exprData, alpha=1, lambda=15) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt25 <- bereFull(motifs, exprData, alpha=1, lambda=25) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt40 <- bereFull(motifs, exprData, alpha=1, lambda=40) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt1000 <- bereFull(motifs, exprData, alpha=1, lambda=1000) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  Straight TF correlation
tfCorMelt <- abs(cor(x=t(exprData[rownames(exprData) %in% transFactors,]), y=t(exprData))) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  Weighted Cor diff
#    weightedCorDiffMelt <- t(weightedCorDiff) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
###################################################
##########  Validate Results with gold standard
###################################################
goldStandard <- goldStandard %>% meltToCharacter %>% removeDiagonal %>% sortMelt
motifs <- motifs %>% meltToCharacter %>% removeDiagonal %>% sortMelt
###################################################
##########  Plot Results against gold standard
###################################################
datalist <- list("Gold Standard"=goldStandard[,3],
"Degree-only"=degreeMelt[,3],
"PANDA"=pandaMelt[,3],
"BERE"=bereMelt[,3],
"LDA BERE"=ldabereMelt[,3],
"Full BERE 1"=fullbereMelt1[,3],
"Full BERE 2"=fullbereMelt2[,3],
"Full BERE 5"=fullbereMelt5[,3],
"Full BERE 10"=fullbereMelt10[,3],
"Full BERE 15"=fullbereMelt15[,3],
"Full BERE 25"=fullbereMelt25[,3],
"Full BERE 40"=fullbereMelt40[,3],
"Full BERE 1000"=fullbereMelt1000[,3],
"TF Corr"=tfCorMelt[,3],#+motifs[,3],
"Motifs"=motifs[,3])
TFsubset <- goldStandard[,1] %in% unique(goldStandard[,1])[6]
png(filename=paste("./output/",dataset,"_all.png",sep=""))
plotROC(datalist, "all", organism=dataset, goldStandard)
dev.off()
png(filename=paste("./output/",dataset,"_motif.png",sep=""))
plotROC(datalist, "motif", organism=dataset, goldStandard)
dev.off()
png(filename=paste("./output/",dataset,"_nonmotif.png",sep=""))
plotROC(datalist, "nonmotif", organism=dataset, goldStandard)
dev.off()
}
###################################################
##########  Functions
###################################################
# New ROC method
plotROC <- function(datalist, includeSubset="all", organism="", goldStandard=NA, TFsubset=NA){
require(ROCR)
methods <- names(datalist)[-1] # Remove gold standard from methods list
if(includeSubset=="all"){ subset <- rep(T,length(datalist[["Gold Standard"]]))}
if(includeSubset=="motif"){ subset <- (datalist[["Motifs"]]==1)}
if(includeSubset=="nonmotif"){ subset <- (datalist[["Motifs"]]==0)}
if(!all(is.na(TFsubset))){
subset <- subset*TFsubset==1
}
plotList <- lapply(methods, function(x){
methodPred  <- prediction(datalist[[x]][subset], datalist[["Gold Standard"]][subset])
roc.methodPred  <- performance(methodPred, measure = c("tpr","auc"), x.measure = "fpr")
auc.methodPred  <- performance(methodPred, "auc")@y.values[[1]]
list("roc.methodPred"=roc.methodPred, "auc.methodPred"=auc.methodPred)
})
names(plotList) <- methods
plot(plotList[["PANDA"]][["roc.methodPred"]], main=paste(organism, includeSubset,"ROC"), col = 1, lwd=3)
mapply(function(x,index){
lines(plotList[[x]][["roc.methodPred"]]@x.values[[1]], plotList[[x]][["roc.methodPred"]]@y.values[[1]], col = (index), lwd=3)
}, methods, 1:length(methods))
legendLabels <- c(sapply(methods, function(x){
paste(x, round(plotList[[x]][["auc.methodPred"]],4))
}))
legend(.5,.6, legendLabels, lty=rep(1,length(methods)),lwd=rep(5,length(methods)),col=1:length(methods))
rocPerTFResults <- c()
if(!all(is.na(goldStandard))){
# Calculate average ROC per TF
tfs <- unique(goldStandard[,1])
goldcounts <- table(goldStandard[subset,c(1,3)])[,2]
tfs <- tfs[goldcounts>0]
goldcounts <- goldcounts[goldcounts>0]
TFaucrocs <- sapply(tfs, function(tf){
tfsub <- goldStandard[,1] %in% tf
sapply(methods, function(x){
methodPred  <- prediction(datalist[[x]][subset & tfsub], datalist[["Gold Standard"]][subset & tfsub])
performance(methodPred, "auc")@y.values[[1]]
})
})
meanROC <- apply(TFaucrocs,1,mean)
wmeanROC <- apply(TFaucrocs,1,function(x){
sum(x*goldcounts)/sum(goldcounts)
})
rocPerTFResults <- c(rocPerTFResults, paste("Average within TF ROC, weighted by gold standard hits -", organism, includeSubset))
rocPerTFResults <- c(rocPerTFResults, wmeanROC)
}
write.table(rocPerTFResults, file=paste("./output/",organism, includeSubset,"_aucroc_per_TF.txt",sep=""))
}
sortMelt <- function(df){df[order(df[,1],df[,2]),]}
removeDiagonal <- function(x){x[x[,1]!=x[,2],]}
meltToCharacter <- function(x){
x[,1]<-as.character(x[,1])
x[,2]<-as.character(x[,2])
x
}
pandaMelt <- panda(motifs, exprData, progress=F)@regNet %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
degreeMelt <- degreeApproach(motifs) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
bereMelt <- bere(motifs, exprData, cpp=F, verbose=F) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
##########  LDA BERE
ldabereMelt <- ldaBERE(motifs, exprData) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt10 <- bereFull(motifs, exprData, alpha=1, lambda=10) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
tfCorMelt <- abs(cor(x=t(exprData[rownames(exprData) %in% transFactors,]), y=t(exprData))) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
goldStandard <- goldStandard %>% meltToCharacter %>% removeDiagonal %>% sortMelt
motifs <- motifs %>% meltToCharacter %>% removeDiagonal %>% sortMelt
datalist <- list("Gold Standard"=goldStandard[,3],
"Degree-only"=degreeMelt[,3],
"PANDA"=pandaMelt[,3],
"BERE"=bereMelt[,3],
"LDA BERE"=ldabereMelt[,3],
"Full BERE 10"=fullbereMelt10[,3],
"TF Corr"=tfCorMelt[,3],#+motifs[,3],
"Motifs"=motifs[,3])
plotROC(datalist, "all", organism=dataset, goldStandard)
datalist <- list("Gold Standard"=goldStandard[,3],
"Full BERE 10"=fullbereMelt10[,3],
"Motifs"=motifs[,3])
plotROC(datalist, "all", organism=dataset, goldStandard)
datalist <- list("Gold Standard"=goldStandard[,3],
"BERE"=bereMelt[,3],
"Full BERE 10"=fullbereMelt10[,3],
"Motifs"=motifs[,3])
plotROC(datalist, "all", organism=dataset, goldStandard)
datalist <- list("Gold Standard"=goldStandard[,3],
"Degree-only"=degreeMelt[,3],
"PANDA"=pandaMelt[,3],
"BERE"=bereMelt[,3],
"LDA BERE"=ldabereMelt[,3],
"Full BERE 10"=fullbereMelt10[,3],
"TF Corr"=tfCorMelt[,3],#+motifs[,3],
"Motifs"=motifs[,3])
plotROC(datalist, "all", organism=dataset, goldStandard)
datalist <- list("Gold Standard"=goldStandard[,3],
"Degree-only"=degreeMelt[,3],
"BERE"=bereMelt[,3],
"LDA BERE"=ldabereMelt[,3],
"Full BERE 10"=fullbereMelt10[,3],
"Motifs"=motifs[,3])
plotROC(datalist, "all", organism=dataset, goldStandard)
datalist <- list("Gold Standard"=goldStandard[,3],
"Degree-only"=degreeMelt[,3],
"PANDA"=pandaMelt[,3],
"TF Corr"=tfCorMelt[,3],#+motifs[,3],
"Motifs"=motifs[,3])
plotROC(datalist, "all", organism=dataset, goldStandard)
datalist <- list("Gold Standard"=goldStandard[,3],
"PANDA"=pandaMelt[,3],
"BERE"=bereMelt[,3],
"Full BERE 10"=fullbereMelt10[,3],
"Motifs"=motifs[,3])
plotROC(datalist, "all", organism=dataset, goldStandard)
plotROC(datalist, "motif", organism=dataset, goldStandard)
plotROC(datalist, "nonmotif", organism=dataset, goldStandard)
fullbereMelt1 <- bereFull(motifs, exprData, alpha=1, lambda=1) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt2 <- bereFull(motifs, exprData, alpha=1, lambda=2) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt5 <- bereFull(motifs, exprData, alpha=1, lambda=5) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt10 <- bereFull(motifs, exprData, alpha=1, lambda=10) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt15 <- bereFull(motifs, exprData, alpha=1, lambda=15) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt25 <- bereFull(motifs, exprData, alpha=1, lambda=25) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt40 <- bereFull(motifs, exprData, alpha=1, lambda=40) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
fullbereMelt1000 <- bereFull(motifs, exprData, alpha=1, lambda=1000) %>% melt %>% meltToCharacter %>% removeDiagonal %>% sortMelt
datalist <- list("Gold Standard"=goldStandard[,3],
"PANDA"=pandaMelt[,3],
"Full BERE 1"=fullbereMelt1[,3],
"Full BERE 2"=fullbereMelt2[,3],
"Full BERE 5"=fullbereMelt5[,3],
"Full BERE 10"=fullbereMelt10[,3],
"Full BERE 15"=fullbereMelt15[,3],
"Full BERE 25"=fullbereMelt25[,3],
"Full BERE 40"=fullbereMelt40[,3],
"Full BERE 1000"=fullbereMelt1000[,3],
"Motifs"=motifs[,3])
plotROC(datalist, "all", organism=dataset, goldStandard)
bereFull
library(bereR)
#library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
copd.filename <- "~/gd/Harvard/Research/data/Eclipse/null.networks_all.rds"
dataset.filename <- "~/gd/Harvard/Research/data/Eclipse/eclipse.networks.rds"
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
exprFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt"
#exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
clinicalFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt"
#clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
casesString <- "COPD"
controlsString <- "Smoker Control"
analysisName <- "COPDGene"
nullPerms <- 500
args<-commandArgs(TRUE)
if(length(args)!=0){
motifFile <- args[1]
exprFile <- args[2]
ppiFile <- args[3]
clinicalFile <- args[4]
casesString <- args[5]
controlsString <- args[6]
analysisName <- args[7]
nullPerms <- as.numeric(args[8])
}
nullPerms <- 50
analysisName
outputDir <- file.path("~",paste(analysisName,"_output",sep=""))
dir.create(outputDir, showWarnings=FALSE)
######################################################
##      Data Loading from ECLIPSE dataset          ###
##                                                 ###
######################################################
dataset <- list()
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
dataset$clinical <- dataset$clinical[colnames(dataset$exp),]    # Make sure clinical only contains patients with expression data
# Specify the group partition
casesFilter <- dataset$clinical$Subject.type==casesString
controlsFilter <- dataset$clinical$Subject.type==controlsString
dataset$casesNetwork <- bereFull(dataset$motif,dataset$exp[,casesFilter])
dataset$controlsNetwork <- bereFull(dataset$motif,dataset$exp[,controlsFilter])
# Copy expression data for null network generation
null.exp <- dataset$exp
#Parallel stuff
library(foreach)
library(doParallel)
num_cores <- detectCores() - 1
num_cores
if(!is.na(num_cores)){
cl <- makeCluster(num_cores)
registerDoParallel(cl)
}
strt<-Sys.time()
iters <- nullPerms
iters
null.networks<-foreach(icount(iters),.packages=c("bereR","reshape2","penalized")) %dopar% {
print("creating a coupla null networks")
rownames(null.exp) <- rownames(null.exp)[sample(1:nrow(null.exp))]
res1 <- bereFull(dataset$motif,null.exp[,casesFilter])
res2 <- bereFull(dataset$motif,null.exp[,controlsFilter])
list(res1,res2)
}
print(Sys.time()-strt)
if(!is.na(num_cores)){
stopCluster(cl)
}
tm.observed <- transformation.matrix(dataset$casesNetwork, dataset$controlsNetwork,remove.diagonal=T,method="ols")
tm.null <- lapply(null.networks, function(x){
transformation.matrix(x[[1]],x[[2]],method="ols",remove.diagonal = T)
})
ssodm.plot(tm.observed, tm.null,plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,sep=""))
ssodm.plot(tm.observed, tm.null, rescale=T, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,sep=""))
png(file.path(outputDir,'SSODMplot_unscaled.png'), width=800)
ssodm.plot(tm.observed, tm.null,plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,sep=""))
dev.off()
png(file.path(outputDir,'SSODMplot_scaled.png'), width=800)
ssodm.plot(tm.observed, tm.null, rescale=T, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,sep=""))
dev.off()
exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
outputDir <- file.path("~",paste(analysisName,"_output",sep=""))
outputDir
analysisName <- "ECLIPSE"
outputDir <- file.path("~",paste(analysisName,"_output",sep=""))
outputDir
dir.create(outputDir, showWarnings=FALSE)
dataset <- list()
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
dataset$clinical <- dataset$clinical[colnames(dataset$exp),]    # Make sure clinical only contains patients with expression data
# Specify the group partition
casesFilter <- dataset$clinical$Subject.type==casesString
controlsFilter <- dataset$clinical$Subject.type==controlsString
######################################################
##  Running null networks with improved algorithm  ###
##                 2/25/15    START                ###
######################################################
dataset$casesNetwork <- bereFull(dataset$motif,dataset$exp[,casesFilter])
dataset$controlsNetwork <- bereFull(dataset$motif,dataset$exp[,controlsFilter])
# Copy expression data for null network generation
null.exp <- dataset$exp
#Parallel stuff
library(foreach)
library(doParallel)
# Calculate the number of cores
num_cores <- detectCores() - 4
# Initiate cluster
if(!is.na(num_cores)){
cl <- makeCluster(num_cores)
registerDoParallel(cl)
}
#start time
strt<-Sys.time()
iters <- nullPerms
#loop
null.networks<-foreach(icount(iters),.packages=c("bereR","reshape2","penalized")) %dopar% {
print("creating a coupla null networks")
rownames(null.exp) <- rownames(null.exp)[sample(1:nrow(null.exp))]
res1 <- bereFull(dataset$motif,null.exp[,casesFilter])
res2 <- bereFull(dataset$motif,null.exp[,controlsFilter])
list(res1,res2)
}
print(Sys.time()-strt)
if(!is.na(num_cores)){
stopCluster(cl)
}
# Add new null permutations to existing list if any
# This step is to allow for skipping the above step and starting with a stored null set
# if (file.exists(copd.filename)){
# null.networks <- append(null.networks, readRDS("null.networks_all.rds"))
# }
# Save the observed and null networks (as separate files)
#saveRDS(dataset,dataset.filename)
#saveRDS(null.networks,copd.filename)
#####################################################
# START HERE TO SKIP PERMUTATIONS.
#####################################################
#null.networks  <-  readRDS(copd.filename)
#dataset        <-  readRDS(dataset.filename)
#####################################################
###  TF analysis
#####################################################
# Calculate the transformation matrix for the observed data
tm.observed <- transformation.matrix(dataset$casesNetwork, dataset$controlsNetwork,remove.diagonal=T,method="ols")
# Calculate the transformation matrix for the null data
tm.null <- lapply(null.networks, function(x){
transformation.matrix(x[[1]],x[[2]],method="ols",remove.diagonal = T)
})
# Do the sum of sq ODM plot versus null
png(file.path(outputDir,'SSODMplot_unscaled.png'), width=800)
ssodm.plot(tm.observed, tm.null,plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,sep=""))
dev.off()
png(file.path(outputDir,'SSODMplot_scaled.png'), width=800)
ssodm.plot(tm.observed, tm.null, rescale=T, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,sep=""))
dev.off()
networkInferenceMethod <- bere
ssodm.plot(tm.observed, tm.null,plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,sep=""))
ssodm.plot(tm.observed, tm.null, rescale=T, plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,sep=""))
## Gene expression analysis
library(limma)
design <- cbind(1,as.numeric(!casesFilter))
dimnames(design) <- list(colnames(dataset$exp), c("COPD","SMOKER"))
design <- model.matrix(~factor(casesFilter))
diff.exp.res <- lmFit(dataset$exp, design)
diff.exp.res <- ebayes(diff.exp.res)
# 7/28/15
# create results table
dTFI_pVals <- 1-calculate.tm.p.values(tm.observed, tm.null)
dTFI_fdr   <- p.adjust(dTFI_pVals, method = 'fdr')
limma_pVals <- diff.exp.res$p.value[names(dTFI_pVals),2]
limma_fdr <- p.adjust(limma_pVals, method = 'fdr')
resultTable <- cbind(dTFI_pVals,dTFI_fdr,limma_pVals,limma_fdr)
resultTable <- resultTable[order(dTFI_pVals),]
write.csv(resultTable,file=file.path(outputDir,"resultTable.txt"))
save.image(file=file.path(outputDir,"resultImage.RData"))
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
copd.filename <- "~/gd/Harvard/Research/data/Eclipse/null.networks_all.rds"
dataset.filename <- "~/gd/Harvard/Research/data/Eclipse/eclipse.networks.rds"
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
exprFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt"
#exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
clinicalFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt"
#clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
casesString <- "COPD"
controlsString <- "Smoker Control"
analysisName <- "ECLIPSE"
nullPerms <- 500
networkInferenceName <- "bereFull"
args<-commandArgs(TRUE)
if(length(args)!=0){
motifFile <- args[1]
exprFile <- args[2]
ppiFile <- args[3]
clinicalFile <- args[4]
casesString <- args[5]
controlsString <- args[6]
analysisName <- args[7]
nullPerms <- as.numeric(args[8])
networkInferenceName <- args[9]
}
outputDir <- file.path("~",paste(analysisName,"_output",sep=""))
outputDir
# Set the network inference method
if(networkInferenceName=="bere"){
networkInferenceMethod <- bere
}
if(networkInferenceName=="bereFull"){
networkInferenceMethod <- bereFull
}
if(networkInferenceName=="panda"){
networkInferenceMethod <- panda
}
networkInferenceMethod
dataset <- list()
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
dim(tm.observed)
length(tm.null)
tm.obs <- tm.observed
sort.by.sig=F
rescale=F
plot.title=NA
highlight.tfs=NA
if(is.na(plot.title)){
plot.title <- "SSODM observed and null"
}
num.iterations <- length(tm.null)
num.iterations
# Calculate the off-diagonal squared mass for each transition matrix
null.SSODM <- lapply(tm.null,function(x){
apply(x,1,function(y){t(y)%*%y})
})
source('~/gd/Harvard/Research/R_Packages/bptools/R/analysis_functions.R', echo=TRUE)
null.SSODM
length(null.SSODM)
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
null.ssodm.matrix <- t(apply(null.ssodm.matrix,1,sort))
ssodm <- apply(tm.obs,1,function(x){t(x)%*%x})
# Get p-value (rank of observed within null ssodm)
#   p.values <- sapply(1:length(ssodm),function(i){
#     1-findInterval(ssodm[i], null.ssodm.matrix[i,])/num.iterations
#   })
p.values <- 1-pnorm(sapply(1:length(ssodm),function(i){
(ssodm[i]-mean(null.ssodm.matrix[i,]))/sd(null.ssodm.matrix[i,])
}))
dim(null.ssodm.matrix)
null.ssodm.matrix
length(ssodm)
lapply(NULL,function(x){
apply(x,1,function(y){t(y)%*%y})
})
null.SSODM<-list
null.ssodm.matrix <- matrix(unlist(null.SSODM),ncol=num.iterations)
