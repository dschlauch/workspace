# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:100) {
#   incorrectSeats[,i] <- incorrectSeats[,i-1]
if(tkn[i]>0){
incorrectSeat <- sample(which(!tkn),1)
tkn[incorrectSeat]<-2
#     incorrectSeats[incorrectSeat,i] <- T
}else{
tkn[i]<-1
}
stsInterval[,i] <- tkn
}
stsInterval <- stsInterval[sample(1:100),]
stsInterval[1:5,1:5]
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row")
gg_animate(p, interval = .1)
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:100) {
#   incorrectSeats[,i] <- incorrectSeats[,i-1]
if(tkn[i]=="Empty"){
incorrectSeat <- sample(which(!tkn),1)
tkn[incorrectSeat]<-"Incorrect Seat"
#     incorrectSeats[incorrectSeat,i] <- T
}else{
tkn[i]<-"Correct Seat"
}
stsInterval[,i] <- tkn
}
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:100) {
if(tkn[i]=="Empty"){
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}else{
tkn[i]<-"Correct Seat"
}
stsInterval[,i] <- tkn
}
stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
head(df)
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row")
gg_animate(p, interval = .1)
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:100) {
if(tkn[i]=="Empty"){
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}else{
tkn[i]<-"Correct Seat"
}
stsInterval[,i] <- tkn
}
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row")
gg_animate(p, interval = .1)
library(ggplot2)
library(gganimate)
library(tidyr)
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:100) {
if(tkn[i]=="Empty"){
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}else{
tkn[i]<-"Correct Seat"
}
stsInterval[,i] <- tkn
}
# stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row")
gg_animate(p, interval = .1)
library(ggplot2)
library(gganimate)
library(tidyr)
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:100) {
if(tkn[i]!="Empty"){
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}else{
tkn[i]<-"Correct Seat"
}
stsInterval[,i] <- tkn
}
# stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row")
gg_animate(p, interval = .1)
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:100) {
if(tkn[i]=="Empty"){
tkn[i]<-"Correct Seat"
}else{
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}
stsInterval[,i] <- tkn
}
# stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row")
gg_animate(p, interval = .1)
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:99) {
if(tkn[i]=="Empty"){
tkn[i]<-"Correct Seat"
}else{
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}
stsInterval[,i] <- tkn
}
# Get last available seat
tkn[which(tkn=="Empty")]<-"You"
stsInterval[,100]<- tkn
# stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row") + theme_bw()
gg_animate(p, interval = .1)
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:99) {
if(tkn[i]=="Empty"){
tkn[i]<-"Correct Seat"
}else{
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}
stsInterval[,i] <- tkn
}
# Get last available seat
tkn[which(tkn=="Empty")]<-"You"
stsInterval[,100]<- tkn
stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row") + theme_bw()
gg_animate(p, interval = .1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README/README-fig-",
cache.path = "README/README-cache-"
)
getwd()
gg_animate_save(p, "seating.gif", interval = .1)
gg_animate_save(p, "./seating.gif", interval = .1)
?gg_animate_save
gga <- gg_animate(p, "./seating.gif", interval = .1)
gg_animate_save(gga, "./seating.gif")
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:99) {
if(tkn[i]=="Empty"){
tkn[i]<-"Correct Seat"
}else{
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}
stsInterval[,i] <- tkn
}
# Get last available seat
tkn[which(tkn=="Empty")]<-"You"
stsInterval[,100]<- tkn
# stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row") + theme_bw()
gga <- gg_animate(p, interval = .1)
gg_animate_save(gga, "./seating_ordered.gif")
library(animation)
ani.options(autobrowse = FALSE, interval = 1)
opts_knit$set(animation.fun = function(x, options, format = "gif") {
x = c(knitr:::sans_ext(x), knitr:::file_ext(x))
fig.num = options$fig.num
format = sub("^[.]", "", format)
fig.fname = paste0(sub(paste0(fig.num, "$"), "*", x[1]),
".", x[2])
mov.fname = paste0(sub(paste0(fig.num, "$"), "", x[1]), ".",
format)
# order correctly
figs <- Sys.glob(fig.fname)
figs <- figs[order(as.numeric(stringr::str_match(figs, paste0("(\\d+)\\.", x[2]))[, 2]))]
animation::im.convert(figs, output = mov.fname)
sprintf("![%s](%s)", options$label, paste0(opts_knit$get("base.url"), mov.fname))
})
opts_chunk$set(cache = TRUE, message = FALSE, warning = FALSE, fig.show = "animate")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README/README-fig-",
cache.path = "README/README-cache-"
)
library(knitr)
# I want the README to have visible GIFs on GitHub, as
# GitHub cannot show .mp4s or other animation formats.
# I therefore hacked together a GIF animation hook for knitr.
library(animation)
ani.options(autobrowse = FALSE, interval = 1)
opts_knit$set(animation.fun = function(x, options, format = "gif") {
x = c(knitr:::sans_ext(x), knitr:::file_ext(x))
fig.num = options$fig.num
format = sub("^[.]", "", format)
fig.fname = paste0(sub(paste0(fig.num, "$"), "*", x[1]),
".", x[2])
mov.fname = paste0(sub(paste0(fig.num, "$"), "", x[1]), ".",
format)
# order correctly
figs <- Sys.glob(fig.fname)
figs <- figs[order(as.numeric(stringr::str_match(figs, paste0("(\\d+)\\.", x[2]))[, 2]))]
animation::im.convert(figs, output = mov.fname)
sprintf("![%s](%s)", options$label, paste0(opts_knit$get("base.url"), mov.fname))
})
opts_chunk$set(cache = TRUE, message = FALSE, warning = FALSE, fig.show = "animate")
st <- 1:100
tkn <- rep("Empty",100)
jerk <- sample(100,1)
tkn[jerk] <- "Jerk"
stsInterval <- matrix("Empty", nrow=100, ncol=100)
stsInterval[,1] <- tkn
# incorrectSeats <- matrix(NA, nrow=100, ncol=100)
# incorrectSeats[,1] <- tkn
for(i in 2:99) {
if(tkn[i]=="Empty"){
tkn[i]<-"Correct Seat"
}else{
incorrectSeat <- sample(which(tkn=="Empty"),1)
tkn[incorrectSeat]<-"Incorrect Seat"
}
stsInterval[,i] <- tkn
}
# Get last available seat
tkn[which(tkn=="Empty")]<-"You"
stsInterval[,100]<- tkn
# stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") + geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row") + theme_bw()
gga <- gg_animate(p, interval = .01)
gg_animate(gga, "./seating_ordered.gif")
stsInterval <- stsInterval[sample(1:100),]
df <- data.frame(time=rep(1:100, each=100), seats=rep(1:100,100), row=rep(1:25,each=4), col=1:4, taken=c(stsInterval))
p <- ggplot(df, aes(x=col, y=row, frame = time), col="blue") +
geom_tile(aes(fill = taken)) +xlab("Seat") +ylab("Row") + theme_bw()+
scale_fill_brewer(palette="Set1")
gg_animate(p, "./seating_unordered.gif", interval = c(rep(.1,99),1)
)
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
library(ggrepel)
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
casesString <- "COPD"
controlsString <- "Smoker Control"
phenotypeName <- "Subject.type"
analysisName
analysisName <- "NI_only"
analysisCode <- "0001"
outputDir <- file.path("~",paste(analysisName, analysisCode ,sep="_"))
setwd(outputDir)
setwd('..')
getwd()
networkInferenceMethod <- bere
filterType <- NA
dataset <- list()
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
save.image(file=file.path(outputDir,paste("readyToGoECLIPSE",analysisCode,".RData",sep="")))
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
exprFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt"
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
clinicalFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt"
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
dataset <- list()
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
save.image(file=file.path(outputDir,paste("readyToGoCOPDGene",analysisCode,".RData",sep="")))
null.exp <- dataset$exp
#Parallel stuff
# Calculate the number of cores
num_cores <-4
# Initiate cluster
if(!is.na(num_cores)){
cl <- makeCluster(num_cores)
registerDoParallel(cl)
}
strt  <- Sys.time()
iters <- nullPerms+1 # Two networks for each partition, plus observed partition
#loop
print("Running null permutations in parallel")
print(paste0(num_cores," cores used"))
print(paste0(iters," network transitions to be estimated"))
print(Sys.time()-strt)
if(!is.na(num_cores)){
stopCluster(cl)
}
print(paste0("Running iteration ", i))
if(i==1){
# Observed partition : Don't reorder anything
null.exp <- dataset$exp
} else {
# Null partition, randomly reorder
## resample case-control
null.exp <- dataset$exp[,sample(1:ncol(dataset$exp))]
## This line scrambles the gene names (toggle this) 8/18/15
rownames(null.exp) <- rownames(null.exp)[sample(1:nrow(null.exp))]
}
#     null.exp <- null.exp + matrix(rnorm(length(null.exp))/10,nrow=nrow(null.exp),ncol=ncol(null.exp))
null.exp.cases <- null.exp[,casesFilter]
null.exp.controls <- null.exp[,controlsFilter]
# Some QC for sparse data
if (sum(rowSums(null.exp)==0)>0){
zeroGenes <- which(rowSums(null.exp)==0)
for(gene in zeroGenes){
null.exp[gene,] <- rnorm(ncol(null.exp))
}
}
null.exp <- dataset$exp
null.exp.cases <- null.exp[,casesFilter]
null.exp.controls <- null.exp[,controlsFilter]
if (sum(rowSums(null.exp)==0)>0){
zeroGenes <- which(rowSums(null.exp)==0)
for(gene in zeroGenes){
null.exp[gene,] <- rnorm(ncol(null.exp))
}
}
tmpNetCases <- networkInferenceMethod(dataset$motif, null.exp.cases)
tmpNetControls <- networkInferenceMethod(dataset$motif, null.exp.controls)
saveRDS(tmpNetCases,file.path(outputDir,'COPDGeneCases.rds'))
saveRDS(tmpNetControls,file.path(outputDir,'COPDGeneControls.rds'))
