sample1 = c(1:40),
sample2 = c(30:60)
),
filename = NULL
);
# Save picture to non-TIFF file type
# currently working on adding this functionality directly into venn.diagram
venn.plot <- venn.diagram(
x = list (
A = 1:10,
B = 6:25
),
filename = NULL
);
jpeg("venn_jpeg.jpg");
grid.draw(venn.plot);
dev.off();
## End(Not run)
#dontrun-starts-here
### NB: All figures from the paper can be run, but are turned off from
###     automatic execution to reduce burden on CRAN computing resources.
## Not run:
# Figure 1A
venn.plot <- venn.diagram(
x = list(
Label = 1:100
),
filename = "1A-single_Venn.tiff",
col = "black",
lwd = 9,
fontface = "bold",
fill = "grey",
alpha = 0.75,
cex = 4,
cat.cex = 3,
cat.fontface = "bold",
);
# Figure 1B
venn.plot <- venn.diagram(
x = list(
X = 1:150,
Y = 121:180
),
filename = "1B-double_Venn.tiff",
lwd = 4,
fill = c("cornflowerblue", "darkorchid1"),
alpha = 0.75,
label.col = "white",
cex = 4,
fontfamily = "serif",
fontface = "bold",
cat.col = c("cornflowerblue", "darkorchid1"),
cat.cex = 3,
cat.fontfamily = "serif",
cat.fontface = "bold",
cat.dist = c(0.03, 0.03),
cat.pos = c(-20, 14)
);
# Figure 1C
venn.plot <- venn.diagram(
x = list(
R = c(1:70, 71:110, 111:120, 121:140),
B = c(141:200, 71:110, 111:120, 201:230),
G = c(231:280, 111:120, 121:140, 201:230)
),
filename = "1C-triple_Venn.tiff",
col = "transparent",
fill = c("red", "blue", "green"),
alpha = 0.5,
label.col = c("darkred", "white", "darkblue", "white",
"white", "white", "darkgreen"),
cex = 2.5,
fontfamily = "serif",
fontface = "bold",
cat.default.pos = "text",
cat.col = c("darkred", "darkblue", "darkgreen"),
cat.cex = 2.5,
cat.fontfamily = "serif",
cat.dist = c(0.06, 0.06, 0.03),
cat.pos = 0
);
# Figure 1D
venn.plot <- venn.diagram(
x = list(
I = c(1:60, 61:105, 106:140, 141:160, 166:175, 176:180, 181:205,
206:220),
IV = c(531:605, 476:530, 336:375, 376:405, 181:205, 206:220, 166:175,
176:180),
II = c(61:105, 106:140, 181:205, 206:220, 221:285, 286:335, 336:375,
376:405),
III = c(406:475, 286:335, 106:140, 141:160, 166:175, 181:205, 336:375,
476:530)
),
filename = "1D-quadruple_Venn.tiff",
col = "black",
lty = "dotted",
lwd = 4,
fill = c("cornflowerblue", "green", "yellow", "darkorchid1"),
alpha = 0.50,
label.col = c("orange", "white", "darkorchid4", "white", "white", "white",
"white", "white", "darkblue", "white",
"white", "white", "white", "darkgreen", "white"),
cex = 2.5,
fontfamily = "serif",
fontface = "bold",
cat.col = c("darkblue", "darkgreen", "orange", "darkorchid4"),
cat.cex = 2.5,
cat.fontfamily = "serif"
);
# Figure 2-1
venn.plot <- venn.diagram(
x = list(
A = 1:105,
B = 101:115
),
filename = "2-1_special_case_ext-text.tiff",
cex = 2.5,
cat.cex = 2.5,
cat.pos = c(-20, 20),
ext.line.lty = "dotted",
ext.line.lwd = 2,
ext.pos = 12,
ext.dist = -0.12,
ext.length = 0.85
);
# Figure 2-2
venn.plot <- venn.diagram(
x = list(
A = 1:100,
B = 1:10
),
filename = "2-2_special_case_pairwise-inclusion.tiff",
cex = 2.5,
cat.cex = 2.5,
cat.pos = 0
);
# Figure 2-3
venn.plot <- venn.diagram(
x = list(
A = 1:150,
B = 151:250
),
filename = "2-3_special_case_pairwise-exclusion.tiff",
cex = 2.5,
cat.cex = 2.5,
cat.pos = c(0, 0),
cat.dist = 0.05
);
# Figure 2-4
venn.plot <- venn.diagram(
x = list(
A = c(1:50, 101:140, 141:160, 161:170),
B = c(171:230, 101:140, 161:170, 291:320),
C = c(141:160, 161:170, 291:320)
),
filename = "2-4_triple_special_case-001.tiff",
cex = 2.5,
cat.cex = 2.5,
cat.dist = c(0.05, 0.05, -0.1)
);
# Figure 2-5
venn.plot <- venn.diagram(
x = list(
A = c(1:100),
B = c(61:70, 71:100),
C = c(41:60, 61:70)
),
filename = "2-5_triple_special_case-012AA.tiff",
cex = 2.5,
cat.cex = 2.5,
cat.pos = c(-25, 0, 30),
cat.dist = c(0.05, 0.05, 0.02)
);
# Figure 2-6
venn.plot <- venn.diagram(
x = list(
A = c(1:90),
B = c(1:25),
C = c(1:5)
),
filename = "2-6_triple_special_case-022AAAO.tiff",
cex = 2.5,
cat.cex = 2.5,
cat.pos = 0,
cat.dist = c(0.03, 0.03, 0.01)
);
# Figure 2-7
venn.plot <- venn.diagram(
x = list(
A = c(1:20),
B = c(21:80),
C = c(81:210)
),
filename = "2-7_triple_special_case-100.tiff",
cex = 2.5,
cat.cex = 2.5,
cat.dist = 0.05
);
# Figure 2-8
venn.plot <- venn.diagram(
x = list(
A = c(1:80),
B = c(41:150),
C = c(71:100)
),
filename = "2-8_triple_special_case-011A.tiff",
cex = 2.5,
cat.cex = 2.5,
cat.dist = c(0.07, 0.07, 0.02),
cat.pos = c(-20, 20, 20)
);
# Figure 2-9
venn.plot <- venn.diagram(
x = list(
A = c(1:10),
B = c(11:90),
C = c(81:90)
),
filename = "2-9_triple_special_case-121AO.tiff",
cex = 2.5,
cat.cex = 2.5,
cat.pos = 0,
cat.dist = c(0.04, 0.04, 0.02),
reverse = TRUE
);
print(niName)
Slide With Plot
combn(studies,2)
studies <- c("ECLIPSE", "COPDGENE", "LGRC","LTCOPD")
combn(studies,2)
niMethods <- c("bere","WGCNA","CLR","ARACNE")
?generateNIDifferencePlot
generateNIDifferencePlot
studies <- c("ECLIPSE", "COPDGENE", "LGRC","LTCOPD")
niMethods <- c("bere","WGCNA","CLR","ARACNE")
apply(combn(studies,2), 2, function(x){
sapply(niMethods, function(meth) generateNIDifferencePlot(x[1],x[2],meth) )
}
studies <- c("ECLIPSE", "COPDGENE", "LGRC","LTCOPD")
niMethods <- c("bere","WGCNA","CLR","ARACNE")
apply(combn(studies,2), 2, function(x){
sapply(niMethods, function(meth) generateNIDifferencePlot(x[1],x[2],meth) )
}
apply(combn(studies,2), 2, function(x){
print(x)
#   sapply(niMethods, function(meth) generateNIDifferencePlot(x[1],x[2],meth) )
})
studies <- c("ECLIPSE", "COPDGENE", "LGRC","LTCOPD")
niMethods <- c("bere","WGCNA","CLR","ARACNE")
apply(combn(studies,2), 2, function(x){
print(x)
sapply(niMethods, function(meth) generateNIDifferencePlot(x[1],x[2],meth) )
})
source('~/.active-rstudio-document')
niMethods <- c("bere","WGCNA","CLR")
apply(combn(studies,2), 2, function(x){
print(x)
sapply(niMethods, function(meth) generateNIDifferencePlot(x[1],x[2],meth) )
print("done")
})
source('~/gd/Harvard/Research/R_workspace/generate_NI_plots.R')
niMethods <- c("ARACNE")
apply(combn(studies,2), 2, function(x){
print(x)
sapply(niMethods, function(meth) generateNIDifferencePlot(x[1],x[2],meth) )
print("done")
})
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
outputDir
getwd()
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
1+1
1+1
3
1
dim(merged.data.frame)
rownames(merged.data.frame)
merged.data.frame[1:5,1:5]
merged.data.frame[,1]
sort(as.character(merged.data.frame[,1]))
1+1
1
c
3
1+3
3
4
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
library(ggrepel)
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
library(ggrepel)
study <- "ECLIPSE"
motifVersion <- "JASPAR2014"
source("~/gd/Harvard/Research/R_workspace/load_TM_data.R")
analysisName
analysisCode
outputDir <- "analysisName"
source("~/gd/Harvard/Research/R_workspace/load_TM_data.R")
outputDir
outputDir <- analysisName
source("~/gd/Harvard/Research/R_workspace/load_TM_data.R")
analysisName
1
analysisName
load("~/gd/Harvard/Research/TM_outputs/ECLIPSE_bere_bare_55557/activeImage55557.RData")
outputDir
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
setwd("~/gd/Harvard/Research/TM_outputs/")
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
outputDir
outputDir <- "./ECLIPSE_bere_bare_55557"
getwd90
getwd()
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
tiff(file.path(outputDir,paste('TM_heatmap.tiff', sep="")), width=1600, height=1600)
print(p1)
dev.off()
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=1600, height=1600)
print(p1)
dev.off()
ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
#   theme(axis.text.y = element_text(size=3), axis.text.x = element_text(size=3,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix")
ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.text.y = NA, axis.text.x = NA) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix")
ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI", labels=NA) + theme_bw() +
theme(axis.text.y = element_text(size=3), axis.text.x = element_text(size=3,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix")
ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI", labels=NULL) + theme_bw() +
theme(axis.text.y = element_text(size=3), axis.text.x = element_text(size=3,angle = 90, hjust = 1)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix")
ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.text.y = element_blank(), axis.text.x = element_blank()) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix")
ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank()) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix")
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=1600, height=1600)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank()) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix")
print(p1)
dev.off()
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=800, height=800)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank()) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix")
print(p1)
dev.off()
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=800, height=800)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), plot.title=element_text(family="Times", face="bold", size=20)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix")
print(p1)
dev.off()
load("~/gd/Harvard/Research/TM_outputs/ECLIPSE_bere_bare_55557/activeImage55557.RData")
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
library(ggrepel)
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=800, height=800)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), plot.title=element_text(family="Times", face="bold", size=20)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix (Smoker Controls to COPD Patients")
print(p1)
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=800, height=800)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), plot.title=element_text(family="Times", face="bold", size=20)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix (Smoker Controls to COPD Patients")
p1 <- ggplot(df, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), plot.title=element_text(family="Times", face="bold", size=20)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix (Smoker Controls to COPD Patients")
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
getwd()
setwd('../TM_outputs/')
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
outputDir
outputDir<-"./ECLIPSE_bere_bare_55557""
outputDir<-"./ECLIPSE_bere_bare_55557"
source('~/gd/Harvard/Research/R_workspace/process_TM.R')
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=800, height=800)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), plot.title=element_text(family="Times", face="bold", size=20)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix (Smoker Controls to COPD Patients)")
print(p1)
dev.off()
tm.sigmas
analysisNames <- c("ECLIPSE_combined_runs","COPDGene_combined_runs", "LGRC_combined_runs","LTCOPD_combined_runs")
displayNames <- c("ECLIPSE","COPDGene","LGRC","LTCOPD")
baseDir <- "~/gd/Harvard/Research/TM_outputs/JASPAR2014/BERE/"
outputDir <- './'
setwd(baseDir)
filenames <- sapply(analysisNames, function(aname){
dir(paste0(baseDir,aname), full.names = T, recursive = TRUE, all.files = TRUE, pattern="resultTable*")
})
filenames
resultTables <- lapply(filenames, read.csv)
names(resultTables) <- analysisNames
resultTables <- lapply(resultTables, function(x){
x$rankSig <- rank(x$dTFI.normalized.scores)
x <- x[order(-x$Magnitude),]
x$rankMag <- 1:nrow(x)
x$limma <- exp(-(x$limma))
x$negLogPValues <- -log(x$dTFI.normalized.scores)
colnames(x) <- paste(analysisNames[parent.frame()$i], colnames(x), sep="_")
x
})
# Merge results into single data.frame
merged.data.frame = Reduce(function(...) merge(..., by=1,all=T), resultTables)
merged.data.frame <- merged.data.frame[order(merged.data.frame[,2]),]
merged.data.frame
merged.data.frame = Reduce(function(...) merge(..., by=1,all=T), resultTables)
merged.data.frame <- merged.data.frame[order(merged.data.frame[,2]),]
merged.data.frame
head(merged.data.frame)
merged.data.frame[merged.data.frame[,1]=="FOX03",]
merged.data.frame[,1]
sort(merged.data.frame[,1])
merged.data.frame[,1]=="FOXO3"
merged.data.frame[merged.data.frame[,1]=="FOXO3",]
merged.data.frame[merged.data.frame[,1]=="EGR1",]
cbind(merged.data.frame[merged.data.frame[,1]=="EGR1",])
rbind(merged.data.frame[merged.data.frame[,1]=="EGR1",])
length(merged.data.frame[merged.data.frame[,1]=="EGR1",])
cbind(merged.data.frame[merged.data.frame[,1]=="EGR1",], 1:41)
cbind(merged.data.frame[merged.data.frame[,1]=="EGR1",])
cbind(merged.data.frame[merged.data.frame[,1]=="EGR1",])[grep("values")]
cbind(merged.data.frame[merged.data.frame[,1]=="EGR1",])[,grep("values")]
cbind(merged.data.frame[merged.data.frame[,1]=="EGR1",])[,c(T)]
cbind(merged.data.frame[merged.data.frame[,1]=="EGR1",])[,c(F)]
egr1 <- cbind(merged.data.frame[merged.data.frame[,1]=="EGR1",])
cbind(merged.data.frame[merged.data.frame[,1]=="EGR1",])[,grep("values",egr1)]
grep("values",egr1)
grep(egr1,"values")
grep(egr1,"L")
grep("L",egr1)
grep("LTCOPD_combined_runs_negLogPValues",egr1)
grep("L",names(egr1))
grep("Lfsdf",names(egr1))
grep("value",names(egr1))
egr1[grep("value",names(egr1))]
egr1[grep("alue",names(egr1))]
egr1[grep("FDR",names(egr1))]
head(mdf)
class(mdf[,1])
class(mdf[,2])
levels(mdf[,2])
levels(mdf[,2]) <- sort(levels(mdf[,2]))
?sort
levels(mdf[,2]) <- sort(levels(mdf[,2]),decreasing = T)
levels(mdf[,2])
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), plot.title=element_text(family="Times", face="bold", size=20)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix (Smoker Controls to COPD Patients)")
print(p1)
outputDir
png(file.path(outputDir,paste('TM_heatmap.png', sep="")), width=800, height=800)
p1 <- ggplot(mdf, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value)) + scale_fill_gradient2(name = "dTFI") + theme_bw() +
theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), plot.title=element_text(family="Times", face="bold", size=20)) +
xlab("Transcription Factors") + ylab("Transcription Factors") + ggtitle("ECLIPSE Transition Matrix (Smoker Controls to COPD Patients)")
print(p1)
dev.off()
getwd()
levels(mdf[,1])
levels(mdf[,2])
