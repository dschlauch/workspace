if (motifVersion=="JASPAR2014"){
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
}
if (motifVersion=="JASPAR2016"){
motifFile <- "does not exist yet"
}
if (motifVersion=="CISPB"){
motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
}
if (study=="ECLIPSE"){
exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
#ECLIPSE labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="COPDGENE"){
exprFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt"
clinicalFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt"
#COPDGene labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LGRC"){
exprFile <- "~/gd/Harvard/Research/data/LGRC/LGRC_expression.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LGRC/lgrc.merged.clinical.data.clean.txt"
#LGRC labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LTCOPD"){
exprFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_clinical.txt"
#LTCOPD labels
casesString <- "COPD"
controlsString <- "Control"
phenotypeName <- "diagnosis"
} else if (study=="GTEX"){
exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
clinicalFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_clinical.txt"
#GTEX labels
casesString <- "cells_ebv-transformed_lymphocytes"
controlsString <- "skin"
phenotypeName <- "our_subtypes"
}
# motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
# exprFile <- "~/gd/Harvard/Research/data/Ovarian/CombinedOV.txt"
# exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
#
#
#
#
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
#c
dataset <- list()
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
dim(dataset$exo)
dim(dataset$exp)
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
filterType<-NA
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
subsetFilter
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
dim(dataset$exp)
dataset$motif
dim(dataset$motif)
length(unique(dataset$motif[,2])
)
dataset$motif    <- read.table(motifFile,header=F)
length(unique(dataset$motif[,2])
)
length(unique(dataset$motif[,2]))
length(intersect(rownames(dataset$exp),unique(dataset$motif[,2])))
study <- "ECLIPSE"
if (motifVersion=="JASPAR2014"){
motifFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Motif.txt"
}
if (motifVersion=="JASPAR2016"){
motifFile <- "does not exist yet"
}
if (motifVersion=="CISPB"){
motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
}
if (study=="ECLIPSE"){
exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
#ECLIPSE labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="COPDGENE"){
exprFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt"
clinicalFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt"
#COPDGene labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LGRC"){
exprFile <- "~/gd/Harvard/Research/data/LGRC/LGRC_expression.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LGRC/lgrc.merged.clinical.data.clean.txt"
#LGRC labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LTCOPD"){
exprFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_clinical.txt"
#LTCOPD labels
casesString <- "COPD"
controlsString <- "Control"
phenotypeName <- "diagnosis"
} else if (study=="GTEX"){
exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
clinicalFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_clinical.txt"
#GTEX labels
casesString <- "cells_ebv-transformed_lymphocytes"
controlsString <- "skin"
phenotypeName <- "our_subtypes"
}
# motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
# exprFile <- "~/gd/Harvard/Research/data/Ovarian/CombinedOV.txt"
# exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
#
#
#
#
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
#clinicalFile <- "~/gd/Harvard/Research/data/Ovarian/Clinical.txt"
dataset <- list()
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
length(intersect(rownames(dataset$exp),unique(dataset$motif[,2])))
length(rownames(dataset$exp))
study <- "LTCOPD"
#
if (study=="ECLIPSE"){
exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
#ECLIPSE labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="COPDGENE"){
exprFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt"
clinicalFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt"
#COPDGene labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LGRC"){
exprFile <- "~/gd/Harvard/Research/data/LGRC/LGRC_expression.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LGRC/lgrc.merged.clinical.data.clean.txt"
#LGRC labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LTCOPD"){
exprFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_clinical.txt"
#LTCOPD labels
casesString <- "COPD"
controlsString <- "Control"
phenotypeName <- "diagnosis"
} else if (study=="GTEX"){
exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
clinicalFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_clinical.txt"
#GTEX labels
casesString <- "cells_ebv-transformed_lymphocytes"
controlsString <- "skin"
phenotypeName <- "our_subtypes"
}
# motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
# exprFile <- "~/gd/Harvard/Research/data/Ovarian/CombinedOV.txt"
# exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
#
#
#
#
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
#clinicalFile <- "~/gd/Harvard/Research/data/Ovarian/Clinical.txt"
# clinicalFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_clinical.txt"
#
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
dim(dataset$exp)
length(intersect(rownames(dataset$exp),unique(dataset$motif[,2])))
study <- "LGRC"
if (study=="ECLIPSE"){
exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
#ECLIPSE labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="COPDGENE"){
exprFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt"
clinicalFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt"
#COPDGene labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LGRC"){
exprFile <- "~/gd/Harvard/Research/data/LGRC/LGRC_expression.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LGRC/lgrc.merged.clinical.data.clean.txt"
#LGRC labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LTCOPD"){
exprFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_clinical.txt"
#LTCOPD labels
casesString <- "COPD"
controlsString <- "Control"
phenotypeName <- "diagnosis"
} else if (study=="GTEX"){
exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
clinicalFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_clinical.txt"
#GTEX labels
casesString <- "cells_ebv-transformed_lymphocytes"
controlsString <- "skin"
phenotypeName <- "our_subtypes"
}
# motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
# exprFile <- "~/gd/Harvard/Research/data/Ovarian/CombinedOV.txt"
# exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
#
#
#
#
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
#c
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
length(intersect(rownames(dataset$exp),unique(dataset$motif[,2])))
copdgene.email <- read.table("~/Downloads/COPDGene_GSExpressionData.txt", row.names=1,header=T)
study <- "COPDGENE"
if (study=="ECLIPSE"){
exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
#ECLIPSE labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="COPDGENE"){
exprFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_GSExpressionData.txt"
clinicalFile <- "~/gd/Harvard/Research/data/COPDGene/COPDGene_clinical.txt"
#COPDGene labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LGRC"){
exprFile <- "~/gd/Harvard/Research/data/LGRC/LGRC_expression.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LGRC/lgrc.merged.clinical.data.clean.txt"
#LGRC labels
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
} else if (study=="LTCOPD"){
exprFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_exp.txt"
clinicalFile <- "~/gd/Harvard/Research/data/LTCOPD/LTCOPD_clinical.txt"
#LTCOPD labels
casesString <- "COPD"
controlsString <- "Control"
phenotypeName <- "diagnosis"
} else if (study=="GTEX"){
exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
clinicalFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_clinical.txt"
#GTEX labels
casesString <- "cells_ebv-transformed_lymphocytes"
controlsString <- "skin"
phenotypeName <- "our_subtypes"
}
# motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
# exprFile <- "~/gd/Harvard/Research/data/Ovarian/CombinedOV.txt"
# exprFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_expr.txt"
#
#
#
#
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
#clinicalFile <- "~/gd/Harvard/Research/data/Ovarian/Clinical.txt"
# clinicalFile <- "~/gd/Harvard/Research/data/GTEx/GTEx_clinical.txt"
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
dim(copdgene.email)
dim(dataset$exp)
copdgene.email[1:5,1:5]
copdgene.email[1:5,1:5]
dataset$exp[1:5,1:5]
1+1
library(ggplot2)
library(data.table)
setwd('~')
outputDir <- "NI_only_0001"
generateNIDifferencePlot <- function(datasetA, datasetB, niMethod, imageType=png){
datasetACases <- readRDS(file.path(outputDir, paste0(datasetA, '_cases_', niMethod, '_network.rds')))
datasetAControls <- readRDS(file.path(outputDir, paste0(datasetA, '_controls_', niMethod, '_network.rds')))
datasetBCases <- readRDS(file.path(outputDir, paste0(datasetB, '_cases_', niMethod, '_network.rds')))
datasetBControls <- readRDS(file.path(outputDir, paste0(datasetB, '_controls_', niMethod, '_network.rds')))
matchedTFs <- intersect(rownames(datasetACases),rownames(datasetBCases))
matchedGenes <- intersect(colnames(datasetACases),colnames(datasetBCases))
datasetACases    <- datasetACases[matchedTFs,matchedGenes]
datasetAControls <- datasetAControls[matchedTFs,matchedGenes]
datasetBCases    <- datasetBCases[matchedTFs,matchedGenes]
datasetBControls <- datasetBControls[matchedTFs,matchedGenes]
df <- data.frame(dataA=c(datasetACases)-c(datasetAControls), dataB=c(datasetBCases)-c(datasetBControls), studyA=datasetA, studyB=datasetB, method=niMethod)
df
}
studies <- c("ECLIPSE", "COPDGENE", "LGRC", "LTCDNM")
niMethods <- c("Pearson","CLR","MONSTER","ARACNE")
resultsList <- lapply(niMethods, function(meth){
data.table(do.call(rbind, apply(combn(studies,2), 2, function(x){
print(x)
generateNIDifferencePlot(x[1],x[2],meth)
})))
})
getwd()
niMethods <- c("WGCNA","CLR","MONSTER","ARACNE")
niMethods <- c("WGCNA","CLR","MONSTER","ARACNE")
resultsList <- lapply(niMethods, function(meth){
data.table(do.call(rbind, apply(combn(studies,2), 2, function(x){
print(x)
generateNIDifferencePlot(x[1],x[2],meth)
})))
})
colnames(studyCorrelations) <- c("studyA","studyB","corText")
studyCorrelations <- data.table(do.call(rbind,lapply(resultsList, function(resDT){
t(apply(combn(studies,2), 2, function(x){
includerows <- resDT$studyA==x[1] & resDT$studyB==x[2]
dt <- subset(resDT, includerows)
c(x[1],x[2], paste0("r=",round(cor(dt[,dataA],dt[,dataB]),4)))
}))
})))
colnames(studyCorrelations) <- c("studyA","studyB","corText")
studyCorrelations[['method']] <- rep(niMethods,each=6)
# remove points for plotting purposes
resultsList <- lapply(resultsList, function(x){x[c(rep(F,9),T)]})
studyCorrelations[[1]] <- factor(studyCorrelations[[1]], levels=studies)
studyCorrelations[[2]] <- factor(studyCorrelations[[2]], levels=studies)
lapply(seq_along(niMethods), function(i){
resultsList[[i]][['studyA']] <- factor(resultsList[[i]][['studyA']], levels=studies)
resultsList[[i]][['studyB']] <- factor(resultsList[[i]][['studyB']], levels=studies)
png(file.path(outputDir,"plots",paste("all_studies", niMethods[i], 'edgeweight_difference_comparison.png', sep="_")),height=2000,width=2000, units = "px", res = 400)
plot <- ggplot(resultsList[[i]], aes(x=dataA, y=dataB)) + facet_grid(studyA ~ studyB) +
geom_point(size=.1, alpha=.6, col="blue") +
ggtitle(paste(niMethods[i], "edge weight differences between pairs of studies")) +
theme_bw() + theme(plot.title = element_text(size=11, face="bold")) +
xlab("") + ylab("") + scale_x_continuous(labels = function (x) round(x,1)) +
geom_text(data=studyCorrelations[method==niMethods[i]], aes(x=min(resultsList[[i]][,dataA]),y=max(min(resultsList[[i]][,dataB])),label=corText), size=3,hjust=0,vjust=0)
print(plot)
dev.off()
})
niMethods[1] <- "Pearson"
lapply(seq_along(niMethods), function(i){
resultsList[[i]][['studyA']] <- factor(resultsList[[i]][['studyA']], levels=studies)
resultsList[[i]][['studyB']] <- factor(resultsList[[i]][['studyB']], levels=studies)
png(file.path(outputDir,"plots",paste("all_studies", niMethods[i], 'edgeweight_difference_comparison.png', sep="_")),height=2000,width=2000, units = "px", res = 400)
plot <- ggplot(resultsList[[i]], aes(x=dataA, y=dataB)) + facet_grid(studyA ~ studyB) +
geom_point(size=.1, alpha=.6, col="blue") +
ggtitle(paste(niMethods[i], "edge weight differences between pairs of studies")) +
theme_bw() + theme(plot.title = element_text(size=11, face="bold")) +
xlab("") + ylab("") + scale_x_continuous(labels = function (x) round(x,1)) +
geom_text(data=studyCorrelations[method==niMethods[i]], aes(x=min(resultsList[[i]][,dataA]),y=max(min(resultsList[[i]][,dataB])),label=corText), size=3,hjust=0,vjust=0)
print(plot)
dev.off()
})
seq_along(niMethods)
i<-1
resultsList[[i]][['studyA']] <- factor(resultsList[[i]][['studyA']], levels=studies)
resultsList[[i]][['studyB']] <- factor(resultsList[[i]][['studyB']], levels=studies)
png(file.path(outputDir,"plots",paste("all_studies", niMethods[i], 'edgeweight_difference_comparison.png', sep="_")),height=2000,width=2000, units = "px", res = 400)
plot <- ggplot(resultsList[[i]], aes(x=dataA, y=dataB)) + facet_grid(studyA ~ studyB) +
geom_point(size=.1, alpha=.6, col="blue") +
ggtitle(paste(niMethods[i], "edge weight differences between pairs of studies")) +
theme_bw() + theme(plot.title = element_text(size=11, face="bold")) +
xlab("") + ylab("") + scale_x_continuous(labels = function (x) round(x,1)) +
geom_text(data=studyCorrelations[method==niMethods[i]], aes(x=min(resultsList[[i]][,dataA]),y=max(min(resultsList[[i]][,dataB])),label=corText), size=3,hjust=0,vjust=0)
print(plot)
dev.off()
plot <- ggplot(resultsList[[i]], aes(x=dataA, y=dataB)) + facet_grid(studyA ~ studyB) +
geom_point(size=.1, alpha=.6, col="blue") +
ggtitle(paste(niMethods[i], "edge weight differences between pairs of studies")) +
theme_bw() + theme(plot.title = element_text(size=11, face="bold")) +
xlab("") + ylab("") + scale_x_continuous(labels = function (x) round(x,1)) +
geom_text(data=studyCorrelations[method==niMethods[i]], aes(x=min(resultsList[[i]][,dataA]),y=max(min(resultsList[[i]][,dataB])),label=corText), size=3,hjust=0,vjust=0)
print(plot)
niMethods <- c("WGCNA","CLR","MONSTER","ARACNE")
methodNames <- c("Pearson","CLR","MONSTER","ARACNE")
lapply(seq_along(niMethods), function(i){
resultsList[[i]][['studyA']] <- factor(resultsList[[i]][['studyA']], levels=studies)
resultsList[[i]][['studyB']] <- factor(resultsList[[i]][['studyB']], levels=studies)
png(file.path(outputDir,"plots",paste("all_studies", methodNames[i], 'edgeweight_difference_comparison.png', sep="_")),height=2000,width=2000, units = "px", res = 400)
plot <- ggplot(resultsList[[i]], aes(x=dataA, y=dataB)) + facet_grid(studyA ~ studyB) +
geom_point(size=.1, alpha=.6, col="blue") +
ggtitle(paste(methodNames[i], "edge weight differences between pairs of studies")) +
theme_bw() + theme(plot.title = element_text(size=11, face="bold")) +
xlab("") + ylab("") + scale_x_continuous(labels = function (x) round(x,1)) +
geom_text(data=studyCorrelations[method==niMethods[i]], aes(x=min(resultsList[[i]][,dataA]),y=max(min(resultsList[[i]][,dataB])),label=corText), size=3,hjust=0,vjust=0)
print(plot)
dev.off()
})
library(WGCNA)
library(bptools)
library(gplots)
library(ROCR)
library(penalized)
library(tidyr)
library(bereR)
library(pandaR)
library(corpcor)
library(nettools)
##################################################################################################################
#  This script simulates networks from MV gaussian distributions and attempts to reconstruct them using many
#  commonly used NI methods and applies transition matrix on the results
#  Produces a number of comparison plots
#  Estimated run time of script: 30 minutes
##################################################################################################################
set.seed(123)
numTFs <- 100
numGenes <- 5000
numTransitions <- 1000
numSamples <- 500
geneNames <- paste0("Gene",1:numGenes)
TFNames <- paste0("TF",1:numTFs)
true_edges <- runif(numGenes*numTFs)*rbinom(numGenes*numTFs,1,prob=.2)
matrixA_GS <- matrix(true_edges,nrow=numTFs)
matrixB_GS <- matrixA_GS# + matrix(rnorm(10000)/10,nrow=10)
probs <- rexp(numTFs)
TFAs <- sample(1:numTFs,numTransitions, replace=T)
TFBs <- sample(1:numTFs,numTransitions, replace=T, probs)
TFBs[TFAs==TFBs] <- sample(1:numTFs,sum(TFAs==TFBs), replace=T)
sum(sum(TFAs==TFBs))
TFAs
TFBs
numTransitions
strengths <- (c(-(numTransitions/2):-1,1:(numTransitions/2)))/(numTransitions/2)
strengths
tm_true <- matrix(0,numTFs,numTFs)
tm_true
strengths
dim(matrixB_GS)
strengths
library(spov)
library(spcov)
install.packages("spcov")
library(spcov)
?spcov
set.seed(1)
n <- 100
p <- 20
# generate a covariance matrix:
model <- GenerateCliquesCovariance(ncliques=4, cliquesize=p / 4, 1)
model
class(model)
names(model)
x <- matrix(rnorm(n * p), ncol=p) %*% model$A
S <- var(x)
x
dim(x)
step.size <- 100
tol <- 1e-3
P <- matrix(1, p, p)
diag(P) <- 0
lam <- 0.06
mm <- spcov(Sigma=S, S=S, lambda=lam * P,
step.size=step.size, n.inner.steps=200,
thr.inner=0, tol.outer=tol, trace=1)
mm
class(mm)
names(mm)
mm$Sigma
library(gplots)
heatmap.2(mm$Sigma)
P
