source('~/gd/Harvard/Research/R_workspace/consolidateResultTables.R')
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
analysisCode <- sample(100000,1)
getwd()
setwd('~')
motifFile <- "~/gd/Harvard/Research/data/motifs695.txt.txt"
exprFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_Blood_Exp.txt"
ppiFile <- "~/gd/Harvard/Research/data/Eclipse/OV_PPI.txt"
clinicalFile <- "~/gd/Harvard/Research/data/Eclipse/ECLIPSE_blood.txt"
casesString <- "COPD Subjects"
controlsString <- "Smoker Controls"
phenotypeName <- "Subject.type"
analysisName <- "ECLIPSE_new_motif"
nullPerms <- 5
networkInferenceName <- "bere"
filterType <- NA
numMaxCores<-4
permuteGeneLabels <- F
outputDir <- file.path("~",paste(analysisName, analysisCode ,sep="_"))
outputDir
dir.create(outputDir, showWarnings=FALSE)
write.csv(args,file=file.path(outputDir,paste("arguments_",analysisCode,".txt",sep="")))
args
networkInferenceMethod <- bere
dataset <- list()
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
library(org.Hs.eg.db)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
library(org.Hs.eg.db)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
motifFile <- "~/gd/Harvard/Research/data/motifs695.txt"
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
library(org.Hs.eg.db)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
matches
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
# covariateValues <- dataset$clinical[,covariate]
controlsFilter
casesFilter
dim(dataset$exp)
######################################################
dataset <- list()
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
library(org.Hs.eg.db)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
dim(dataset$exp)
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
matches
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$clinical
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
dim(dataset$exp)
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
dim(dataset$exp)
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter
casesString
controlsString
dataset$clinical[,phenotypeName]
casesString
casesString <- "COPD"
controlsString
controlsString <- "Smoker Control"
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter
phenoFilter <- phenoFilter & !is.na(phenoFilter)
phenoFilter
allFilter <- subsetFilter&phenoFilter
allFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
null.exp <- dataset$exp
library(foreach)
library(doParallel)
# Calculate the number of cores
num_cores <- detectCores() - 4
num_cores
num_cores <- min(num_cores, numMaxCores)
num_cores
if(!is.na(num_cores)){
cl <- makeCluster(num_cores)
registerDoParallel(cl)
}
strt  <- Sys.time()
iters <- nullPerms*2+2 # Two networks for each partition, plus observed partition
iters
print("Running null permutations in parallel")
print(paste0(num_cores," cores used"))
print(paste0(iters," networks to be estimated"))
dir.create(file.path(outputDir,"nullNets"))
print(paste0("Running iteration ", i))
i<-1
print(paste0("Running iteration ", i))
if(i<=2){
# Observed partition : Don't reorder anything
null.exp <- dataset$exp
} else {
# Null partition, randomly reorder
## resample case-control
null.exp <- dataset$exp[,sample(1:ncol(dataset$exp))]
## This line scrambles the gene names (toggle this) 8/18/15
rownames(null.exp) <- rownames(null.exp)[sample(1:nrow(null.exp))]
}
if(i%%2==0){
selectedSamples <- casesFilter
} else {
selectedSamples <- controlsFilter
}
selectedSamples
null.exp <- null.exp[,selectedSamples]
if (sum(rowSums(null.exp)==0)>0){
zeroGenes <- which(rowSums(null.exp)==0)
for(gene in zeroGenes){
null.exp[gene,] <- rnorm(ncol(null.exp))
}
}
tmpNet <- networkInferenceMethod(dataset$motif, null.exp)
dim(null.exp)
length(unique(rownames(null.exp)))
head(null.exp)
head(dataset$motif)
dataset$motif[c(1082920, 1083809),]
which(duplicated(dataset$motif))
length(which(duplicated(dataset$motif)))
dim(dataset$motif)
dataset$motif[266:268,]
dataset$motif[335:338,]
dim(dataset$motif[!duplicated(dataset$motif),])
dim(dataset$motif[duplicated(dataset$motif),])
head(dataset$motif[!duplicated(dataset$motif),])
head(dataset$motif)
dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
dim(dataset$motif)
dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
dim(dataset$motif)
dataset <- list()
if (grepl(".txt", exprFile)){
dataset$motif    <- read.table(motifFile,header=F)
dataset$exp      <- read.table(exprFile,row.names=1,header=T)
dataset$clinical <- read.table(clinicalFile,header=T,fill = TRUE, sep="\t",row.names=1)
# Removed this substring line for GTEx data (may need to reinsert for some other dataset)
colnames(dataset$exp) <- substr(colnames(dataset$exp), 1, 10)
rownames(dataset$clinical) <- substr(rownames(dataset$clinical), 1, 10)
} else if (grepl(".rdata", exprFile)){
#GTEx analysis
load(exprFile)
dataset$motif    <- cbind(read.table(motifFile,header=F),1)
# 11/14/15 changed "both" to "obj" for camilla dataset
dataset$exp      <- exprs(obj)
dataset$clinical <- pData(obj)
# Remove ensembl decimal and value after
rownames(dataset$exp) <- substring(rownames(dataset$exp),1,15)
#Get top 20,000 variable genes
rowsds <- sort(apply(dataset$exp, 1, sd), decreasing=T)
genesIncluded <- names(rowsds[1:19000])
dataset$exp <- dataset$exp[genesIncluded,]
dataset$motif <- dataset$motif[dataset$motif[,2]%in%genesIncluded,]
mappingFile <- "~/gd/Harvard/Research/data/GTEx/cisbpall_motinf.txt"
mappings <- read.table(mappingFile, header=T)
mappings[,1] <- substring(mappings[,1],0,5)
dataset$motif[,1] <- mappings[match(dataset$motif[,1], mappings[,1]),2]
dataset$motif <- dataset$motif[!is.na(dataset$motif[,1]),]
library(org.Hs.eg.db)
symbols <- mapIds(org.Hs.eg.db, keys=row.names(dataset$exp),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
dataset$exp <- dataset$exp[!is.na(symbols) & !duplicated(symbols),]
rownames(dataset$exp) <- symbols[!is.na(symbols) & !duplicated(symbols)]
}
dataset$ppi      <- read.table(ppiFile,header=F)
dataset$exp      <- dataset$exp[,order(colnames(dataset$exp))]  # Make sure expression and clinical is in same order
dataset$motif <- dataset$motif[!duplicated(dataset$motif),]
matches <- sort(unique(intersect(rownames(dataset$clinical),colnames(dataset$exp))))
dataset$clinical <- dataset$clinical[matches,]    # Make sure clinical only contains patients with expression data
dataset$exp <- dataset$exp[,matches]    # Make sure expression only contains patients with clinical data
if(permuteGeneLabels){
print("Permuting gene labels once")
rownames(dataset$exp) <- sample(rownames(dataset$exp))
} else {
print("No gene label permutation (default)")
}
# Specify the group partition
if(is.na(filterType)){
subsetFilter <- rep(T,nrow(dataset$clinical))
} else {
subsetFilter <- dataset$clinical[,filterType]==filterBy
}
phenoFilter <- (dataset$clinical[,phenotypeName]==casesString)|(dataset$clinical[,phenotypeName]==controlsString)
phenoFilter <- phenoFilter & !is.na(phenoFilter)
allFilter <- subsetFilter&phenoFilter
dataset$exp <- dataset$exp[,allFilter]
dataset$clinical <- dataset$clinical[allFilter,]
casesFilter <- dataset$clinical[,phenotypeName]==casesString
controlsFilter <- dataset$clinical[,phenotypeName]==controlsString
# covariateValues <- dataset$clinical[,covariate]
# table(dataset$clinical$pkyrs>40, casesFilter)
# mean(dataset$clinical$pkyrs[casesFilter])
# mean(dataset$clinical$pkyrs[!casesFilter])
# male <- dataset$clinical$GENDER=="1-Male"
# mean(dataset$clinical$pkyrs[male])
# mean(dataset$clinical$pkyrs[!male])
#
# table(controlsFilter,dataset$clinical[,"Gold.stage"])
######################################################
##  Running null networks with improved algorithm  ###
##                 2/25/15    START                ###
######################################################
# dataset$casesNetwork <- networkInferenceMethod(dataset$motif,dataset$exp[,casesFilter])
# dataset$controlsNetwork <- networkInferenceMethod(dataset$motif,dataset$exp[,controlsFilter])
#
# # periodically save workspace
# save.image(file=file.path(outputDir,paste("activeImage",analysisCode,".RData",sep="")))
# Copy expression data for null network generation
null.exp <- dataset$exp
#Parallel stuff
library(foreach)
library(doParallel)
# Calculate the number of cores
num_cores <- detectCores() - 4
num_cores <- min(num_cores, numMaxCores)
# Initiate cluster
if(!is.na(num_cores)){
cl <- makeCluster(num_cores)
registerDoParallel(cl)
}
#start time
strt  <- Sys.time()
iters <- nullPerms*2+2 # Two networks for each partition, plus observed partition
#loop
print("Running null permutations in parallel")
print(paste0(num_cores," cores used"))
print(paste0(iters," networks to be estimated"))
dir.create(file.path(outputDir,"nullNets"))
i
print(paste0("Running iteration ", i))
if(i%%2==0){
selectedSamples <- casesFilter
} else {
selectedSamples <- controlsFilter
}
selectedSamples
if(i<=2){
# Observed partition : Don't reorder anything
null.exp <- dataset$exp
} else {
# Null partition, randomly reorder
## resample case-control
null.exp <- dataset$exp[,sample(1:ncol(dataset$exp))]
## This line scrambles the gene names (toggle this) 8/18/15
rownames(null.exp) <- rownames(null.exp)[sample(1:nrow(null.exp))]
}
dim(null.exp)
null.exp <- null.exp[,selectedSamples]
if (sum(rowSums(null.exp)==0)>0){
zeroGenes <- which(rowSums(null.exp)==0)
for(gene in zeroGenes){
null.exp[gene,] <- rnorm(ncol(null.exp))
}
}
dim(null.exp)
tmpNet <- networkInferenceMethod(dataset$motif, null.exp)
getwd()
list <- list.files('../data/nullNets/nullNets')
list
nullNets <- lapply(list, readRDS)
list <- list.files('../data/nullNets/nullNets', full.names=T)
list
nullNets <- lapply(list, readRDS)
length(nullNets)
list <- list.files('../data/nullNets/nullNets', full.names=T)
list
names(nullNets)
list <- sort(list.files('../data/nullNets/nullNets', full.names=T))
list
list <- sort(list.files('../data/nullNets/nullNets', full.names=T))
list
list <- sort(list.files('../data/nullNets/nullNets', full.names=T))
list
list <- sort(list.files('../data/nullNets/nullNets', full.names=T))
list
list <- list.files('../data/nullNets/nullNets', full.names=T)
list
nullNets <- lapply(list[1:30], readRDS)
if(!is.na(num_cores)){
cl <- makeCluster(4)
registerDoParallel(cl)
}
strt  <- Sys.time()
num_cores<-4
if(!is.na(num_cores)){
cl <- makeCluster(4)
registerDoParallel(cl)
}
library(foreach)
library(doParallel)
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
if(!is.na(num_cores)){
cl <- makeCluster(4)
registerDoParallel(cl)
}
strt  <- Sys.time()
#loop
print("Running transition calculations in parallel")
print(paste0(num_cores," cores used"))
print(paste0(length(null.networks)/2," transitions to be estimated"))
null.networks <- nullNets
print(paste0(length(null.networks)/2," transitions to be estimated"))
transMatrices <- foreach(i=1:(length(null.networks)/2),.packages=c("bptools","reshape2","penalized")) %dopar% {
transformation.matrix(null.networks[[2*i]], null.networks[[2*i-1]],remove.diagonal=T,method="ols")
}
print(Sys.time()-strt)
if(!is.na(num_cores)){
stopCluster(cl)
}
outputDir <- '.'
analysisCode<-'0000'
casesString <- 'COPD'
controlsString <- 'Controls'
networkInferenceName <- 'BERE'
analysisName <- 'ECLIPSE'
ssodm.plot(transMatrices[[1]], transMatrices[-1],plot.title=paste("SSODM observed and null, ",casesString," vs ",controlsString,' : ', networkInferenceName, ' : ', analysisName, sep=""))
transMatrices <- foreach(i=1:(length(null.networks)/2),.packages=c("bptools","reshape2","penalized")) %dopar% {
transformation.matrix(null.networks[[2*i]], null.networks[[2*i-1]],remove.diagonal=T,method="ols")
}
if(!is.na(num_cores)){
cl <- makeCluster(4)
registerDoParallel(cl)
}
strt  <- Sys.time()
#loop
print("Running transition calculations in parallel")
print(paste0(num_cores," cores used"))
print(paste0(length(null.networks)/2," transitions to be estimated"))
transMatrices <- foreach(i=1:(length(null.networks)/2),.packages=c("bptools","reshape2","penalized")) %dopar% {
transformation.matrix(null.networks[[2*i]], null.networks[[2*i-1]],remove.diagonal=T,method="ols")
}
print(Sys.time()-strt)
if(!is.na(num_cores)){
stopCluster(cl)
}
class(null.networks)
readRDS('../data/nullNets/nullNets/nullNet_105.rds')
data <- readRDS('../data/nullNets/nullNets/nullNet_105.rds')
class(data)
dim(data)
78*2
*100
78*2*100
78*2*100/1000
